diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/CHANGELOG codestriker/CHANGELOG
--- codestriker-1.7.7/CHANGELOG	Wed Oct 15 07:13:38 2003
+++ codestriker/CHANGELOG	Thu Oct  2 19:26:52 2003
@@ -1,21 +1,6 @@
 *** When upgrading, don't forget to: "cd bin ; ./checksetup.pl" ***
 *** Also, it is _highly_ advisable to backup your data before upgrading ***
 
-Version 1.7.7
-
-* The table of contents links on the view topic page didn't include
-  the brmode parameter, so clicking on a filename link reloaded the
-  whole topic page, which is inconvenient.  This has been fixed.
-
-Version 1.7.6
-
-* Fixed bug where created topics for deployments which had projects
-  disabled were not handled correctly.
-
-* Fixed bug found by Jason Remillard <jremillardshop@yahoo.com> where
-  emails were being sent for those lines which already had a comment,
-  but $allow_comment_email was false.
-
 Version 1.7.5
 
 * Added in support for parsing VSS diffs, and retrieving file data
@@ -29,7 +14,7 @@
   --show-function-line and --show-c-function can be parsed and
   displayed in the view topic screen.
 
-* Incorporated SubmitCodeReview.pl script, which can be used for
+* Incoporated SubmitCodeReview.pl script, which can be used for
   automating the submission of a code review topic from the command
   line.  It also has support for incremental code reviews.  See the
   script and its help text for more details.
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/HACKING codestriker/HACKING
--- codestriker-1.7.7/HACKING	Wed Oct 15 07:13:38 2003
+++ codestriker/HACKING	Sat Jan  3 22:05:23 2004
@@ -1,3 +1,13 @@
-All documentation is now in the Codestriker guide.  The HTML version
+All user documentation is now in the Codestriker guide.  The HTML version
 is in the html directory, and the PDF, PS and RTF formats are in the
 doc directory.
+
+Code Style Guide.
+
+1. All comments must be complete sentances. Start with a capital letter, and end 
+   with a .
+2. Function calls should have no extra spaces around the (), so function( x ), 
+   should be written function(x).
+3. Functions calls with more than one parameter should have spaces after the 
+   argument, so function(x,y,z), should be function(x, y, z).
+4. Limit line length to 80 characters.
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/INFO.txt codestriker/INFO.txt
--- codestriker-1.7.7/INFO.txt	Wed Dec 31 19:00:00 1969
+++ codestriker/INFO.txt	Wed May 29 18:07:28 2002
@@ -0,0 +1,82 @@
+Creating the codestriker database.
+
+/usr/local/pgsql/bin/postmaster -D /usr/local/pgsql/data
+
+
+/usr/local/pgsql/bin/createuser --username=postgres -d -A codestriker
+/usr/local/pgsql/bin/createdb --username=codestriker codestrikerdb
+
+/usr/local/pgsql/bin/dropdb --username=codestriker codestrikerdb
+
+
+/usr/local/pgsql/bin/psql -U codestriker codestrikerdb
+
+----------------------------------------------------------------------
+
+mysqladmin create codestrikerdb
+
+mysqladmin drop codestrikerdb
+
+mysql -u root mysql
+
+CREATE DATABASE codestrikerdb;
+GRANT SELECT,INSERT,UPDATE,DELETE,INDEX,ALTER,CREATE,DROP,REFERENCES ON codestrikerdb.* TO codestriker@localhost IDENTIFIED BY 'cspasswd';
+FLUSH PRIVILEGES;
+
+mysql -u codestriker -D codestrikerdb -p
+
+mysql> CREATE TABLE test (
+    ->       id INT NOT NULL,
+    ->       last_name CHAR(30) NOT NULL,
+    ->       first_name CHAR(30) NOT NULL,
+    ->       PRIMARY KEY (id),
+    ->       INDEX name (last_name,first_name));
+
+show index from version;
+describe version;
+show tables;
+
+
+----------------------------------------------------------------------
+
+/usr/lib/postgresql/bin/postmaster -D /var/lib/postgres/data
+
+
+mysql> select modified_ts, creation_ts from topic;
+ERROR 1146: Table 'codestrikerdb.topic' doesn't exist
+mysql> update topic set version=10, state=5, modified_ts=20020116104906 where id=7168516;
+Query OK, 1 row affected (0.00 sec)
+Rows matched: 1  Changed: 1  Warnings: 0
+
+mysql> select modified_ts, creation_ts from topic where id=7168516;
++----------------+----------------+
+| modified_ts    | creation_ts    |
++----------------+----------------+
+| 20020116104906 | 20020529073931 |
++----------------+----------------+
+1 row in set (0.00 sec)
+
+mysql> update topic set version=10, state=5, modified_ts=20020116104906 where id=7168516;
+Query OK, 0 rows affected (0.00 sec)
+Rows matched: 1  Changed: 0  Warnings: 0
+
+mysql> select modified_ts, creation_ts from topic where id=7168516;
++----------------+----------------+
+| modified_ts    | creation_ts    |
++----------------+----------------+
+| 20020116104906 | 20020529073931 |
++----------------+----------------+
+1 row in set (0.00 sec)
+
+mysql> update topic set version=10, state=5, modified_ts=20020116104950 where id=7168516;
+Query OK, 1 row affected (0.00 sec)
+Rows matched: 1  Changed: 1  Warnings: 0
+
+mysql> select modified_ts, creation_ts from topic where id=7168516;
++----------------+----------------+
+| modified_ts    | creation_ts    |
++----------------+----------------+
+| 20020116104950 | 20020529074022 |
++----------------+----------------+
+1 row in set (0.00 sec)
+
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/Makefile codestriker/Makefile
--- codestriker-1.7.7/Makefile	Wed Dec 31 19:00:00 1969
+++ codestriker/Makefile	Tue Aug 19 17:46:55 2003
@@ -0,0 +1,44 @@
+# Makefile for build Codestriker distribution.
+
+# Path to utilities.
+RM = /bin/rm
+CP = /bin/cp
+MKDIR = /bin/mkdir
+RSYNC = rsync
+ZIP = zip
+TAR = /bin/tar
+
+# Retrieve the current Codestriker version.
+VERSION := $(shell cat lib/Codestriker.pm | perl -ne 'print $$1 if /Codestriker::VERSION\s*=\s*\"(.*)\"/')
+
+# The build directory.
+BUILD_DIR = build/codestriker-$(VERSION)
+
+default: build-zip build-tar-gz
+
+build-zip: build
+	cd build ; \
+	$(ZIP) -r -l codestriker-$(VERSION).zip codestriker-$(VERSION) -x *.png -x *.pdf ; \
+	$(ZIP) -r codestriker-$(VERSION).zip codestriker-$(VERSION) -i *.pdf -i *.png
+
+build-tar-gz: build
+	cd build ; \
+	$(TAR) zcvf codestriker-$(VERSION).tar.gz codestriker-$(VERSION)
+
+build: build-docs
+	$(RM) -fr $(BUILD_DIR)
+	$(MKDIR) -p $(BUILD_DIR)
+	$(RSYNC) -Cavz bin/ $(BUILD_DIR)/bin/ 
+	$(RSYNC) -Cavz lib/ $(BUILD_DIR)/lib/ 
+	$(RSYNC) -Cavz html/ $(BUILD_DIR)/html/ 
+	$(RSYNC) -Cavz cgi-bin/ $(BUILD_DIR)/cgi-bin/ 
+	$(RSYNC) -Cavz template/ $(BUILD_DIR)/template
+	$(CP) codestriker.conf README CHANGELOG HACKING LICENSE $(BUILD_DIR)
+
+build-docs:
+	cd doc ; $(MAKE)
+
+clean:
+	cd doc ; $(MAKE) clean
+	$(RM) -fr build
+	$(RM) -f html/*.html html/*.pdf html/*.rtf html/*.png
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/bin/checksetup.pl codestriker/bin/checksetup.pl
--- codestriker-1.7.7/bin/checksetup.pl	Mon Sep  8 08:49:35 2003
+++ codestriker/bin/checksetup.pl	Sat Jan  3 21:48:07 2004
@@ -182,6 +182,7 @@
 my $auto_increment = ($Codestriker::db =~ /^DBI:mysql/i) ?
     "auto_increment" : "default nextval('sequence')";
 
+
 $table{topic} =
     "id int NOT NULL,
      author varchar(255) NOT NULL,
@@ -195,6 +196,24 @@
      repository text,
      projectid int NOT NULL,
      PRIMARY KEY (id)";
+
+
+# Holds all of the metric data that is owned by a specific user on a specific 
+# topic. One row per metric. Metric data that is left empty does not get a row.
+$table{topic_user_metric} =
+    "topicid int NOT NULL,
+     email varchar(255) NOT NULL,
+     metric_name varchar(80) NOT NULL,
+     value float NOT NULL,
+     PRIMARY KEY (topicid,email,metric_name)";
+
+# Holds all of the metric data that is owned by a specific topic. One row per 
+# metric. Metric data that is empty does not get a row.
+$table{topic_metric} =
+    "topicid int NOT NULL,
+     metric_name varchar(80) NOT NULL,
+     value float NOT NULL,
+     PRIMARY KEY (topicid,metric_name)";
 
 $index{topic} = "CREATE INDEX author_idx ON topic(author)";
 
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/bin/codestriker.pl.base codestriker/bin/codestriker.pl.base
--- codestriker-1.7.7/bin/codestriker.pl.base	Mon Sep  1 22:51:22 2003
+++ codestriker/bin/codestriker.pl.base	Mon Dec 15 18:22:30 2003
@@ -30,24 +30,26 @@
 use Codestriker::Http::Input;
 use Codestriker::Http::Response;
 use Codestriker::Action::CreateTopic;
-use Codestriker::Action::SubmitTopic;
-use Codestriker::Action::ViewTopic;
-use Codestriker::Action::EditTopic;
-use Codestriker::Action::SubmitComment;
-use Codestriker::Action::ViewFile;
-use Codestriker::Action::ViewSearch;
-use Codestriker::Action::SubmitSearch;
+use Codestriker::Action::EditComment;
+use Codestriker::Action::Search;
 use Codestriker::Action::ListTopics;
 use Codestriker::Action::DownloadTopic;
-use Codestriker::Action::ChangeTopicState;
-use Codestriker::Action::ChangeTopics;
-use Codestriker::Action::ListComments;
-use Codestriker::Action::ChangeComments;
 use Codestriker::Action::ListProjects;
 use Codestriker::Action::EditProject;
 use Codestriker::Action::CreateProject;
-use Codestriker::Action::SubmitProject;
+use Codestriker::Action::MetricsReport;
+use Codestriker::Action::SubmitEditTopic;
+use Codestriker::Action::SubmitEditTopicsState;
+use Codestriker::Action::SubmitEditCommentsState;
 use Codestriker::Action::SubmitEditProject;
+use Codestriker::Action::SubmitNewProject;
+use Codestriker::Action::SubmitNewTopic;
+use Codestriker::Action::SubmitNewComment;
+use Codestriker::Action::SubmitSearch;
+use Codestriker::Action::ViewTopicFile;
+use Codestriker::Action::ViewTopicInfo;
+use Codestriker::Action::ViewTopic;
+use Codestriker::Action::ViewTopicComments;
 
 # Set the PATH to something sane.
 $ENV{'PATH'} = "/bin:/usr/bin";
@@ -77,19 +79,21 @@
     my $action = $http_input->get("action");
     if ($action eq "create") {
 	Codestriker::Action::CreateTopic->process($http_input, $http_response);
-    } elsif ($action eq "submit_topic") {
-	Codestriker::Action::SubmitTopic->process($http_input, $http_response);
+    } elsif ($action eq "submit_new_topic") {
+	Codestriker::Action::SubmitNewTopic->process($http_input, $http_response);
     } elsif ($action eq "view") {
 	Codestriker::Action::ViewTopic->process($http_input, $http_response);
+    } elsif ($action eq "viewinfo") {
+	Codestriker::Action::ViewTopicInfo->process($http_input, $http_response);
     } elsif ($action eq "edit") {
-	Codestriker::Action::EditTopic->process($http_input, $http_response);
+	Codestriker::Action::EditComment->process($http_input, $http_response);
     } elsif ($action eq "submit_comment") {
-	Codestriker::Action::SubmitComment->process($http_input,
+	Codestriker::Action::SubmitNewComment->process($http_input,
 						    $http_response);
     } elsif ($action eq "view_file") {
-	Codestriker::Action::ViewFile->process($http_input, $http_response);
+	Codestriker::Action::ViewTopicFile->process($http_input, $http_response);
     } elsif ($action eq "search") {
-	Codestriker::Action::ViewSearch->process($http_input, $http_response);
+	Codestriker::Action::Search->process($http_input, $http_response);
     } elsif ($action eq "submit_search") {
 	Codestriker::Action::SubmitSearch->process($http_input,
 						   $http_response);
@@ -98,17 +102,17 @@
     } elsif ($action eq "download") {
 	Codestriker::Action::DownloadTopic->process($http_input,
 						    $http_response);
-    } elsif ($action eq "change_topic_state") {
-        Codestriker::Action::ChangeTopicState->process($http_input,
+    } elsif ($action eq "change_topic") {
+        Codestriker::Action::SubmitEditTopic->process($http_input,
 						       $http_response);
-    } elsif ($action eq "change_topics") {
-        Codestriker::Action::ChangeTopics->process($http_input,
+    } elsif ($action eq "change_topics_state") {
+        Codestriker::Action::SubmitEditTopicsState->process($http_input,
 						   $http_response);
     } elsif ($action eq "list_comments") {
-	Codestriker::Action::ListComments->process($http_input,
+	Codestriker::Action::ViewTopicComments->process($http_input,
 						   $http_response);
-    } elsif ($action eq "change_comments") {
-	Codestriker::Action::ChangeComments->process($http_input,
+    } elsif ($action eq "change_comments_state") {
+	Codestriker::Action::SubmitEditCommentsState->process($http_input,
 						     $http_response);
     } elsif ($action eq "list_projects") {
 	Codestriker::Action::ListProjects->process($http_input,
@@ -120,11 +124,17 @@
 	Codestriker::Action::CreateProject->process($http_input,
 						    $http_response);
     } elsif ($action eq "submit_project") {
-	Codestriker::Action::SubmitProject->process($http_input,
+	Codestriker::Action::SubmitNewProject->process($http_input,
 						    $http_response);
     } elsif ($action eq "submit_editproject") {
 	Codestriker::Action::SubmitEditProject->process($http_input,
 							$http_response);
+    } elsif ($action eq "metrics_report") {
+	Codestriker::Action::MetricsReport->process($http_input,
+							$http_response);
+    } elsif ($action eq "metrics_download") {
+	Codestriker::Action::MetricsReport->process_download($http_input,
+							     $http_response);
     } else {
 	# Default action is to list topics that are in state open if the
 	# list functionality is enabled, otherwise go to the create topic
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/cgi-bin/codestriker.pl codestriker/cgi-bin/codestriker.pl
--- codestriker-1.7.7/cgi-bin/codestriker.pl	Thu Oct 23 22:56:54 2003
+++ codestriker/cgi-bin/codestriker.pl	Mon Dec 15 18:28:43 2003
@@ -23,7 +23,7 @@
 # checking turned out to be a amjor headache.  For mod_perl, setting this
 # ensures the first time Codestiker is loaded, it can be compiled properly,
 # even if @INC is blatted later.
-use lib '/var/www/codestriker-1.7.7/bin/../lib';
+use lib '/var/www/codestriker/bin/../lib';
 
 use strict;
 
@@ -34,24 +34,26 @@
 use Codestriker::Http::Input;
 use Codestriker::Http::Response;
 use Codestriker::Action::CreateTopic;
-use Codestriker::Action::SubmitTopic;
-use Codestriker::Action::ViewTopic;
-use Codestriker::Action::EditTopic;
-use Codestriker::Action::SubmitComment;
-use Codestriker::Action::ViewFile;
-use Codestriker::Action::ViewSearch;
-use Codestriker::Action::SubmitSearch;
+use Codestriker::Action::EditComment;
+use Codestriker::Action::Search;
 use Codestriker::Action::ListTopics;
 use Codestriker::Action::DownloadTopic;
-use Codestriker::Action::ChangeTopicState;
-use Codestriker::Action::ChangeTopics;
-use Codestriker::Action::ListComments;
-use Codestriker::Action::ChangeComments;
 use Codestriker::Action::ListProjects;
 use Codestriker::Action::EditProject;
 use Codestriker::Action::CreateProject;
-use Codestriker::Action::SubmitProject;
+use Codestriker::Action::MetricsReport;
+use Codestriker::Action::SubmitEditTopic;
+use Codestriker::Action::SubmitEditTopicsState;
+use Codestriker::Action::SubmitEditCommentsState;
 use Codestriker::Action::SubmitEditProject;
+use Codestriker::Action::SubmitNewProject;
+use Codestriker::Action::SubmitNewTopic;
+use Codestriker::Action::SubmitNewComment;
+use Codestriker::Action::SubmitSearch;
+use Codestriker::Action::ViewTopicFile;
+use Codestriker::Action::ViewTopicInfo;
+use Codestriker::Action::ViewTopic;
+use Codestriker::Action::ViewTopicComments;
 
 # Set the PATH to something sane.
 $ENV{'PATH'} = "/bin:/usr/bin";
@@ -81,19 +83,21 @@
     my $action = $http_input->get("action");
     if ($action eq "create") {
 	Codestriker::Action::CreateTopic->process($http_input, $http_response);
-    } elsif ($action eq "submit_topic") {
-	Codestriker::Action::SubmitTopic->process($http_input, $http_response);
+    } elsif ($action eq "submit_new_topic") {
+	Codestriker::Action::SubmitNewTopic->process($http_input, $http_response);
     } elsif ($action eq "view") {
 	Codestriker::Action::ViewTopic->process($http_input, $http_response);
+    } elsif ($action eq "viewinfo") {
+	Codestriker::Action::ViewTopicInfo->process($http_input, $http_response);
     } elsif ($action eq "edit") {
-	Codestriker::Action::EditTopic->process($http_input, $http_response);
+	Codestriker::Action::EditComment->process($http_input, $http_response);
     } elsif ($action eq "submit_comment") {
-	Codestriker::Action::SubmitComment->process($http_input,
+	Codestriker::Action::SubmitNewComment->process($http_input,
 						    $http_response);
     } elsif ($action eq "view_file") {
-	Codestriker::Action::ViewFile->process($http_input, $http_response);
+	Codestriker::Action::ViewTopicFile->process($http_input, $http_response);
     } elsif ($action eq "search") {
-	Codestriker::Action::ViewSearch->process($http_input, $http_response);
+	Codestriker::Action::Search->process($http_input, $http_response);
     } elsif ($action eq "submit_search") {
 	Codestriker::Action::SubmitSearch->process($http_input,
 						   $http_response);
@@ -102,17 +106,17 @@
     } elsif ($action eq "download") {
 	Codestriker::Action::DownloadTopic->process($http_input,
 						    $http_response);
-    } elsif ($action eq "change_topic_state") {
-        Codestriker::Action::ChangeTopicState->process($http_input,
+    } elsif ($action eq "change_topic") {
+        Codestriker::Action::SubmitEditTopic->process($http_input,
 						       $http_response);
-    } elsif ($action eq "change_topics") {
-        Codestriker::Action::ChangeTopics->process($http_input,
+    } elsif ($action eq "change_topics_state") {
+        Codestriker::Action::SubmitEditTopicsState->process($http_input,
 						   $http_response);
     } elsif ($action eq "list_comments") {
-	Codestriker::Action::ListComments->process($http_input,
+	Codestriker::Action::ViewTopicComments->process($http_input,
 						   $http_response);
-    } elsif ($action eq "change_comments") {
-	Codestriker::Action::ChangeComments->process($http_input,
+    } elsif ($action eq "change_comments_state") {
+	Codestriker::Action::SubmitEditCommentsState->process($http_input,
 						     $http_response);
     } elsif ($action eq "list_projects") {
 	Codestriker::Action::ListProjects->process($http_input,
@@ -124,11 +128,17 @@
 	Codestriker::Action::CreateProject->process($http_input,
 						    $http_response);
     } elsif ($action eq "submit_project") {
-	Codestriker::Action::SubmitProject->process($http_input,
+	Codestriker::Action::SubmitNewProject->process($http_input,
 						    $http_response);
     } elsif ($action eq "submit_editproject") {
 	Codestriker::Action::SubmitEditProject->process($http_input,
 							$http_response);
+    } elsif ($action eq "metrics_report") {
+	Codestriker::Action::MetricsReport->process($http_input,
+							$http_response);
+    } elsif ($action eq "metrics_download") {
+	Codestriker::Action::MetricsReport->process_download($http_input,
+							     $http_response);
     } else {
 	# Default action is to list topics that are in state open if the
 	# list functionality is enabled, otherwise go to the create topic
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/codestriker.conf codestriker/codestriker.conf
--- codestriker-1.7.7/codestriker.conf	Thu Oct 23 22:23:11 2003
+++ codestriker/codestriker.conf	Sat Jan  3 22:53:59 2004
@@ -4,7 +4,7 @@
 # Database to use for storing codestriker data.  Examples given are Postgresql
 # and MySQL
 #$db = 'DBI:Pg:dbname=codestrikerdb';
-$db = 'DBI:mysql:dbname=codestrikerdb';
+$db = 'DBI:mysql:dbname=codestrikerdb2';
 
 # Database user.
 $dbuser = 'codestriker';
@@ -61,7 +61,7 @@
 # The final example is a VSS repository.
 @valid_repositories =
     (
-     '/home/sits/cvs',
+     '/home/sites/cvs',
      'http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi /cvsroot',
      'svn:http://svn.collab.net/repos/svn/trunk',
      ':pserver:anonymous:password@cvs.sourceforge.net:/cvsroot',
@@ -199,5 +199,14 @@
 #			  password => '',
 #			  url => 'http://localhost.localdomain/lxr2/ident?i='
 #			}
-			  
 };
+
+# Textual representations of the comment states. The order is important. The state at 
+# index 0, is the default state that the comments are created in. The state information
+# is stored in the database by index, so renaming is ok, reordering them is not ok. You
+# can add more state, or rename the default states with no problem.
+@comment_states = ("Submitted", "Invalid", "Completed");
+
+# Allows you to override the default title of "Codestriker %version%".
+# $title = "Codestriker $Codestriker::VERSION";
+
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/html/codestriker.css codestriker/html/codestriker.css
--- codestriker-1.7.7/html/codestriker.css	Mon Sep  1 18:41:38 2003
+++ codestriker/html/codestriker.css	Sun Oct 26 21:48:14 2003
@@ -119,6 +119,7 @@
 TR.tt1 {background-color: #eeeeee; font-family: Helvetica, Arial}
 
 /* Codestriker heading */
-TD.heading {background-color: #000000; color: #ffffff; font-family: Helvetica, Arial; font-size: x-large}
+TR.heading {background-color: #eeeeee; color: #000000;  font-family: Helvetica, Arial; font-size: x-small}
 
+TD.heading {background-color: #eeeeee; color: #000000;  font-family: Helvetica, Arial; font-size: x-large}
 
Binary files codestriker-1.7.7/html/helpicon.png and codestriker/html/helpicon.png differ
Binary files codestriker-1.7.7/html/homeicon.png and codestriker/html/homeicon.png differ
Binary files codestriker-1.7.7/html/openicon.png and codestriker/html/openicon.png differ
Binary files codestriker-1.7.7/html/searchicon.png and codestriker/html/searchicon.png differ
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/ChangeComments.pm codestriker/lib/Codestriker/Action/ChangeComments.pm
--- codestriker-1.7.7/lib/Codestriker/Action/ChangeComments.pm	Mon Sep  1 18:41:38 2003
+++ codestriker/lib/Codestriker/Action/ChangeComments.pm	Wed Dec 31 19:00:00 1969
@@ -1,90 +0,0 @@
-###############################################################################
-# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
-# sits@users.sourceforge.net
-#
-# This program is free software; you can redistribute it and modify it under
-# the terms of the GPL.
-
-# Action object for the submission of changing multiple comment states.
-
-package Codestriker::Action::ChangeComments;
-
-use strict;
-
-use Codestriker::Action::ListComments;
-
-# Attempt to change the comment states.
-sub process($$$) {
-    my ($type, $http_input, $http_response) = @_;
-
-    my $query = $http_response->get_query();
-
-    # Extract the values from the action.
-    my $comments_ref = $http_input->get('selected_comments');
-    my @comments = @$comments_ref;
-    my $comment_state = $http_input->get('comment_state');
-    my $topic = $http_input->get('topic');
-
-    # Any feedback messages to the user.
-    my $feedback = "";
-
-    # Indicate if changes were made to stale comments.
-    my $stale = 0;
-
-    # Map the state name to its number.
-    my $stateid = -1;
-    my $id;
-    for ($id = 0; $id <= $#Codestriker::comment_states; $id++) {
-	last if ($Codestriker::comment_states[$id] eq $comment_state);
-    }
-    if ($id <= $#Codestriker::comment_states) {
-	$stateid = $id;
-    }
-    
-    # Apply the change to each topic.
-    if ($stateid != -1) {
-	for (my $i = 0; $i <= $#comments; $i++) {
-	    # Extract the line number and version of the comment that is being
-	    # changed.
-	    $comments[$i] =~ /^(.*)\,(.*)\,(.*)\,(.*)$/;
-	    my $filenumber = $1;
-	    my $fileline = $2;
-	    my $filenew = $3;
-	    my $version = $4;
-	    
-	    # Change the comment state.
-	    my $timestamp = Codestriker->get_timestamp(time);
-	    my $rc =
-		Codestriker::Model::Comment->change_state($topic,
-							  $fileline,
-							  $filenumber,
-							  $filenew,
-							  $stateid,
-							  $version);
-
-	    # Record if there was a problem in changing the state.
-	    $stale = 1 if $rc == $Codestriker::STALE_VERSION;
-	}
-    }
-
-    # These message could be made more helpful in the future, but for now...
-    if ($stale) {
-	$feedback = "Some comments could not be updated as they have been " .
-	    "modified by another user.";
-    } elsif ($stateid == -1) {
-	$feedback = "Invalid comment state: \"$comment_state\".";
-    } else {
-	if ($#comments == 0) {
-	    $feedback = "Comment was successfully updated.";
-	} else {
-	    $feedback = "All comments were successfully updated.";
-	}
-    }
-
-    # Direct control to the list comment action class, with the appropriate
-    # feedback message.
-    $http_input->{feedback} = $feedback;
-    Codestriker::Action::ListComments->process($http_input, $http_response);
-}
-
-1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/ChangeTopicState.pm codestriker/lib/Codestriker/Action/ChangeTopicState.pm
--- codestriker-1.7.7/lib/Codestriker/Action/ChangeTopicState.pm	Wed Sep  3 07:20:25 2003
+++ codestriker/lib/Codestriker/Action/ChangeTopicState.pm	Wed Dec 31 19:00:00 1969
@@ -1,127 +0,0 @@
-###############################################################################
-# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
-# sits@users.sourceforge.net
-#
-# This program is free software; you can redistribute it and modify it under
-# the terms of the GPL.
-
-# Action object for handling the submission of changing a topic's state.
-
-package Codestriker::Action::ChangeTopicState;
-
-use strict;
-
-use Codestriker::Model::Topic;
-use Codestriker::Action::ListTopics;
-
-# Attempt to change the topic's state, or to delete it.
-sub process($$$) {
-    my ($type, $http_input, $http_response) = @_;
-
-    my $query = $http_response->get_query();
-
-    # Check that the appropriate fields have been filled in.
-    my $topic = $http_input->get('topic');
-    my $mode = $http_input->get('mode');
-    my $version = $http_input->get('version');
-    my $topic_state = $http_input->get('topic_state');
-    my $email = $http_input->get('email');
-
-    # Check if this action is allowed.
-    if ($Codestriker::allow_delete == 0 && $topic_state eq "Delete") {
-	$http_response->error("This function has been disabled");
-    }
-
-    my $rc = $type->change_state($query, $topic, $topic_state, $version, $email);
-
-    # Set the feedback message to the user.
-    my $feedback = "";
-    if ($rc == $Codestriker::OK) {
-	if ($topic_state eq "Delete") {
-	    $feedback = "Topic has been deleted.";
-	} else {
-	    $feedback = "Topic state updated.";
-	}
-    } elsif ($rc == $Codestriker::STALE_VERSION) {
-	$feedback = "Topic state has been modified by another user.";
-    } elsif ($rc == $Codestriker::INVALID_TOPIC) {
-	$feedback = "Topic no longer exists.";
-    }
-
-    # Direct control to the appropriate action class, depending on the result
-    # of the above operation, and what screens are enabled.
-    $http_input->{feedback} = $feedback;
-    if ($rc == $Codestriker::INVALID_TOPIC || $topic_state eq "Delete") {
-	if ($Codestriker::allow_searchlist) {
-	    # Go to the topic list screen for just open topics.
-	    $http_input->{sstate} = "0";
-	    Codestriker::Action::ListTopics->process($http_input,
-						     $http_response);
-	} else {
-	    # Go to the create topic screen.
-	    Codestriker::Action::CreateTopic->process($http_input,
-						      $http_response);
-        }
-    } else {
-	# Go to the view topic screen.
-	Codestriker::Action::ViewTopic->process($http_input, $http_response);
-    }	
-}
-
-# Change the specified topic to the specified topic state, or delete it if
-# it is "Delete".  If Bugzilla connectivity is set, update the associated bugs.
-# This method is also used by the ChangeTopics action.
-sub change_state($$$$$$) {
-    my ($type, $query, $topic, $topic_state, $version, $email) = @_;
-
-    # Retrieve the appropriate topic details (for the bug_ids).
-    my ($_document_author, $_document_title, $_document_bug_ids,
-	$_document_reviewers, $_document_cc, $_description,
-	$_topic_data, $_document_creation_time, $_document_modified_time,
-	$_topic_state, $_version, $_repository);
-    my $rc = Codestriker::Model::Topic->read($topic, \$_document_author,
-					     \$_document_title,
-					     \$_document_bug_ids,
-					     \$_document_reviewers,
-					     \$_document_cc,
-					     \$_description, \$_topic_data,
-					     \$_document_creation_time,
-					     \$_document_modified_time,
-					     \$_topic_state,
-					     \$_version, \$_repository);
-    
-    return $rc if $rc != $Codestriker::OK;
-
-    # Update the topic's state.
-    if ($topic_state eq "Delete") {
-	$rc = Codestriker::Model::Topic->delete($topic);
-    } else {
-	my $timestamp = Codestriker->get_timestamp(time);
-	$rc = Codestriker::Model::Topic->change_state($topic, $topic_state,
-						      $timestamp, $version);
-    }
-
-    # If Codestriker is linked to a bug database, and this topic is associated
-    # with some bugs, update them with an appropriate message.
-    if ($rc == $Codestriker::OK &&
-	$_document_bug_ids ne "" && $Codestriker::bug_db ne "") {
-	my $bug_db_connection =
-	    Codestriker::BugDB::BugDBConnectionFactory->getBugDBConnection();
-	$bug_db_connection->get_connection();
-	my @ids = split /, /, $_document_bug_ids;
-	my $url_builder = Codestriker::Http::UrlBuilder->new($query);
-	my $topic_url = $url_builder->view_url_extended($topic, -1, "", "",
-							"", $query->url(), 0);
-	my $text = "Codestriker topic: $topic_url\n" .
-	    "State changed to \"$topic_state\" by $email.\n";
-	for (my $i = 0; $i <= $#ids; $i++) {
-	    $bug_db_connection->update_bug($ids[$i], $text);
-	}
-	$bug_db_connection->release_connection();
-    }
-
-    # Indicate the success of this operation to the client.
-    return $rc;
-}
-
-1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/ChangeTopics.pm codestriker/lib/Codestriker/Action/ChangeTopics.pm
--- codestriker-1.7.7/lib/Codestriker/Action/ChangeTopics.pm	Wed Sep  3 07:20:25 2003
+++ codestriker/lib/Codestriker/Action/ChangeTopics.pm	Wed Dec 31 19:00:00 1969
@@ -1,87 +0,0 @@
-###############################################################################
-# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
-# sits@users.sourceforge.net
-#
-# This program is free software; you can redistribute it and modify it under
-# the terms of the GPL.
-
-# Action object for handling the submission of changing multiple topic states.
-
-package Codestriker::Action::ChangeTopics;
-
-use strict;
-
-use Codestriker::Action::ChangeTopicState;
-use Codestriker::Action::ListTopics;
-
-# Attempt to change the topic's state, or to delete it.
-sub process($$$) {
-    my ($type, $http_input, $http_response) = @_;
-
-    my $query = $http_response->get_query();
-
-    # Check that the appropriate fields have been filled in.
-    my $topics_ref = $http_input->get('selected_topics');
-    my @topics = @$topics_ref;
-
-    my $topic_state = $http_input->get('topic_state');
-    my $email = $http_input->get('email');
-
-    # The main topic list page does not allow deletes, so block this out.
-    if ($topic_state eq "Delete") {
-	$http_response->error("This function has been disabled");
-    }
-    
-    # Any feedback messages to the user.
-    my $feedback = "";
-
-    # Indicate if changes were attempted on invalid topics.
-    my $invalid = 0;
-
-    # Indicate if changes were made to stale topics.
-    my $stale = 0;
-
-    # Apply the change to each topic.
-    for (my $i = 0; $i <= $#topics; $i++) {
-	# Extract the topic id and the version.
-	$topics[$i] =~ /^(.*)\,(.*)$/;
-	my $topic = $1;
-	my $version = $2;
-
-	# Change the topic state.
-	my $rc =
-	    Codestriker::Action::ChangeTopicState->change_state($query, $topic,
-								$topic_state,
-								$version,
-								$email);
-
-	# Record if there was a problem in changing the state.
-	$invalid = 1 if $rc == $Codestriker::INVALID_TOPIC;
-	$stale = 1 if $rc == $Codestriker::STALE_VERSION;
-    }
-
-    # These message could be made more helpful in the future, but for now...
-    if ($invalid && $stale) {
-	$feedback = "Some topics could not be updated as they were either " .
-	    "modified by another user, or no longer exist.";
-    } elsif ($invalid) {
-	$feedback = "Some topics could not be updated as they no longer " .
-	    "exist.";
-    } elsif ($stale) {
-	$feedback = "Some topics could not be updated as they have been " .
-	    "modified by another user.";
-    } else {
-	if ($#topics == 0) {
-	    $feedback = "Topic was successfully updated.";
-	} else {
-	    $feedback = "All topics were successfully updated.";
-	}
-    }
-
-    # Direct control to the list topic action class, with the appropriate
-    # feedback message.
-    $http_input->{feedback} = $feedback;
-    Codestriker::Action::ListTopics->process($http_input, $http_response);
-}
-
-1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/CreateProject.pm codestriker/lib/Codestriker/Action/CreateProject.pm
--- codestriker-1.7.7/lib/Codestriker/Action/CreateProject.pm	Mon Aug 18 18:26:26 2003
+++ codestriker/lib/Codestriker/Action/CreateProject.pm	Mon Oct 27 21:18:59 2003
@@ -33,7 +33,6 @@
 
     # Create the hash for the template variables.
     my $vars = {};
-    $vars->{'version'} = $Codestriker::VERSION;
     $vars->{'error_message'} = "";
     $vars->{'project_name'} = $http_input->get('project_name');
     $vars->{'project_description'} = $http_input->get('project_description');
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/CreateTopic.pm codestriker/lib/Codestriker/Action/CreateTopic.pm
--- codestriker-1.7.7/lib/Codestriker/Action/CreateTopic.pm	Mon Sep  8 18:17:42 2003
+++ codestriker/lib/Codestriker/Action/CreateTopic.pm	Mon Oct 27 21:16:54 2003
@@ -26,7 +26,6 @@
 
     # Create the hash for the template variables.
     my $vars = {};
-    $vars->{'version'} = $Codestriker::VERSION;
     $vars->{'error_message'} = "";
     $vars->{'topic_text'} = "";
     $vars->{'topic_file'} = "";
@@ -35,12 +34,6 @@
     $vars->{'bug_ids'} = "";
     $vars->{'feedback'} = $http_input->get('feedback');
     
-    # Indicate if project operations are enabled in the system.
-    $vars->{'projects_enabled'} = $Codestriker::allow_projects;
-
-    # Indicate if bug db integration is enabled.
-    $vars->{'bugdb_enabled'} = ($Codestriker::bug_db ne "") ? 1 : 0;
-
     # Indicate where the documentation directory and generate the search
     # url.
     $vars->{'doc_url'} = $url_builder->doc_url();
@@ -63,9 +56,6 @@
 	$url_builder->list_topics_url("", "", "", "", "", "", "",
 				      "", "", "", [ 0 ], undef);
 
-    # Indicate if the repository field should be displayed.
-    $vars->{'allow_repositories'} = $Codestriker::allow_repositories;
-
     # Set the default repository to select.
     if (! (defined $vars->{'default_repository'}) ||
 	$vars->{'default_repository'} eq "") {
@@ -83,15 +73,6 @@
     # when a topic is created.
     my @projects = Codestriker::Model::Project->list();
     $vars->{'projects'} = \@projects;
-
-    # Display the topic size limit if any.
-    $vars->{'maximum_topic_size_lines'} = $Codestriker::maximum_topic_size_lines eq "" ? 
-                                          0 : 
-                                          $Codestriker::maximum_topic_size_lines;
-                                          
-    $vars->{'suggested_topic_size_lines'} = $Codestriker::suggested_topic_size_lines eq "" ? 
-                                          0 : 
-                                          $Codestriker::suggested_topic_size_lines;
                                           
     my $template = Codestriker::Http::Template->new("createtopic");
     $template->process($vars);
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/DownloadTopic.pm codestriker/lib/Codestriker/Action/DownloadTopic.pm
--- codestriker-1.7.7/lib/Codestriker/Action/DownloadTopic.pm	Mon Sep  1 18:41:38 2003
+++ codestriker/lib/Codestriker/Action/DownloadTopic.pm	Sat Nov 15 22:43:37 2003
@@ -14,42 +14,20 @@
 use Codestriker::Http::Render;
 use Codestriker::Model::Topic;
 
-# Prototypes.
-sub _read_cvs_file( $$$$$ );
-
 # If the input is valid, display the topic.
 sub process($$$) {
     my ($type, $http_input, $http_response) = @_;
 
     # Retrieve the parameters for this action.
     my $query = $http_response->get_query();
-    my $topic = $http_input->get('topic');
-
-    # Retrieve the appropriate topic details.
-    my ($document_author, $document_title, $document_bug_ids,
-	$document_reviewers, $document_cc, $description,
-	$topic_data, $document_creation_time, $document_modified_time,
-	$topic_state, $version, $repository);
-    my $rc = Codestriker::Model::Topic->read($topic, \$document_author,
-					     \$document_title,
-					     \$document_bug_ids,
-					     \$document_reviewers,
-					     \$document_cc,
-					     \$description, \$topic_data,
-					     \$document_creation_time,
-					     \$document_modified_time,
-					     \$topic_state,
-					     \$version, \$repository);
+    my $topicid = $http_input->get('topic');
 
-    if ($rc == $Codestriker::INVALID_TOPIC) {
-	# Topic no longer exists, most likely its been deleted.
-	$http_response->error("Topic no longer exists.");
-    }
+    my $topic = Codestriker::Model::Topic->new($topicid);
 
     # Dump the raw topic data as text/plain.
     print $query->header(-type=>'text/plain',
-			 -attachment=>"topic${topic}.txt");
-    print $topic_data;
+			 -attachment=>"topic${topicid}.txt");
+    print $topic->{document};
 }
 
 1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/EditComment.pm codestriker/lib/Codestriker/Action/EditComment.pm
--- codestriker-1.7.7/lib/Codestriker/Action/EditComment.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/Action/EditComment.pm	Sat Jan  3 22:28:19 2004
@@ -0,0 +1,134 @@
+###############################################################################
+# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
+# sits@users.sourceforge.net
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Action object for adding a comment to a topic line.
+
+package Codestriker::Action::EditComment;
+
+use strict;
+use Codestriker::Model::Topic;
+use Codestriker::Http::Render;
+
+# Create an appropriate form for adding a comment to a topic.
+sub process($$$) {
+    my ($type, $http_input, $http_response) = @_;
+
+    # Obtain a new URL builder object.
+    my $query = $http_response->get_query();
+    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
+
+    # Retrieve the appropriate input fields.
+    my $line = $http_input->get('line');
+    my $fn = $http_input->get('fn');
+    my $new = $http_input->get('new');
+    my $topicid = $http_input->get('topic');
+    my $context = $http_input->get('context');
+    my $email = $http_input->get('email');
+    my $mode = $http_input->get('mode');
+    my $tabwidth = $http_input->get('tabwidth');
+    my $anchor = $http_input->get('a');
+
+    # Retrieve the appropriate topic details.
+    my $topic =  Codestriker::Model::Topic->new($topicid);
+
+    # Retrieve the comment details for this topic.
+    my @comments = $topic->read_comments();
+
+    # Retrieve line-by-line versions of the description.
+    my @document_description = split /\n/, $topic->{description};
+
+    # Retrieve the diff hunk for this file and line number.
+    my $delta = Codestriker::Model::File->get_delta($topicid, $fn, $line, $new);
+
+    # Display the header of this page.
+    $http_response->generate_header($topicid, $topic->{title}, $email, "", "",
+				    $mode, $tabwidth, $topic->{repository}, "", "",
+				    0, 0);
+
+    # Create the hash for the template variables.
+    my $vars = {};
+    $vars->{'topic_title'} = $topic->{title};
+
+    $vars->{'list_url'} =
+	$url_builder->list_topics_url("", "", "", "", "", "", "",
+				      "", "", "", [ 0 ], undef);
+                                          
+
+    Codestriker::Action::ViewTopic::ProcessTopicHeader($vars, $topic, $url_builder);
+
+
+    my $view_topic_url = $url_builder->view_url($topicid, $line, $mode);
+    my $view_comments_url = $url_builder->view_comments_url($topicid);
+    
+    $vars->{'view_topic_url'} = $view_topic_url;
+    $vars->{'view_comments_url'} = $view_comments_url;
+    $vars->{'doc_url'} = $url_builder->doc_url();
+
+    # Retrieve the context in question.  Allow the user to increase it
+    # or decrease it appropriately.
+    my $inc_context = ($context <= 0) ? 1 : $context*2;
+    my $dec_context = ($context <= 0) ? 0 : int($context/2);
+    my $inc_context_url =
+	$url_builder->edit_url($fn, $line, $new, $topicid, $inc_context, "", "");
+    my $dec_context_url =
+	$url_builder->edit_url($fn, $line, $new, $topicid, $dec_context, "", "");
+    $vars->{'inc_context_url'} = $inc_context_url;
+    $vars->{'dec_context_url'} = $dec_context_url;
+
+    $vars->{'context'} = $query->pre(
+	    Codestriker::Http::Render->get_context($line, 
+						   $context, 1,
+						   $delta->{old_linenumber},
+						   $delta->{new_linenumber},
+						   $delta->{text},
+						   $new)) .
+						       $query->p . "\n";
+
+    # Display the comments which have been made for this line number
+    # in chronological order.
+    my @display_comments = ();
+    for (my $i = 0; $i <= $#comments; $i++) {
+	if ($comments[$i]{fileline} == $line &&
+	    $comments[$i]{filenumber} == $fn &&
+	    $comments[$i]{filenew} == $new) {
+	    my $display_comment = {};
+	    my $author = $comments[$i]{author};
+	    $display_comment->{author} = Codestriker->filter_email($author);
+	    $display_comment->{date} = $comments[$i]{date};
+	    $display_comment->{data} =
+		$http_response->escapeHTML($comments[$i]{data});
+	    $display_comment->{line} = "";
+	    $display_comment->{lineurl} = "";
+	    $display_comment->{linename} = "";
+	    $display_comment->{date} = $comments[$i]{date};
+	    $display_comment->{data} =
+		$http_response->escapeHTML($comments[$i]{data});
+	    $display_comment->{line} = "";
+	    $display_comment->{lineurl} = "";
+	    $display_comment->{linename} = "";
+	    push @display_comments, $display_comment;
+	}
+    }
+    $vars->{'comments'} = \@display_comments;
+
+    # Populate the form values.
+    $vars->{'line'} = $line;
+    $vars->{'topic'} = $topicid;
+    $vars->{'mode'} = $mode;
+    $vars->{'anchor'} = $anchor;
+    $vars->{'email'} = $email;
+    $vars->{'fn'} = $fn;
+    $vars->{'new'} = $new;
+
+    # Display the output via the template.
+    my $template = Codestriker::Http::Template->new("editcomment");
+    $template->process($vars);
+
+    $http_response->generate_footer();
+}
+
+1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/EditProject.pm codestriker/lib/Codestriker/Action/EditProject.pm
--- codestriker-1.7.7/lib/Codestriker/Action/EditProject.pm	Mon Aug 18 18:26:27 2003
+++ codestriker/lib/Codestriker/Action/EditProject.pm	Mon Oct 27 21:17:03 2003
@@ -38,7 +38,6 @@
 
     # Construct the template object.
     my $vars = {};
-    $vars->{'version'} = $Codestriker::VERSION;
     $vars->{'feedback'} = $feedback;
     $vars->{'project'} = $project;
     $vars->{'list_projects_url'} = $url_builder->list_projects_url();
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/EditTopic.pm codestriker/lib/Codestriker/Action/EditTopic.pm
--- codestriker-1.7.7/lib/Codestriker/Action/EditTopic.pm	Wed Oct 15 06:45:01 2003
+++ codestriker/lib/Codestriker/Action/EditTopic.pm	Wed Dec 31 19:00:00 1969
@@ -1,162 +0,0 @@
-###############################################################################
-# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
-# sits@users.sourceforge.net
-#
-# This program is free software; you can redistribute it and modify it under
-# the terms of the GPL.
-
-# Action object for adding a comment to a topic line.
-
-package Codestriker::Action::EditTopic;
-
-use strict;
-use Codestriker::Action::SubmitComment;
-use Codestriker::Model::Topic;
-use Codestriker::Http::Render;
-
-# Create an appropriate form for adding a comment to a topic.
-sub process($$$) {
-    my ($type, $http_input, $http_response) = @_;
-
-    # Obtain a new URL builder object.
-    my $query = $http_response->get_query();
-    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
-
-    # Retrieve the appropriate input fields.
-    my $line = $http_input->get('line');
-    my $fn = $http_input->get('fn');
-    my $new = $http_input->get('new');
-    my $topic = $http_input->get('topic');
-    my $context = $http_input->get('context');
-    my $email = $http_input->get('email');
-    my $mode = $http_input->get('mode');
-    my $tabwidth = $http_input->get('tabwidth');
-    my $anchor = $http_input->get('a');
-
-    # Retrieve the appropriate topic details.
-    my ($document_author, $document_title, $document_bug_ids,
-	$document_reviewers, $document_cc, $description,
-	$topic_data, $document_creation_time, $document_modified_time,
-	$topic_state, $version, $repository);
-    my $rc = Codestriker::Model::Topic->read($topic, \$document_author,
-					     \$document_title,
-					     \$document_bug_ids,
-					     \$document_reviewers,
-					     \$document_cc,
-					     \$description, \$topic_data,
-					     \$document_creation_time,
-					     \$document_modified_time,
-					     \$topic_state,
-					     \$version, \$repository);
-
-
-    if ($rc == $Codestriker::INVALID_TOPIC) {
-	# Topic no longer exists, most likely its been deleted.
-	$http_response->error("Topic no longer exists.");
-    }
-
-    # Retrieve the comment details for this topic.
-    my @comments = Codestriker::Model::Comment->read_same_line($topic, $fn, $line, $new);
-
-    # Retrieve line-by-line versions of the description.
-    my @document_description = split /\n/, $description;
-
-    # Retrieve the diff hunk for this file and line number.
-    my $delta = Codestriker::Model::File->get_delta($topic, $fn, $line, $new);
-
-    # Display the header of this page.
-    $http_response->generate_header($topic, $document_title, $email, "", "",
-				    $mode, $tabwidth, $repository, "", "",
-				    0, 0);
-
-    # Create the hash for the template variables.
-    my $vars = {};
-    $vars->{'version'} = $Codestriker::VERSION;
-    $vars->{'topic_title'} = "Edit topic: $document_title";
-    if ($Codestriker::antispam_email) {
-	$document_author = Codestriker->make_antispam_email($document_author);
-	$document_reviewers =
-	    Codestriker->make_antispam_email($document_reviewers);
-	$document_cc = Codestriker->make_antispam_email($document_cc);
-    }
-    $vars->{'author'} = $document_author;
-    $vars->{'reviewers'} = $document_reviewers;
-
-    $vars->{'list_url'} =
-	$url_builder->list_topics_url("", "", "", "", "", "", "",
-				      "", "", "", [ 0 ], undef);
-    
-    if (defined $document_cc && $document_cc ne "") {
-	$vars->{'cc'} = $document_cc;
-    } else {
-	$vars->{'cc'} = "";
-    }
-
-    my $view_topic_url =
-	$url_builder->view_url($topic, $line, $mode,
-			       $Codestriker::default_topic_br_mode);
-
-    my $view_comments_url = $url_builder->view_comments_url($topic);
-    $vars->{'view_topic_url'} = $view_topic_url;
-    $vars->{'view_comments_url'} = $view_comments_url;
-    $vars->{'doc_url'} = $url_builder->doc_url();
-
-    # Retrieve the context in question.  Allow the user to increase it
-    # or decrease it appropriately.
-    my $inc_context = ($context <= 0) ? 1 : $context*2;
-    my $dec_context = ($context <= 0) ? 0 : int($context/2);
-    my $inc_context_url =
-	$url_builder->edit_url($fn, $line, $new, $topic, $inc_context, "", "");
-    my $dec_context_url =
-	$url_builder->edit_url($fn, $line, $new, $topic, $dec_context, "", "");
-    $vars->{'inc_context_url'} = $inc_context_url;
-    $vars->{'dec_context_url'} = $dec_context_url;
-
-    $vars->{'context'} = $query->pre(
-	    Codestriker::Http::Render->get_context($line, 
-						   $context, 1,
-						   $delta->{old_linenumber},
-						   $delta->{new_linenumber},
-						   $delta->{text},
-						   $new)) .
-						       $query->p . "\n";
-
-    # Display the comments which have been made for this line number
-    # in chronological order.
-    my @display_comments = ();
-    for (my $i = 0; $i <= $#comments; $i++) {
-	my $display_comment = {};
-	my $author = $comments[$i]{author};
-	if ($Codestriker::antispam_email) {
-	    $display_comment->{author} =
-		Codestriker->make_antispam_email($author);
-	} else {
-	    $display_comment->{author} = $author;
-	}
-	$display_comment->{date} = $comments[$i]{date};
-	$display_comment->{data} =
-	    $http_response->escapeHTML($comments[$i]{data});
-	$display_comment->{line} = "";
-	$display_comment->{lineurl} = "";
-	$display_comment->{linename} = "";
-	push @display_comments, $display_comment;
-    }
-    $vars->{'comments'} = \@display_comments;
-
-    # Populate the form values.
-    $vars->{'line'} = $line;
-    $vars->{'topicid'} = $topic;
-    $vars->{'mode'} = $mode;
-    $vars->{'anchor'} = $anchor;
-    $vars->{'email'} = $email;
-    $vars->{'fn'} = $fn;
-    $vars->{'new'} = $new;
-
-    # Display the output via the template.
-    my $template = Codestriker::Http::Template->new("edittopic");
-    $template->process($vars);
-
-    $http_response->generate_footer();
-}
-
-1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/ListComments.pm codestriker/lib/Codestriker/Action/ListComments.pm
--- codestriker-1.7.7/lib/Codestriker/Action/ListComments.pm	Wed Oct 15 06:45:01 2003
+++ codestriker/lib/Codestriker/Action/ListComments.pm	Wed Dec 31 19:00:00 1969
@@ -1,173 +0,0 @@
-###############################################################################
-# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
-# sits@users.sourceforge.net
-#
-# This program is free software; you can redistribute it and modify it under
-# the terms of the GPL.
-
-# Action object for displaying a list of comments.
-
-package Codestriker::Action::ListComments;
-
-use strict;
-use Codestriker::Http::Template;
-use Codestriker::Http::Render;
-use Codestriker::Model::Comment;
-use Codestriker::Model::File;
-use HTML::Entities;
-
-# If the input is valid, list the appropriate comments for a topic.
-sub process($$$) {
-    my ($type, $http_input, $http_response) = @_;
-
-    my $query = $http_response->get_query();
-
-    # Check that the appropriate fields have been filled in.
-    my $topic = $http_input->get('topic');
-    my $email = $http_input->get('email');
-    my $mode = $http_input->get('mode');
-    my $feedback = $http_input->get('feedback');
-    my $show_context = $http_input->get('scontext');
-    my $show_comments_from_user = $http_input->get('sauthor');
-    my $show_comments_by_state  = $http_input->get('sstate');
-    
-    # Perform some error checking here on the parameters.
-
-    # Retrieve the comment details for this topic.
-    my @comments = Codestriker::Model::Comment->read_filtered($topic,
-    	$show_comments_by_state,
-	$show_comments_from_user);
-
-    # Display the data, with each topic title linked to the view topic screen.
-    $http_response->generate_header($topic, "Comment list", $email, "", "", "",
-				    "", "", "", "", 0, 0);
-
-    # Create the hash for the template variables.
-    my $vars = {};
-    $vars->{'version'} = $Codestriker::VERSION;
-    $vars->{'feedback'} = $feedback;
-
-    # Obtain a new URL builder object.
-    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
-
-    # Construct the view topic URL.
-    my $view_url = $url_builder->view_url($topic, -1, $mode,
-					  $Codestriker::default_topic_br_mode);
-    $vars->{'view_topic_url'} = $view_url;
-
-    # Construct the view comments URL.
-    my $view_comments_url = $url_builder->view_comments_url($topic);
-    $vars->{'view_comments_url'} = $view_comments_url;
-
-    # Indicate where the documentation directory is.
-    $vars->{'doc_url'} = $url_builder->doc_url();
-
-    $vars->{'list_url'} =
-	$url_builder->list_topics_url("", "", "", "", "", "", "",
-				      "", "", "", [ 0 ], undef);
-				      
-    my @usersThatHaveComments = Codestriker::Model::Comment->read_authors( $topic );
-    
-    # Filter the email address out, in the object.
-    if ( $Codestriker::antispam_email ) {
-    	foreach my $comment (@comments) {
-    	    $comment->{author} = Codestriker->make_antispam_email( $comment->{author} );
-        }
-        
-        @usersThatHaveComments = map 
-        	{ Codestriker->make_antispam_email($_) } 
-                @usersThatHaveComments;        
-    }     
-                                         
-    # Go through all the comments and make them into an appropriate form for
-    # displaying.
-    my $last_filenumber = -1;
-    my $last_fileline = -1;
-    my $index = 0;
-    for (my $i = 0; $i <= $#comments; $i++) {
-	my $comment = $comments[$i];
-
-	if ($comment->{fileline} != $last_fileline ||
-	    $comment->{filenumber} != $last_filenumber) {
-	    my $new_file =
-		$url_builder->view_file_url($topic, $comment->{filenumber},
-					    $comment->{filenew},
-					    $comment->{fileline}, $mode, 0);
-					    
-	    $comment->{view_file} =
-		"javascript: myOpen('$new_file','CVS')";
-	    my $parallel = 
-		$url_builder->view_file_url($topic, $comment->{filenumber},
-					    $comment->{filenew},
-					    $comment->{fileline}, $mode, 1);
-	    $comment->{view_parallel} =
-		"javascript: myOpen('$parallel','CVS')";
-	    $comment->{edit_url} =
-		"javascript: eo('" . $comment->{filenumber} . "','" .
-		$comment->{fileline} . "','" . $comment->{filenew} . "')";
-	    $comment->{anchor} = $comment->{filenumber} . "|" .
-		$comment->{fileline} . "|" . $comment->{filenew};
-	    $last_fileline = $comment->{fileline};
-	    $last_filenumber = $comment->{filenumber};
-	}
-
-	my $state = $comment->{state};
-	$comment->{state} = $Codestriker::comment_states[$state];
-
-	# Make sure the comment data is HTML escaped.
-	$comment->{data} = HTML::Entities::encode($comment->{data});
-        
-        if ($show_context ne "" && $show_context > 0) {
-                my $delta = Codestriker::Model::File->get_delta($topic, 
-                                $comment->{filenumber}, 
-                                $comment->{fileline} , 
-                                $comment->{filenew});
-
-                $comment->{context} = Codestriker::Http::Render->get_context(
-                                                $comment->{fileline} , 
-                                                $show_context, 1,
-                                                $delta->{old_linenumber},
-                                                $delta->{new_linenumber},
-                                                $delta->{text}, 
-                                                $comment->{filenew});
-       }
-    }
-
-    # Indicate what states the comments can be transferred to.
-    my @states = ();
-    for (my $i = 0; $i <= $#Codestriker::comment_states; $i++) {
-	my $state = $Codestriker::comment_states[$i];
-	if ($state ne "Draft" && $state ne "Deleted") {
-	    push @states, $state;
-	}
-    }
-
-    # Store the parameters to the template.
-    $vars->{'topic'} = $topic;
-    $vars->{'email'} = $email;
-    $vars->{'comments'} = \@comments;
-    $vars->{'states'} = \@states;
-    
-    $vars->{'users'} = \@usersThatHaveComments;
-    
-    # Push in the current filter combo box selections so the window remembers
-    # what the user has currently set.
-    $vars->{'scontext'} = $show_context;    
-    if ( $show_comments_by_state ne '') {
-    	$vars->{'select_sstate'} = $show_comments_by_state + 1;
-    }
-    else {
-    	$vars->{'select_sstate'} = 0;
-    }
- 
-    $vars->{'sstate'} = $show_comments_by_state;     
-    $vars->{'sauthor'} = $http_input->get('sauthor');
-
-    # Send the data to the template for rendering.
-    my $template = Codestriker::Http::Template->new("displaycomments");
-    $template->process($vars);
-
-    $http_response->generate_footer();
-}
-
-1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/ListProjects.pm codestriker/lib/Codestriker/Action/ListProjects.pm
--- codestriker-1.7.7/lib/Codestriker/Action/ListProjects.pm	Mon Aug 18 18:26:27 2003
+++ codestriker/lib/Codestriker/Action/ListProjects.pm	Tue Oct 28 20:53:15 2003
@@ -34,7 +34,6 @@
 
     # Create the hash for the template variables.
     my $vars = {};
-    $vars->{'version'} = $Codestriker::VERSION;
     $vars->{'feedback'} = $feedback;
 
     # Obtain a new URL builder object.
@@ -46,11 +45,7 @@
     }
     $vars->{'projects'} = \@projects;
 
-    # Store all of the URL objects.
     $vars->{'create_project_url'} = $url_builder->create_project_url();
-    $vars->{'create_topic_url'} = $url_builder->create_topic_url();
-    $vars->{'search_url'} = $url_builder->search_url();
-    $vars->{'doc_url'} = $url_builder->doc_url();
 
     $vars->{'list_url'} =
 	$url_builder->list_topics_url("", "", "", "", "", "", "",
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/ListTopics.pm codestriker/lib/Codestriker/Action/ListTopics.pm
--- codestriker-1.7.7/lib/Codestriker/Action/ListTopics.pm	Wed Oct 15 06:45:01 2003
+++ codestriker/lib/Codestriker/Action/ListTopics.pm	Sat Jan  3 21:14:34 2004
@@ -84,19 +84,12 @@
 
     # Create the hash for the template variables.
     my $vars = {};
-    $vars->{'version'} = $Codestriker::VERSION;
     $vars->{'feedback'} = $feedback;
 
     $vars->{'list_url'} =
 	$url_builder->list_topics_url("", "", "", "", "", "", "",
 				      "", "", "", [ 0 ], undef);
 
-    # Indicate if bug db integration is enabled.
-    $vars->{'bugdb_enabled'} = ($Codestriker::bug_db ne "") ? 1 : 0;
-
-    # Indicate if project operations are enabled in the system.
-    $vars->{'projects_enabled'} = $Codestriker::allow_projects;
-
     # Store the search parameters, which become hidden fields.
     $vars->{'sauthor'} = $sauthor;
     $vars->{'sreviewer'} = $sreviewer;
@@ -110,12 +103,6 @@
     $vars->{'sbody'} = $sbody;
     $vars->{'sfilename'} = $sfilename;
 
-    # Display the "Create a new topic", "List Projects" and "Search" links.
-    $vars->{'create_topic_url'} = $url_builder->create_topic_url();
-    $vars->{'list_projects_url'} = $url_builder->list_projects_url();
-    $vars->{'search_url'} = $url_builder->search_url();
-    $vars->{'doc_url'} = $url_builder->doc_url();
-
     # The list of topics.
     my @topics;
 
@@ -189,6 +176,10 @@
     $vars->{'topics'} = \@topics;
     $vars->{'states'} = \@Codestriker::topic_states;
 
+    $vars->{'list_projects_url'} = $url_builder->list_projects_url();
+
+    $vars->{'view_metrics_url'} = $url_builder->metric_report_url();
+
     # Record the search parameters.
 
     my $template = Codestriker::Http::Template->new("listtopics");
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/MetricsReport.pm codestriker/lib/Codestriker/Action/MetricsReport.pm
--- codestriker-1.7.7/lib/Codestriker/Action/MetricsReport.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/Action/MetricsReport.pm	Sat Jan  3 23:05:02 2004
@@ -0,0 +1,76 @@
+###############################################################################
+# Codestriker: Copyright (c) 2003 Jason Remillard.  All rights reserved.
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Action object for displaying a list of topics.
+
+package Codestriker::Action::MetricsReport;
+
+use strict;
+use Codestriker::Http::Template;
+use Codestriker::Model::Topic;
+use Codestriker::Model::MetricStats;
+
+# If the input is valid, list the appropriate topics.
+
+sub process($$$) {
+    my ($type, $http_input, $http_response) = @_;
+
+    $http_response->generate_header("", "", "", "", "", "", "", "",
+				    "", "", 0, 0);
+
+    my $query = $http_response->get_query();
+
+    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
+
+    my $vars = {};
+
+    my @users_metrics = Codestriker::Model::MetricStats::get_basic_user_metrics();
+
+    # anti-spam the email addresses.
+    foreach my $user (@users_metrics) {
+	$user->{name} = Codestriker->filter_email($user->{name});
+    }
+
+    $vars->{user_metrics} = \@users_metrics;
+
+    # comment metrics
+    my @comment_metrics = Codestriker::Model::MetricStats::get_comment_metrics();
+    $vars->{comment_metrics} = \@comment_metrics;
+    $vars->{comment_metrics_month_names} = $comment_metrics[0]->{monthnames};
+
+    # topic metrics
+    my @topic_metrics = Codestriker::Model::MetricStats::get_topic_metrics();
+    $vars->{topic_metrics} = \@topic_metrics;
+    $vars->{topic_metrics_month_names} = $topic_metrics[0]->{monthnames};
+
+    $vars->{download_url} = $url_builder->metric_report_download_raw_data();
+
+    my $template = Codestriker::Http::Template->new("metricsreport");
+    $template->process($vars);
+
+    $http_response->generate_footer();
+}
+
+sub process_download($$$) {
+    my ($type, $http_input, $http_response) = @_;
+
+    print "Content-Type: text/plain\n\n";
+
+    my $columns = Codestriker::Model::MetricStats::get_download_headers();
+
+    print join "\t", @{$columns->{base}},@{$columns->{state}}, @{$columns->{topic}}, @{$columns->{user}};
+    print "\n";
+
+    my @topicids = Codestriker::Model::MetricStats::get_topic_ids();
+
+    foreach my $id (@topicids) {
+	my @line = Codestriker::Model::MetricStats::get_raw_metric_data($id->[0], $columns);
+	print join "\t",@line;
+	print  "\n";
+    }
+}
+
+1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/Search.pm codestriker/lib/Codestriker/Action/Search.pm
--- codestriker-1.7.7/lib/Codestriker/Action/Search.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/Action/Search.pm	Sat Nov 15 21:25:09 2003
@@ -0,0 +1,63 @@
+###############################################################################
+# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
+# sits@users.sourceforge.net
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Action object for displaying the topic search page.
+
+package Codestriker::Action::Search;
+
+use strict;
+use Codestriker::Model::Project;
+
+# Create an appropriate form for topic searching.
+sub process($$$) {
+    my ($type, $http_input, $http_response) = @_;
+
+    my $query = $http_response->get_query();
+
+    # Check if this action is allowed.
+    if ($Codestriker::allow_searchlist == 0) {
+	$http_response->error("This function has been disabled");
+    }
+
+    $http_response->generate_header("", "Search", "", "", "", "", "", "", "",
+				    "", 0, 1);
+
+    # Obtain a URL builder object.
+    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
+
+    # Create the hash for the template variables.
+    my $vars = {};
+
+    $vars->{'list_url'} =
+	$url_builder->list_topics_url("", "", "", "", "", "", "",
+				      "", "", "", [ 0 ], undef);
+ 
+    # Create the list of valid states that can be searched over.
+    my @states = ("Any");
+    push @states, @Codestriker::topic_states;
+    $vars->{'states'} = \@states;
+
+    # Get the list of valid topics in the system that can be searched over.
+    my @projects_db = Codestriker::Model::Project->list();
+    my @projects = ();
+    my $any_project = {};
+    $any_project->{id} = -1;
+    $any_project->{name} = "Any";
+    push @projects, $any_project;
+
+    foreach my $project (@projects_db) {
+	push @projects, $project;
+    }
+    $vars->{'projects'} = \@projects;
+
+    my $template = Codestriker::Http::Template->new("search");
+    $template->process($vars);
+
+    $http_response->generate_footer();
+}
+
+1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/SubmitComment.pm codestriker/lib/Codestriker/Action/SubmitComment.pm
--- codestriker-1.7.7/lib/Codestriker/Action/SubmitComment.pm	Wed Oct 15 06:45:01 2003
+++ codestriker/lib/Codestriker/Action/SubmitComment.pm	Wed Dec 31 19:00:00 1969
@@ -1,315 +0,0 @@
-###############################################################################
-# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
-# sits@users.sourceforge.net
-#
-# This program is free software; you can redistribute it and modify it under
-# the terms of the GPL.
-
-# Action object for handling the submission of a new comment.
-
-package Codestriker::Action::SubmitComment;
-
-use strict;
-
-use Codestriker::Model::Comment;
-use Codestriker::Model::File;
-use Codestriker::Smtp::SendEmail;
-use Codestriker::Model::Topic;
-use Codestriker::Http::Render;
-
-# If the input is valid, create the appropriate topic into the database.
-sub process($$$) {
-    my ($type, $http_input, $http_response) = @_;
-
-    # Obtain a new URL builder object.
-    my $query = $http_response->get_query();
-    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
-
-    # Check that the appropriate fields have been filled in.
-    my $topic = $http_input->get('topic');
-    my $line = $http_input->get('line');
-    my $fn = $http_input->get('fn');
-    my $new = $http_input->get('new');
-    my $comments = $http_input->get('comments');
-    my $email = $http_input->get('email');
-    my $cc = $http_input->get('comment_cc');
-    my $mode = $http_input->get('mode');
-    my $anchor = $http_input->get('a');
-    
-    # Check that the fields have been filled appropriately.
-    if ($comments eq "" || !defined $comments) {
-	$http_response->error("No comments were entered");
-    }
-    if ($email eq "" || !defined $email) {
-	$http_response->error("No email address was entered");
-    }
-
-    # Create the comment in the database.
-    my $timestamp = Codestriker->get_timestamp(time);
-    Codestriker::Model::Comment->create($topic, $line, $fn, $new,
-					$email, $comments, $timestamp,
-					$Codestriker::COMMENT_SUBMITTED);
-
-    # Send an email to the document author and all contributors with the
-    # relevant information.  The person who wrote the comment is indicated
-    # in the "From" field, and is BCCed the email so they retain a copy.
-    my $edit_url = $url_builder->edit_url($fn, $line, $new,
-					  $topic, "", "", $query->url());
-    my $view_topic_url =
-	$url_builder->view_url($topic, $line, $mode,
-			       $Codestriker::default_topic_br_mode);
-    my $view_comments_url = $url_builder->view_comments_url($topic);
-
-    # Retrieve the appropriate topic details.
-    my ($document_author, $document_title, $document_bug_ids,
-	$document_reviewers, $document_cc, $description,
-	$topic_data, $document_creation_time, $document_modified_time,
-	$topic_state, $version, $repository);
-    my $rc = Codestriker::Model::Topic->read($topic, \$document_author,
-					     \$document_title,
-					     \$document_bug_ids,
-					     \$document_reviewers,
-					     \$document_cc,
-					     \$description, \$topic_data,
-					     \$document_creation_time,
-					     \$document_modified_time,
-					     \$topic_state,
-					     \$version, \$repository);
-
-    if ($rc == $Codestriker::INVALID_TOPIC) {
-	# Topic no longer exists, most likely its been deleted.
-	$http_response->error("Topic no longer exists.");
-    }
-
-    # Retrieve the diff hunk for this file and line number.
-    my $delta = Codestriker::Model::File->get_delta($topic, $fn, $line, $new);
-
-    # Retrieve the comment details for this topic.
-    my @comments = Codestriker::Model::Comment->read_same_line($topic, $fn, $line, $new);
-                                                                                                          
-    my %contributors = ();
-    $contributors{$email} = 1;
-    my $cc_recipients = "";
-    for (my $i = 0; $i <= $#comments; $i++) {
-	if ($comments[$i]{author} ne $document_author &&
-	    ! exists $contributors{$comments[$i]{author}}) {
-	    $contributors{$comments[$i]{author}} = 1;
-	    $cc_recipients .= "$comments[$i]{author}, ";
-	}
-    }
-    
-    # Remove the last space and comma character.
-    if ($cc_recipients ne "") {
-	substr($cc_recipients, -2) = "";
-    }
-
-    # Add the $cc recipients if any were specified.
-    if ($cc ne "")
-    {
-	if ($cc_recipients ne "")
-	{
-	    $cc_recipients .= ", " .
-		Codestriker::Http::Input->make_canonical_email_list($cc);
-	}
-	else
-	{
-	    $cc_recipients =
-		Codestriker::Http::Input->make_canonical_email_list($cc);
-	}
-    }
-
-    my $from = $email;
-    my $to = $document_author;
-    my $bcc = $email;
-    my $subject = "[REVIEW] Topic \"$document_title\" comment added by $email";
-    my $body =
-	"$email added a comment to Topic \"$document_title\".\n\n" .
-	"URL: $edit_url\n\n";
-
-    $body .= "File: " . $delta->{filename} . " line $line.\n\n";
-
-    $body .= "Context:\n";
-    $body .= "$Codestriker::Smtp::SendEmail::EMAIL_HR\n\n";
-    my $email_context = $Codestriker::EMAIL_CONTEXT;
-    $body .= Codestriker::Http::Render->get_context($line, 
-						    $email_context, 0,
-						    $delta->{old_linenumber},
-						    $delta->{new_linenumber},
-						    $delta->{text}, $new)
-	. "\n";
-    $body .= "$Codestriker::Smtp::SendEmail::EMAIL_HR\n\n";    
-    
-    # Now display the comments that have already been submitted.
-    for (my $i = $#comments; $i >= 0; $i--) {
-	if ($comments[$i]{fileline} == $line &&
-	    $comments[$i]{filenumber} == $fn &&
-	    $comments[$i]{filenew} == $new) {
-	    my $data = $comments[$i]{data};
-
-	    $body .= "$comments[$i]{author} $comments[$i]{date}\n\n$data\n\n";
-	    $body .= "$Codestriker::Smtp::SendEmail::EMAIL_HR\n\n";    
-	}
-    }
-
-    # Send the email notification out, if it is allowed in the config file,
-    # or if something has been entered in the cc field.
-    if ( $Codestriker::allow_comment_email || $cc ne "")
-    {
-	if (!Codestriker::Smtp::SendEmail->doit(0, $topic, $from, $to,
-						$cc_recipients, $bcc,
-						$subject, $body)) {
-	    $http_response->error("Failed to send topic creation email");
-        }
-    }
-
-    # Display a simple screen indicating that the comment has been registered.
-    # Clicking the Close button simply dismisses the edit popup.  Leaving it
-    # up will ensure the next editing topic will be handled quickly, as the
-    # overhead of bringing up a new window is removed.
-    my $reload = $query->param('submit') eq 'Submit+Refresh' ? 1 : 0;
-    $http_response->generate_header($topic, "Comment submitted", $email, "",
-				    "", "", "", $repository, "", $anchor,
-				    $reload, 0);
-
-    my $vars = {};
-    $vars->{'version'} = $Codestriker::VERSION;
-    $vars->{'view_topic_url'} = $view_topic_url;
-    $vars->{'view_comments_url'} = $view_comments_url;
-    $vars->{'comment'} = $comments;
-
-    $vars->{'list_url'} =
-	$url_builder->list_topics_url("", "", "", "", "", "", "",
-				      "", "", "", [ 0 ], undef);
-
-    my $template = Codestriker::Http::Template->new("submitcomment");
-    $template->process($vars);
-
-    $http_response->generate_footer();
-}
-
-# Given a topic and topic line number, try to determine the line
-# number of the new file it corresponds to.  For topic lines which
-# were made against '+' lines or unchanged lines, this will give an
-# accurate result.  For other situations, the number returned will be
-# approximate.  The results are returned in $filename_ref,
-# $linenumber_ref and $accurate_ref references.  This is a deprecated method
-# which is only used for data migration purposes (within checksetup.pl and
-# import.pl).
-sub _get_file_linenumber ($$$$$$$$)
-{
-    my ($type, $topic, $topic_linenumber, $filenumber_ref,
-	$filename_ref, $linenumber_ref, $accurate_ref, $new_ref) = @_;
-
-    # Find the appropriate file that $topic_linenumber refers to.
-    my (@filename, @revision, @offset, @binary);
-    Codestriker::Model::File->get_filetable($topic, \@filename, \@revision,
-					    \@offset, \@binary);
-    # No filetable.
-    return 0 if ($#filename == -1);
-
-    my $diff_limit = -1;
-    my $index;
-    for ($index = 0; $index <= $#filename; $index++) {
-	last if ($offset[$index] > $topic_linenumber);
-    }
-
-    # Check if the comment was made against a diff header.
-    if ($index <= $#offset) {
-	my $diff_header_size;
-	if ($revision[$index] eq $Codestriker::ADDED_REVISION ||
-	    $revision[$index] eq $Codestriker::REMOVED_REVISION) {
-	    # Added or removed file.
-	    $diff_header_size = 6;
-	}
-	elsif ($revision[$index] eq $Codestriker::PATCH_REVISION) {
-	    # Patch file
-	    $diff_header_size = 3;
-	}
-	else {
-	    # Normal CVS diff header.
-	    $diff_header_size = 7;
-	}
-
-	if ( ($topic_linenumber >=
-	      $offset[$index] - $diff_header_size) &&
-	     ($topic_linenumber <= $offset[$index]) ) {
-	    $$filenumber_ref = $index;
-	    $$filename_ref = $filename[$index];
-	    $$linenumber_ref = 1;
-	    $$accurate_ref = 0;
-	    $$new_ref = 0;
-	    return 1;
-	}
-    }
-    $index--;
-
-    # Couldn't find a matching linenumber.
-    if ($index < 0 || $index > $#filename) {
-	$$filenumber_ref = -1;
-	$$filename_ref = "";
-	return 1;
-    }
-
-    # Retrieve the diff text corresponding to this file.
-    my ($tmp_offset, $tmp_revision, $diff_text);
-    Codestriker::Model::File->get($topic, $index, \$tmp_offset,
-				  \$tmp_revision, \$diff_text);
-
-    # Go through the patch file until we reach the topic linenumber of
-    # interest.
-    my $new = 0;
-    my $accurate_line = 0;
-    my $oldfile_linenumber = 0;
-    my $newfile_linenumber = 0;
-    my $current_topic_linenumber;
-    my @lines = split /\n/, $diff_text;
-    for (my $i = 0, $current_topic_linenumber = $offset[$index];
-	 $i <= $#lines && $current_topic_linenumber <= $topic_linenumber;
-	 $i++, $current_topic_linenumber++) {
-	$_ = $lines[$i];
-	if (/^\@\@ \-(\d+),\d+ \+(\d+),\d+ \@\@.*$/o) {
-	    # Matching diff header, record what the current linenumber is now
-	    # in the new file.
-	    $oldfile_linenumber = $1 - 1;
-	    $newfile_linenumber = $2 - 1;
-	    $accurate_line = 0;
-	    $new = 0;
-	}
-	elsif (/^\s.*$/o) {
-	    # A line with no change.
-	    $oldfile_linenumber++;
-	    $newfile_linenumber++;
-	    $accurate_line = 1;
-	    $new = 1;
-	}
-	elsif (/^\+.*$/o) {
-	    # A line corresponding to the new file.
-	    $newfile_linenumber++;
-	    $accurate_line = 1;
-	    $new = 1;
-	}
-	elsif (/^\-.*$/o) {
-	    # A line corresponding to the old file.
-	    $oldfile_linenumber++;
-	    $accurate_line = 0;
-	    $new = 0;
-	}
-    }
-
-    if ($current_topic_linenumber >= $topic_linenumber) {
-	# The topic linenumber was found.
-	$$filenumber_ref = $index;
-	$$filename_ref = $filename[$index];
-	$$linenumber_ref = $new ? $newfile_linenumber : $oldfile_linenumber;
-	$$accurate_ref = $accurate_line;
-	$$new_ref = $new;
-    }
-    else {
-	# The topic linenumber was not found.
-	$$filenumber_ref = -1;
-	$$filename_ref = "";
-    }
-    return 1;
-}
-
-1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/SubmitEditCommentsState.pm codestriker/lib/Codestriker/Action/SubmitEditCommentsState.pm
--- codestriker-1.7.7/lib/Codestriker/Action/SubmitEditCommentsState.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/Action/SubmitEditCommentsState.pm	Sat Jan  3 23:05:23 2004
@@ -0,0 +1,102 @@
+###############################################################################
+# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
+# sits@users.sourceforge.net
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Action object for the submission of changing multiple comment states.
+
+package Codestriker::Action::SubmitEditCommentsState;
+
+use strict;
+use warnings;
+
+use Codestriker::Action::ViewTopicComments;
+use Codestriker::TopicListeners::Manager;
+
+# Attempt to change the comment states.
+sub process($$$) {
+    my ($type, $http_input, $http_response) = @_;
+
+    my $query = $http_response->get_query();
+    
+    # Extract the values from the action.
+    my $comments_ref = $http_input->get('selected_comments');
+    my @comments = @$comments_ref;
+    my $comment_state = $http_input->get('comment_state');
+    my $topicid = $http_input->get('topic');
+    
+    if ( Codestriker::Model::Topic::exists($topicid) == 0) {    
+	# Topic no longer exists, most likely its been deleted.
+	$http_response->error("Topic no longer exists.");
+        return;
+    }
+    
+    my $topic = Codestriker::Model::Topic->new($topicid);
+    
+    # Any feedback messages to the user.
+    my $feedback = "";
+    
+    # Indicate if changes were made to stale comments.
+    my $stale = 0;
+    
+    # Get the state number (index) for the new state name.
+    my $state_id = Codestriker::Model::Comment::convert_state_to_stateid($comment_state);
+
+    my @topic_comments = $topic->read_comments();
+    
+    # Apply the change to each topic.
+    if ($state_id != -1) {
+	for (my $i = 0; $i <= $#comments; $i++) {
+	    # Extract the line number and version of the comment that is being
+	    # changed.
+	    $comments[$i] =~ /^(.*)\,(.*)\,(.*)\,(.*)$/;
+	    my $filenumber = $1;
+	    my $fileline = $2;
+	    my $filenew = $3;
+	    my $version = $4;
+            
+            # Look for the comment comming from the CGI params, and update the
+            # objects.
+            foreach my $topic_comment (@topic_comments) {
+            	if ( $topic_comment->{filenumber} == $filenumber && 
+                     $topic_comment->{fileline} == $fileline && 
+                     $topic_comment->{filenew} == $filenew) {
+                    
+                    Codestriker::TopicListeners::Manager::comment_state_change( 
+                    	$topic,
+                        $topic_comment,
+                        $comment_state);
+                        
+		    # Change the comment state.
+                    my $rc = $topic_comment->change_state($state_id, $version);
+                        	    
+                    # Record if there was a problem in changing the state.
+                    $stale = 1 if $rc == $Codestriker::STALE_VERSION;
+      		}
+            }
+	}
+    }
+
+    # These message could be made more helpful in the future, but for now...
+    if ($stale) {
+	$feedback = "Some comments could not be updated as they have been " .
+	    "modified by another user.";
+    } elsif ($state_id == -1) {
+	$feedback = "Invalid comment state: \"$comment_state\".";
+    } else {
+	if ($#comments == 0) {
+	    $feedback = "Comment was successfully updated.";
+	} else {
+	    $feedback = "All comments were successfully updated.";
+	}
+    }
+
+    # Direct control to the list comment action class, with the appropriate
+    # feedback message.
+    $http_input->{feedback} = $feedback;
+    Codestriker::Action::ViewTopicComments->process($http_input, $http_response);
+}
+
+1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/SubmitEditTopic.pm codestriker/lib/Codestriker/Action/SubmitEditTopic.pm
--- codestriker-1.7.7/lib/Codestriker/Action/SubmitEditTopic.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/Action/SubmitEditTopic.pm	Sat Jan  3 23:05:31 2004
@@ -0,0 +1,112 @@
+###############################################################################
+# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
+# sits@users.sourceforge.net
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Action object for handling the submission of changing a topic's state,
+# metrics, and reviewer list.
+
+package Codestriker::Action::SubmitEditTopic;
+
+use strict;
+
+use Codestriker::Model::Topic;
+use Codestriker::Action::ListTopics;
+
+# Attempt to change the topic's state, or to delete it.
+sub process($$$) {
+    my ($type, $http_input, $http_response) = @_;
+
+    my $query = $http_response->get_query();
+
+    # Check that the appropriate fields have been filled in.
+    my $topicid = $http_input->get('topic');
+    my $mode = $http_input->get('mode');
+    my $version = $http_input->get('version');
+    my $topic_state = $http_input->get('topic_state');
+    my $email = $http_input->get('email');
+
+    # Check if this action is allowed.
+    if ($Codestriker::allow_delete == 0 && $topic_state eq "Delete") {
+	$http_response->error("This function has been disabled");
+    }
+
+    my $topic = Codestriker::Model::Topic->new($topicid);    
+    my $metrics = $topic->get_metrics();
+
+    my $feedback;
+
+    my @topic_metric = @{$http_input->get('topic_metric')};
+
+    $feedback .= $metrics->verify_topic_metrics(@topic_metric);
+
+    $metrics->set_topic_metrics(@topic_metric);
+
+    $metrics->set_user_metric($topic->{author}, @{$http_input->{author_metric}});
+
+    my @reviewer_list = split /, /, $topic->{reviewers};
+    # Remove the author from the list just in case somebody put themselves in twice.
+    @reviewer_list = grep { $_ ne $topic->{author} } @reviewer_list;
+
+    for( my $userindex = 0; $userindex < scalar(@reviewer_list); ++$userindex)
+    {
+	my @usermetrics = @{$http_input->{"reviewer_metric, $userindex"}};
+
+	$feedback .= $metrics->verify_user_metrics($reviewer_list[$userindex], @usermetrics);
+	$metrics->set_user_metric($reviewer_list[$userindex], @usermetrics);
+    }
+    
+    my @author_metrics = @{$http_input->get('author_metric')};
+    $feedback .= $metrics->verify_user_metrics($topic->{author} , @author_metrics);
+    $metrics->set_user_metric($topic->{author} , @author_metrics);
+    
+    $metrics->store();
+
+    # Retrieve the appropriate topic details (for the bug_ids).
+    # Update the topic's state.
+    if ($topic_state eq "Delete") {
+	Codestriker::TopicListeners::Manager::topic_delete($topic);
+	$topic->delete();
+	$feedback = "Topic has been deleted.";
+    } else {
+	if ($topic->check_for_stale($version))
+	{
+	    $feedback .= "Topic state has been modified by another user.";
+	}
+	else
+	{
+	    if ($feedback eq '')
+	    {
+		$feedback = "Topic state updated.";
+	    }
+	}
+
+	Codestriker::TopicListeners::Manager::topic_state_change($topic, $topic_state);
+	$topic->change_state($topic_state, $version);
+    }
+
+    my $rc = 0;
+
+    # Direct control to the appropriate action class, depending on the result
+    # of the above operation, and what screens are enabled.
+    $http_input->{feedback} = $feedback;
+    if ($rc == $Codestriker::INVALID_TOPIC || $topic_state eq "Delete") {
+	if ($Codestriker::allow_searchlist) {
+	    # Go to the topic list screen for just open topics.
+	    $http_input->{sstate} = "0";
+	    Codestriker::Action::ListTopics->process($http_input,
+						     $http_response);
+	} else {
+	    # Go to the create topic screen.
+	    Codestriker::Action::CreateTopic->process($http_input,
+						      $http_response);
+        }
+    } else {
+	# Go to the view topic screen.
+	Codestriker::Action::ViewTopicInfo->process($http_input, $http_response);
+    }	
+}
+
+1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/SubmitEditTopicsState.pm codestriker/lib/Codestriker/Action/SubmitEditTopicsState.pm
--- codestriker-1.7.7/lib/Codestriker/Action/SubmitEditTopicsState.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/Action/SubmitEditTopicsState.pm	Sat Jan  3 22:27:28 2004
@@ -0,0 +1,84 @@
+###############################################################################
+# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
+# sits@users.sourceforge.net
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Action object for handling the submission of changing multiple topic states.
+
+package Codestriker::Action::SubmitEditTopicsState;
+
+use strict;
+
+use Codestriker::Action::ListTopics;
+
+# Attempt to change the topic's state, or to delete it.
+sub process($$$) {
+    my ($type, $http_input, $http_response) = @_;
+
+    my $query = $http_response->get_query();
+
+    # Check that the appropriate fields have been filled in.
+    my $topics_ref = $http_input->get('selected_topics');
+    my @topics = @$topics_ref;
+
+    my $topic_state = $http_input->get('topic_state');
+    my $email = $http_input->get('email');
+
+    # The main topic list page does not allow deletes, so block this out.
+    if ($topic_state eq "Delete") {
+	$http_response->error("This function has been disabled");
+    }
+    
+    # Any feedback messages to the user.
+    my $feedback = "";
+
+    # Indicate if changes were attempted on invalid topics.
+    my $invalid = 0;
+
+    # Indicate if changes were made to stale topics.
+    my $stale = 0;
+
+    # Apply the change to each topic.
+    for (my $i = 0; $i <= $#topics; $i++) {
+	# Extract the topic id and the version.
+	$topics[$i] =~ /^(.*)\,(.*)$/;
+	my $topicid = $1;
+	my $version = $2;
+
+	my $topic = Codestriker::Model::Topic->new($topicid);    
+
+	# Change the topic state.
+	my $rc = $topic->change_state($topic_state, $version);
+
+	# Record if there was a problem in changing the state.
+	$invalid = 1 if $rc == $Codestriker::INVALID_TOPIC;
+	$stale = 1 if $rc == $Codestriker::STALE_VERSION;
+    }
+
+    # These message could be made more helpful in the future, but for now...
+    if ($invalid && $stale) {
+	$feedback = "Some topics could not be updated as they were either " .
+	    "modified by another user, or no longer exist.";
+    } elsif ($invalid) {
+	$feedback = "Some topics could not be updated as they no longer " .
+	    "exist.";
+    } elsif ($stale) {
+	$feedback = "Some topics could not be updated as they have been " .
+	    "modified by another user.";
+    } else {
+	if ($#topics == 0) {
+	    $feedback = "Topic was successfully updated.";
+	} else {
+	    $feedback = "All topics were successfully updated.";
+	}
+    }
+
+    # Direct control to the list topic action class, with the appropriate
+    # feedback message.
+    $http_input->{feedback} = $feedback;
+    Codestriker::Action::ListTopics->process($http_input, $http_response);
+}
+
+1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/SubmitNewComment.pm codestriker/lib/Codestriker/Action/SubmitNewComment.pm
--- codestriker-1.7.7/lib/Codestriker/Action/SubmitNewComment.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/Action/SubmitNewComment.pm	Sat Jan  3 22:27:21 2004
@@ -0,0 +1,216 @@
+###############################################################################
+# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
+# sits@users.sourceforge.net
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Action object for handling the submission of a new comment.
+
+package Codestriker::Action::SubmitNewComment;
+
+use strict;
+
+use Codestriker::Model::Comment;
+use Codestriker::Model::File;
+use Codestriker::Model::Topic;
+use Codestriker::Http::Render;
+
+# If the input is valid, create the appropriate topic into the database.
+sub process($$$) {
+    my ($type, $http_input, $http_response) = @_;
+
+    # Obtain a new URL builder object.
+    my $query = $http_response->get_query();
+    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
+
+    # Check that the appropriate fields have been filled in.
+    my $topicid = $http_input->get('topic');
+    my $line = $http_input->get('line');
+    my $fn = $http_input->get('fn');
+    my $new = $http_input->get('new');
+    my $comments = $http_input->get('comments');
+    my $email = $http_input->get('email');
+    my $cc = $http_input->get('comment_cc');
+    my $mode = $http_input->get('mode');
+    my $anchor = $http_input->get('a');
+    
+    # Check that the fields have been filled appropriately.
+    if ($comments eq "" || !defined $comments) {
+	$http_response->error("No comments were entered");
+    }
+    if ($email eq "" || !defined $email) {
+	$http_response->error("No email address was entered");
+    }
+
+    # Retrieve the appropriate topic details.
+    my $topic = Codestriker::Model::Topic->new($topicid); 
+
+    # Create the comment in the database.
+    my $comment = Codestriker::Model::Comment->new();
+    $comment->create($topicid, $line, $fn, $new,
+		     $email, $comments,
+	             $Codestriker::COMMENT_SUBMITTED);
+                        
+    $comment->{cc} = $cc;
+    
+    # Tell the listener classes that a comment has just been created.
+    my $listener_response = 
+    	Codestriker::TopicListeners::Manager::comment_create($topic, $comment);
+    if ( $listener_response ne '') {
+	$http_response->error($listener_response);
+    }
+                        
+    # Display a simple screen indicating that the comment has been registered.
+    # Clicking the Close button simply dismisses the edit popup.  Leaving it
+    # up will ensure the next editing topic will be handled quickly, as the
+    # overhead of bringing up a new window is removed.
+    my $reload = $query->param('submit') eq 'Submit+Refresh' ? 1 : 0;
+    $http_response->generate_header($topicid, "Comment submitted", $email, "",
+				    "", "", "", $topic->{repository}, "", $anchor,
+				    $reload, 0);
+                                    
+    my $view_topic_url = $url_builder->view_url($topicid, $line, $mode);
+    my $view_comments_url = $url_builder->view_comments_url($topicid);
+                                    
+    my $vars = {};
+    $vars->{'view_topic_url'} = $view_topic_url;
+    $vars->{'view_comments_url'} = $view_comments_url;
+    $vars->{'comment'} = $comments;
+
+    $vars->{'list_url'} =
+	$url_builder->list_topics_url("", "", "", "", "", "", "",
+				      "", "", "", [ 0 ], undef);
+
+    my $template = Codestriker::Http::Template->new("submitnewcomment");
+    $template->process($vars);
+
+    $http_response->generate_footer();
+}
+
+# Given a topic and topic line number, try to determine the line
+# number of the new file it corresponds to.  For topic lines which
+# were made against '+' lines or unchanged lines, this will give an
+# accurate result.  For other situations, the number returned will be
+# approximate.  The results are returned in $filename_ref,
+# $linenumber_ref and $accurate_ref references.  This is a deprecated method
+# which is only used for data migration purposes (within checksetup.pl and
+# import.pl).
+sub _get_file_linenumber ($$$$$$$$)
+{
+    my ($type, $topic, $topic_linenumber, $filenumber_ref,
+	$filename_ref, $linenumber_ref, $accurate_ref, $new_ref) = @_;
+
+    # Find the appropriate file that $topic_linenumber refers to.
+    my (@filename, @revision, @offset, @binary);
+    Codestriker::Model::File->get_filetable($topic, \@filename, \@revision,
+					    \@offset, \@binary);
+    # No filetable.
+    return 0 if ($#filename == -1);
+
+    my $diff_limit = -1;
+    my $index;
+    for ($index = 0; $index <= $#filename; $index++) {
+	last if ($offset[$index] > $topic_linenumber);
+    }
+
+    # Check if the comment was made against a diff header.
+    if ($index <= $#offset) {
+	my $diff_header_size;
+	if ($revision[$index] eq $Codestriker::ADDED_REVISION ||
+	    $revision[$index] eq $Codestriker::REMOVED_REVISION) {
+	    # Added or removed file.
+	    $diff_header_size = 6;
+	}
+	elsif ($revision[$index] eq $Codestriker::PATCH_REVISION) {
+	    # Patch file
+	    $diff_header_size = 3;
+	}
+	else {
+	    # Normal CVS diff header.
+	    $diff_header_size = 7;
+	}
+
+	if ( ($topic_linenumber >=
+	      $offset[$index] - $diff_header_size) &&
+	     ($topic_linenumber <= $offset[$index]) ) {
+	    $$filenumber_ref = $index;
+	    $$filename_ref = $filename[$index];
+	    $$linenumber_ref = 1;
+	    $$accurate_ref = 0;
+	    $$new_ref = 0;
+	    return 1;
+	}
+    }
+    $index--;
+
+    # Couldn't find a matching linenumber.
+    if ($index < 0 || $index > $#filename) {
+	$$filenumber_ref = -1;
+	$$filename_ref = "";
+	return 1;
+    }
+
+    # Retrieve the diff text corresponding to this file.
+    my ($tmp_offset, $tmp_revision, $diff_text);
+    Codestriker::Model::File->get($topic, $index, \$tmp_offset,
+				  \$tmp_revision, \$diff_text);
+
+    # Go through the patch file until we reach the topic linenumber of
+    # interest.
+    my $new = 0;
+    my $accurate_line = 0;
+    my $oldfile_linenumber = 0;
+    my $newfile_linenumber = 0;
+    my $current_topic_linenumber;
+    my @lines = split /\n/, $diff_text;
+    for (my $i = 0, $current_topic_linenumber = $offset[$index];
+	 $i <= $#lines && $current_topic_linenumber <= $topic_linenumber;
+	 $i++, $current_topic_linenumber++) {
+	$_ = $lines[$i];
+	if (/^\@\@ \-(\d+),\d+ \+(\d+),\d+ \@\@.*$/o) {
+	    # Matching diff header, record what the current linenumber is now
+	    # in the new file.
+	    $oldfile_linenumber = $1 - 1;
+	    $newfile_linenumber = $2 - 1;
+	    $accurate_line = 0;
+	    $new = 0;
+	}
+	elsif (/^\s.*$/o) {
+	    # A line with no change.
+	    $oldfile_linenumber++;
+	    $newfile_linenumber++;
+	    $accurate_line = 1;
+	    $new = 1;
+	}
+	elsif (/^\+.*$/o) {
+	    # A line corresponding to the new file.
+	    $newfile_linenumber++;
+	    $accurate_line = 1;
+	    $new = 1;
+	}
+	elsif (/^\-.*$/o) {
+	    # A line corresponding to the old file.
+	    $oldfile_linenumber++;
+	    $accurate_line = 0;
+	    $new = 0;
+	}
+    }
+
+    if ($current_topic_linenumber >= $topic_linenumber) {
+	# The topic linenumber was found.
+	$$filenumber_ref = $index;
+	$$filename_ref = $filename[$index];
+	$$linenumber_ref = $new ? $newfile_linenumber : $oldfile_linenumber;
+	$$accurate_ref = $accurate_line;
+	$$new_ref = $new;
+    }
+    else {
+	# The topic linenumber was not found.
+	$$filenumber_ref = -1;
+	$$filename_ref = "";
+    }
+    return 1;
+}
+
+1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/SubmitNewProject.pm codestriker/lib/Codestriker/Action/SubmitNewProject.pm
--- codestriker-1.7.7/lib/Codestriker/Action/SubmitNewProject.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/Action/SubmitNewProject.pm	Sat Nov 15 22:23:16 2003
@@ -0,0 +1,67 @@
+###############################################################################
+# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
+# sits@users.sourceforge.net
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Action object for handling the submission of a new project.
+
+package Codestriker::Action::SubmitNewProject;
+
+use strict;
+
+use Codestriker::Model::Project;
+use Codestriker::Action::ListProjects;
+use Codestriker::Action::CreateProject;
+
+# If the input is valid, create the appropriate project into the database.
+sub process($$$) {
+    my ($type, $http_input, $http_response) = @_;
+
+    # Check if this operation is allowed.
+    if ($Codestriker::allow_projects == 0) {
+	$http_response->error("This function has been disabled");
+    }
+
+    my $query = $http_response->get_query();
+
+    # Check that the appropriate fields have been filled in.
+    my $project_name = $http_input->get('project_name');
+    my $project_description = $http_input->get('project_description');
+
+    my $feedback = "";
+
+    if ($project_name eq "") {
+	$feedback .= "No project name was entered.\n";
+    }
+    if ($project_description eq "") {
+	$feedback .= "No project description was entered.\n";
+    }
+
+    # Try to create the project in the model.
+    if ($feedback eq "") {
+	my $rc =
+	    Codestriker::Model::Project->create($project_name,
+						$project_description);
+
+	if ($rc == $Codestriker::DUPLICATE_PROJECT_NAME) {
+	    $feedback .=
+		"Project with name \"$project_name\" already exists.\n";
+	}
+    }
+
+    # If there was a problem, direct control back to the create project
+    # screen, otherwise go to the project list screen.
+    if ($feedback ne "") {
+	$http_input->{feedback} = $feedback;
+	Codestriker::Action::CreateProject->process($http_input,
+						    $http_response);
+    } else {
+	$http_input->{feedback} = "Project created.\n";
+	Codestriker::Action::ListProjects->process($http_input,
+						   $http_response);
+    }
+}
+
+1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/SubmitNewTopic.pm codestriker/lib/Codestriker/Action/SubmitNewTopic.pm
--- codestriker-1.7.7/lib/Codestriker/Action/SubmitNewTopic.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/Action/SubmitNewTopic.pm	Sat Jan  3 21:25:37 2004
@@ -0,0 +1,274 @@
+###############################################################################
+# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
+# sits@users.sourceforge.net
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Action object for handling the submission of a new topic.
+
+package Codestriker::Action::SubmitNewTopic;
+
+use strict;
+
+use FileHandle;
+use Codestriker::Model::Topic;
+use Codestriker::Http::Render;
+use Codestriker::Repository::RepositoryFactory;
+use Codestriker::FileParser::Parser;
+use Codestriker::Model::Project;
+use Codestriker::TopicListeners::Manager;
+
+# If the input is valid, create the appropriate topic into the database.
+sub process($$$) {
+    my ($type, $http_input, $http_response) = @_;
+
+    my $query = $http_response->get_query();
+
+    # Check that the appropriate fields have been filled in.
+    my $topic_title = $http_input->get('topic_title');
+    my $topic_description = $http_input->get('topic_description');
+    my $reviewers = $http_input->get('reviewers');
+    my $email = $http_input->get('email');
+    my $cc = $http_input->get('cc');
+    my $fh = $http_input->get('fh');
+    my $topic_file = $http_input->get('fh_filename');
+    my $fh_mime_type = $http_input->get('fh_mime_type');
+    my $bug_ids = $http_input->get('bug_ids');
+    my $repository_url = $http_input->get('repository');
+    my $projectid = $http_input->get('projectid');
+    my $start_tag = $http_input->get('start_tag');
+    my $end_tag = $http_input->get('end_tag');
+    my $module = $http_input->get('module');
+
+    my $feedback = "";
+    my $topic_text = "";
+
+    # Indicate whether the topic text needs to be retrieved by the repository
+    # object.
+    my $retrieve_text_from_rep = 0;
+    if ($start_tag ne "" && $end_tag ne "" && $module ne "") {
+	$retrieve_text_from_rep = 1;
+
+	# Check if this action is permitted.
+	if ($Codestriker::allow_repositories == 0) {
+	    $feedback .= "Repository functionality has been disabled.  " .
+		"Can't create topic text usings tags.\n";
+	}
+    }
+
+    if ($topic_title eq "") {
+	$feedback .= "No topic title was entered.\n";
+    }
+    if ($topic_description eq "") {
+	$feedback .= "No topic description was entered.\n";
+    }
+    if ($email eq "") {
+	$feedback .= "No email address was entered.\n";
+    }
+    if (!defined $fh && $retrieve_text_from_rep == 0) {
+	$feedback .= "No filename or module/tags were entered.\n";
+    }
+    if ($reviewers eq "") {
+	$feedback .= "No reviewers were entered.\n";
+    }
+    if ($feedback ne "" && defined $fh) {
+	$feedback .= "For security reasons, please re-enter the file name to upload.\n";
+    }
+    
+    $http_response->generate_header("", "Create new topic", $email, $reviewers,
+				    $cc, "", "", $repository_url, $projectid,
+				    "", 0, 0);
+
+    # Set the error_vars in case of any errorsm that will require forwarding
+    # to the create topic screen again.
+    my $error_vars = {};
+    $error_vars->{'version'} = $Codestriker::VERSION;
+    $error_vars->{'feedback'} = $feedback;
+    $error_vars->{'email'} = $email;
+    $error_vars->{'reviewers'} = $reviewers;
+    $error_vars->{'cc'} = $cc;
+    $error_vars->{'allow_repositories'} = $Codestriker::allow_repositories;
+    $error_vars->{'topic_file'} = $topic_file;
+    $error_vars->{'topic_description'} = $topic_description;
+    $error_vars->{'topic_title'} = $topic_title;
+    $error_vars->{'bug_ids'} = $bug_ids;
+    $error_vars->{'default_repository'} = $repository_url;
+    $error_vars->{'repositories'} = \@Codestriker::valid_repositories;
+    $error_vars->{'start_tag'} = $start_tag;
+    $error_vars->{'end_tag'} = $end_tag;
+    $error_vars->{'module'} = $module;
+    $error_vars->{'maximum_topic_size_lines'} = $Codestriker::maximum_topic_size_lines eq "" ? 
+                                          0 : 
+                                          $Codestriker::maximum_topic_size_lines;
+                                          
+    $error_vars->{'suggested_topic_size_lines'} = $Codestriker::suggested_topic_size_lines eq "" ? 
+                                          0 : 
+                                          $Codestriker::suggested_topic_size_lines;
+
+    # If there is a problem with the input, redirect to the create screen
+    # with the message.
+    if ($feedback ne "") {
+	_forward_create_topic($error_vars, $feedback);
+	$http_response->generate_footer();
+	return;
+    }
+
+    # Set the repository to the default if it is not entered.
+    if ($repository_url eq "") {
+	$repository_url = $Codestriker::valid_repositories[0];
+    }
+
+    # Check if the repository argument is valid.
+    my $repository =
+	Codestriker::Repository::RepositoryFactory->get($repository_url);
+
+    my $topicid = Codestriker::Model::Topic::create_new_topicid();        
+    
+    # If the topic text needs to be retrieved from the repository object,
+    # create a temporary file to store the topic text.
+    my $temp_topic_filename = "";
+    my $temp_error_filename = "";
+    if ($retrieve_text_from_rep && defined $repository) {
+
+	# Store the topic text into this temporary file.
+	$temp_topic_filename = "topictext.$topicid";
+	$temp_error_filename = "errortext.$topicid";
+	$fh = new FileHandle "> $temp_topic_filename";
+	my $rc = $repository->getDiff($start_tag, $end_tag, $module, $fh,
+				      $temp_error_filename);
+	$fh->close;
+
+	# Check if the generated diff was too big, and if so, throw an error
+	# message on the screen.
+	if ($rc == $Codestriker::DIFF_TOO_BIG) {
+	    $feedback .= "Generated diff file is too big.\n";
+	} elsif ($rc == $Codestriker::UNSUPPORTED_OPERATION) {
+	    $feedback .= "Repository \"" . $repository->toString() .
+		"\" doesn't support topic text tag retrieval.\n";
+	}
+
+	# Open the file again for reading, so that it can be parsed.
+	$fh = new FileHandle $temp_topic_filename, "r" if $feedback eq "";
+    }
+
+    if ($feedback ne "") {
+	# If there was a problem generating the diff file, remove the
+	# temporary files, and direct control to the create screen again.
+	unlink $temp_topic_filename if $temp_topic_filename ne "";
+	unlink $temp_error_filename if $temp_error_filename ne "";
+	_forward_create_topic($error_vars, $feedback);
+	$http_response->generate_footer();
+	return;
+    }
+
+    # Try to parse the topic text into its diff chunks.
+    my @deltas =
+	Codestriker::FileParser::Parser->parse($fh, "text/plain", $repository,
+					       $topicid, $topic_file);
+
+    # If the topic text has been uploaded from a file, read from it now.
+    if (defined $fh) {
+	while (<$fh>) {
+	    $topic_text .= $_;
+	}
+	if ($topic_text eq "") {
+	    if ($temp_error_filename ne "" &&
+		-f $temp_error_filename) {
+		local $/ = undef;
+		open(ERROR_FILE, "$temp_error_filename");
+		$feedback .= "Problem generating topic text:\n\n";
+		$feedback .= <ERROR_FILE>;
+		close ERROR_FILE;
+	    }
+	    else {
+		$feedback = "Uploaded file doesn't exist or is empty.\n";
+	    }
+
+	    # Remove the temporary files if required, and forward control
+	    # back to the create topic page.
+	    unlink $temp_topic_filename if $temp_topic_filename ne "";
+	    unlink $temp_error_filename if $temp_error_filename ne "";
+	    _forward_create_topic($error_vars, $feedback);
+	    $http_response->generate_footer();
+	    return;
+	}
+    }
+
+    # Remove the temporary files if required.
+    unlink $temp_topic_filename if $temp_topic_filename ne "";
+    unlink $temp_error_filename if $temp_error_filename ne "";
+
+    # Remove \r from the topic text.
+    $topic_text =~ s/\r//g;
+
+    # Make sure the topic is not too large, count the number of \n
+    # in the topic content text.
+    my $new_topic_length = 0;
+    ++$new_topic_length while ($topic_text =~ /\n/g);
+     
+    if (defined($Codestriker::maximum_topic_size_lines) && 
+        $Codestriker::maximum_topic_size_lines ne "" &&
+        $Codestriker::maximum_topic_size_lines < $new_topic_length)
+    {        
+	$feedback .= "The topic length of $new_topic_length lines is too long. " . 
+                     "Topics cannot exceed $Codestriker::maximum_topic_size_lines " . 
+                     "lines long. Plesae remove content from topic, or break the topic " .
+                     "into several independent topics.\n";
+                     
+        _forward_create_topic($error_vars, $feedback);
+        $http_response->generate_footer();
+        return;
+    }
+    
+    # Create the topic in the model.
+    my $topic = Codestriker::Model::Topic->new();
+    $topic->create($topicid, $email, $topic_title,
+		      $bug_ids, $reviewers, $cc,
+		      $topic_description, $topic_text,
+		      $repository, $projectid,
+		      \@deltas);
+                                                                  
+    # tell all of the topic listener classes that a topic has 
+    # just been created.
+    Codestriker::TopicListeners::Manager::topic_create($topic);
+                      
+    # Obtain a URL builder object and determine the URL to the topic.
+    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
+    my $topic_url = $url_builder->view_url_extended($topicid, -1, "", "", "",
+						    $query->url(), 0);
+                                                    
+    # Indicate to the user that the topic has been created and an email has
+    # been sent.
+    my $vars = {};
+    $vars->{'topic_title'} = $topic_title;
+    $vars->{'email'} = $email;
+    $vars->{'topic_url'} = $topic_url;
+    $vars->{'reviewers'} = $reviewers;
+    $vars->{'cc'} = (defined $cc) ? $cc : "";
+
+    $vars->{'list_url'} =
+	$url_builder->list_topics_url("", "", "", "", "", "", "",
+				      "", "", "", [ 0 ], undef);
+
+    my $template = Codestriker::Http::Template->new("submitnewtopic");
+    $template->process($vars);
+
+    $http_response->generate_footer();
+}
+
+# Direct output to the create topic screen again, with the appropriate feedback
+# message.
+sub _forward_create_topic($$) {
+    my ($vars, $feedback) = @_;
+
+    $feedback =~ s/\n/<BR>/g;
+    $vars->{'feedback'} = $feedback;
+    my @projects = Codestriker::Model::Project->list();
+    $vars->{'projects'} = \@projects;
+    
+    my $template = Codestriker::Http::Template->new("createtopic");
+    $template->process($vars);
+}
+
+1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/SubmitProject.pm codestriker/lib/Codestriker/Action/SubmitProject.pm
--- codestriker-1.7.7/lib/Codestriker/Action/SubmitProject.pm	Mon Sep  1 18:41:38 2003
+++ codestriker/lib/Codestriker/Action/SubmitProject.pm	Wed Dec 31 19:00:00 1969
@@ -1,67 +0,0 @@
-###############################################################################
-# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
-# sits@users.sourceforge.net
-#
-# This program is free software; you can redistribute it and modify it under
-# the terms of the GPL.
-
-# Action object for handling the submission of a new project.
-
-package Codestriker::Action::SubmitProject;
-
-use strict;
-
-use Codestriker::Model::Project;
-use Codestriker::Action::ListProjects;
-use Codestriker::Action::CreateProject;
-
-# If the input is valid, create the appropriate project into the database.
-sub process($$$) {
-    my ($type, $http_input, $http_response) = @_;
-
-    # Check if this operation is allowed.
-    if ($Codestriker::allow_projects == 0) {
-	$http_response->error("This function has been disabled");
-    }
-
-    my $query = $http_response->get_query();
-
-    # Check that the appropriate fields have been filled in.
-    my $project_name = $http_input->get('project_name');
-    my $project_description = $http_input->get('project_description');
-
-    my $feedback = "";
-
-    if ($project_name eq "") {
-	$feedback .= "No project name was entered.\n";
-    }
-    if ($project_description eq "") {
-	$feedback .= "No project description was entered.\n";
-    }
-
-    # Try to create the project in the model.
-    if ($feedback eq "") {
-	my $rc =
-	    Codestriker::Model::Project->create($project_name,
-						$project_description);
-
-	if ($rc == $Codestriker::DUPLICATE_PROJECT_NAME) {
-	    $feedback .=
-		"Project with name \"$project_name\" already exists.\n";
-	}
-    }
-
-    # If there was a problem, direct control back to the create project
-    # screen, otherwise go to the project list screen.
-    if ($feedback ne "") {
-	$http_input->{feedback} = $feedback;
-	Codestriker::Action::CreateProject->process($http_input,
-						    $http_response);
-    } else {
-	$http_input->{feedback} = "Project created.\n";
-	Codestriker::Action::ListProjects->process($http_input,
-						   $http_response);
-    }
-}
-
-1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/SubmitTopic.pm codestriker/lib/Codestriker/Action/SubmitTopic.pm
--- codestriker-1.7.7/lib/Codestriker/Action/SubmitTopic.pm	Wed Oct 15 07:12:15 2003
+++ codestriker/lib/Codestriker/Action/SubmitTopic.pm	Wed Dec 31 19:00:00 1969
@@ -1,324 +0,0 @@
-###############################################################################
-# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
-# sits@users.sourceforge.net
-#
-# This program is free software; you can redistribute it and modify it under
-# the terms of the GPL.
-
-# Action object for handling the submission of a new topic.
-
-package Codestriker::Action::SubmitTopic;
-
-use strict;
-
-use FileHandle;
-use Codestriker::Model::Topic;
-use Codestriker::Smtp::SendEmail;
-use Codestriker::Http::Render;
-use Codestriker::BugDB::BugDBConnectionFactory;
-use Codestriker::Repository::RepositoryFactory;
-use Codestriker::FileParser::Parser;
-use Codestriker::Model::Project;
-
-# If the input is valid, create the appropriate topic into the database.
-sub process($$$) {
-    my ($type, $http_input, $http_response) = @_;
-
-    my $query = $http_response->get_query();
-
-    # Check that the appropriate fields have been filled in.
-    my $topic_title = $http_input->get('topic_title');
-    my $topic_description = $http_input->get('topic_description');
-    my $reviewers = $http_input->get('reviewers');
-    my $email = $http_input->get('email');
-    my $cc = $http_input->get('cc');
-    my $fh = $http_input->get('fh');
-    my $topic_file = $http_input->get('fh_filename');
-    my $fh_mime_type = $http_input->get('fh_mime_type');
-    my $bug_ids = $http_input->get('bug_ids');
-    my $repository_url = $http_input->get('repository');
-    my $projectid = $http_input->get('projectid');
-    my $start_tag = $http_input->get('start_tag');
-    my $end_tag = $http_input->get('end_tag');
-    my $module = $http_input->get('module');
-    my $mode = $http_input->get('mode');
-
-    my $feedback = "";
-    my $topic_text = "";
-
-    # Indicate whether the topic text needs to be retrieved by the repository
-    # object.
-    my $retrieve_text_from_rep = 0;
-    if ($start_tag ne "" && $end_tag ne "" && $module ne "") {
-	$retrieve_text_from_rep = 1;
-
-	# Check if this action is permitted.
-	if ($Codestriker::allow_repositories == 0) {
-	    $feedback .= "Repository functionality has been disabled.  " .
-		"Can't create topic text usings tags.\n";
-	}
-    }
-
-    if ($topic_title eq "") {
-	$feedback .= "No topic title was entered.\n";
-    }
-    if ($topic_description eq "") {
-	$feedback .= "No topic description was entered.\n";
-    }
-    if ($email eq "") {
-	$feedback .= "No email address was entered.\n";
-    }
-    if (!defined $fh && $retrieve_text_from_rep == 0) {
-	$feedback .= "No filename or module/tags were entered.\n";
-    }
-    if ($reviewers eq "") {
-	$feedback .= "No reviewers were entered.\n";
-    }
-    if ($feedback ne "" && defined $fh) {
-	$feedback .= "For security reasons, please re-enter the file name to upload.\n";
-    }
-    
-    $http_response->generate_header("", "Create new topic", $email, $reviewers,
-				    $cc, "", "", $repository_url, $projectid,
-				    "", 0, 0);
-
-    # Set the error_vars in case of any errorsm that will require forwarding
-    # to the create topic screen again.
-    my $error_vars = {};
-    $error_vars->{'version'} = $Codestriker::VERSION;
-    $error_vars->{'feedback'} = $feedback;
-    $error_vars->{'email'} = $email;
-    $error_vars->{'reviewers'} = $reviewers;
-    $error_vars->{'cc'} = $cc;
-    $error_vars->{'allow_repositories'} = $Codestriker::allow_repositories;
-    $error_vars->{'topic_file'} = $topic_file;
-    $error_vars->{'topic_description'} = $topic_description;
-    $error_vars->{'topic_title'} = $topic_title;
-    $error_vars->{'bug_ids'} = $bug_ids;
-    $error_vars->{'default_repository'} = $repository_url;
-    $error_vars->{'repositories'} = \@Codestriker::valid_repositories;
-    $error_vars->{'start_tag'} = $start_tag;
-    $error_vars->{'end_tag'} = $end_tag;
-    $error_vars->{'module'} = $module;
-    $error_vars->{'maximum_topic_size_lines'} = $Codestriker::maximum_topic_size_lines eq "" ? 
-                                          0 : 
-                                          $Codestriker::maximum_topic_size_lines;
-                                          
-    $error_vars->{'suggested_topic_size_lines'} = $Codestriker::suggested_topic_size_lines eq "" ? 
-                                          0 : 
-                                          $Codestriker::suggested_topic_size_lines;
-
-    # If there is a problem with the input, redirect to the create screen
-    # with the message.
-    if ($feedback ne "") {
-	_forward_create_topic($error_vars, $feedback);
-	$http_response->generate_footer();
-	return;
-    }
-
-    # Set the repository to the default if it is not entered.
-    if ($repository_url eq "") {
-	$repository_url = $Codestriker::valid_repositories[0];
-    }
-
-    # Check if the repository argument is valid.
-    my $repository =
-	Codestriker::Repository::RepositoryFactory->get($repository_url);
-
-    # For "hysterical" reasons, the topic id is randomly generated.  Seed the
-    # generator based on the time and the pid.  Keep searching until we find
-    # a free topicid.  In 99% of the time, we will get a new one first time.
-    srand(time() ^ ($$ + ($$ << 15)));
-    my $topicid;
-    do {
-	$topicid = int rand(10000000);
-    } while (Codestriker::Model::Topic->exists($topicid));
-
-    # If the topic text needs to be retrieved from the repository object,
-    # create a temporary file to store the topic text.
-    my $temp_topic_filename = "";
-    my $temp_error_filename = "";
-    if ($retrieve_text_from_rep && defined $repository) {
-
-	# Store the topic text into this temporary file.
-	$temp_topic_filename = "topictext.$topicid";
-	$temp_error_filename = "errortext.$topicid";
-	$fh = new FileHandle "> $temp_topic_filename";
-	my $rc = $repository->getDiff($start_tag, $end_tag, $module, $fh,
-				      $temp_error_filename);
-	$fh->close;
-
-	# Check if the generated diff was too big, and if so, throw an error
-	# message on the screen.
-	if ($rc == $Codestriker::DIFF_TOO_BIG) {
-	    $feedback .= "Generated diff file is too big.\n";
-	} elsif ($rc == $Codestriker::UNSUPPORTED_OPERATION) {
-	    $feedback .= "Repository \"" . $repository->toString() .
-		"\" doesn't support topic text tag retrieval.\n";
-	}
-
-	# Open the file again for reading, so that it can be parsed.
-	$fh = new FileHandle $temp_topic_filename, "r" if $feedback eq "";
-    }
-
-    if ($feedback ne "") {
-	# If there was a problem generating the diff file, remove the
-	# temporary files, and direct control to the create screen again.
-	unlink $temp_topic_filename if $temp_topic_filename ne "";
-	unlink $temp_error_filename if $temp_error_filename ne "";
-	_forward_create_topic($error_vars, $feedback);
-	$http_response->generate_footer();
-	return;
-    }
-
-    # Try to parse the topic text into its diff chunks.
-    my @deltas =
-	Codestriker::FileParser::Parser->parse($fh, "text/plain", $repository,
-					       $topicid, $topic_file);
-
-    # If the topic text has been uploaded from a file, read from it now.
-    if (defined $fh) {
-	while (<$fh>) {
-	    $topic_text .= $_;
-	}
-	if ($topic_text eq "") {
-	    if ($temp_error_filename ne "" &&
-		-f $temp_error_filename) {
-		local $/ = undef;
-		open(ERROR_FILE, "$temp_error_filename");
-		$feedback .= "Problem generating topic text:\n\n";
-		$feedback .= <ERROR_FILE>;
-		close ERROR_FILE;
-	    }
-	    else {
-		$feedback = "Uploaded file doesn't exist or is empty.\n";
-	    }
-
-	    # Remove the temporary files if required, and forward control
-	    # back to the create topic page.
-	    unlink $temp_topic_filename if $temp_topic_filename ne "";
-	    unlink $temp_error_filename if $temp_error_filename ne "";
-	    _forward_create_topic($error_vars, $feedback);
-	    $http_response->generate_footer();
-	    return;
-	}
-    }
-
-    # Remove the temporary files if required.
-    unlink $temp_topic_filename if $temp_topic_filename ne "";
-    unlink $temp_error_filename if $temp_error_filename ne "";
-
-    # Remove \r from the topic text.
-    $topic_text =~ s/\r//g;
-
-    # Make sure the topic is not too large, count the number of \n
-    # in the topic content text.
-    my $new_topic_length = 0;
-    ++$new_topic_length while ($topic_text =~ /\n/g);
-     
-    if (defined($Codestriker::maximum_topic_size_lines) && 
-        $Codestriker::maximum_topic_size_lines ne "" &&
-        $Codestriker::maximum_topic_size_lines < $new_topic_length)
-    {        
-	$feedback .= "The topic length of $new_topic_length lines is too long. " . 
-                     "Topics cannot exceed $Codestriker::maximum_topic_size_lines " . 
-                     "lines long. Plesae remove content from topic, or break the topic " .
-                     "into several independent topics.\n";
-                     
-        _forward_create_topic($error_vars, $feedback);
-        $http_response->generate_footer();
-        return;
-    }
-    
-    # Create the topic in the model.
-    my $timestamp = Codestriker->get_timestamp(time);
-    Codestriker::Model::Topic->create($topicid, $email, $topic_title,
-				      $bug_ids, $reviewers, $cc,
-				      $topic_description, $topic_text,
-				      $timestamp, $repository, $projectid,
-				      \@deltas);
-
-    # Obtain a URL builder object and determine the URL to the topic.
-    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
-    my $topic_url = $url_builder->view_url_extended($topicid, -1, $mode, "",
-						    "", $query->url(), 0,
-						    $Codestriker::default_topic_br_mode);
-
-    # Send an email to the document author and all contributors with the
-    # relevant information.  The person who wrote the comment is indicated
-    # in the "From" field, and is BCCed the email so they retain a copy.
-    my $from = $email;
-    my $to = $reviewers;
-    my $bcc = $email;
-    my $subject = "[REVIEW] Topic \"$topic_title\" created\n";
-    my $body =
-	"Topic \"$topic_title\" created\n" .
-	"Author: $email\n" .
-	(($bug_ids ne "") ? "Bug IDs: $bug_ids\n" : "") .
-	"Reviewers: $reviewers\n" .
-	"URL: $topic_url\n\n" .
-	"Description:\n" .
-	"$Codestriker::Smtp::SendEmail::EMAIL_HR\n\n" .
-	"$topic_description\n";
-
-    # Send the email notification out.
-    if (!Codestriker::Smtp::SendEmail->doit(1, $topicid, $from, $to, $cc, $bcc,
-					    $subject, $body)) {
-	_forward_create_topic($error_vars,
-			      "Failed to send topic creation email");
-	$http_response->generate_footer();
-	return;
-    }
-
-    # If Codestriker is linked to a bug database, and this topic is associated
-    # with some bugs, update them with an appropriate message.
-    if ($bug_ids ne "" && $Codestriker::bug_db ne "") {
-	my $bug_db_connection =
-	    Codestriker::BugDB::BugDBConnectionFactory->getBugDBConnection();
-	$bug_db_connection->get_connection();
-	my @ids = split /, /, $bug_ids;
-	my $text = "Codestriker topic: $topic_url created.\n" .
-	    "Author: $email\n" .
-	    "Reviewer(s): $reviewers\n" .
-	    "Title: $topic_title\n";
-	for (my $i = 0; $i <= $#ids; $i++) {
-	    $bug_db_connection->update_bug($ids[$i], $text);
-	}
-	$bug_db_connection->release_connection();
-    }
-
-    # Indicate to the user that the topic has been created and an email has
-    # been sent.
-    my $vars = {};
-    $vars->{'version'} = $Codestriker::VERSION;
-    $vars->{'topic_title'} = $topic_title;
-    $vars->{'email'} = $email;
-    $vars->{'topic_url'} = $topic_url;
-    $vars->{'reviewers'} = $reviewers;
-    $vars->{'cc'} = (defined $cc) ? $cc : "";
-
-    $vars->{'list_url'} =
-	$url_builder->list_topics_url("", "", "", "", "", "", "",
-				      "", "", "", [ 0 ], undef);
-
-    my $template = Codestriker::Http::Template->new("submittopic");
-    $template->process($vars);
-
-    $http_response->generate_footer();
-}
-
-# Direct output to the create topic screen again, with the appropriate feedback
-# message.
-sub _forward_create_topic($$) {
-    my ($vars, $feedback) = @_;
-
-    $feedback =~ s/\n/<BR>/g;
-    $vars->{'feedback'} = $feedback;
-    my @projects = Codestriker::Model::Project->list();
-    $vars->{'projects'} = \@projects;
-    
-    my $template = Codestriker::Http::Template->new("createtopic");
-    $template->process($vars);
-}
-
-1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/ViewFile.pm codestriker/lib/Codestriker/Action/ViewFile.pm
--- codestriker-1.7.7/lib/Codestriker/Action/ViewFile.pm	Sun Sep 28 06:56:15 2003
+++ codestriker/lib/Codestriker/Action/ViewFile.pm	Wed Dec 31 19:00:00 1969
@@ -1,212 +0,0 @@
-###############################################################################
-# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
-# sits@users.sourceforge.net
-#
-# This program is free software; you can redistribute it and modify it under
-# the terms of the GPL.
-
-# Action object for handling the viewing of a file.
-
-package Codestriker::Action::ViewFile;
-
-use strict;
-
-use Codestriker::Model::File;
-use Codestriker::Model::Comment;
-use Codestriker::Http::Render;
-use Codestriker::Repository::RepositoryFactory;
-
-# If the input is valid, display the topic.
-sub process($$$) {
-    my ($type, $http_input, $http_response) = @_;
-
-    # Retrieve the parameters for this action.
-    my $query = $http_response->get_query();
-    my $topic = $http_input->get('topic');
-    my $mode = $http_input->get('mode');
-    my $tabwidth = $http_input->get('tabwidth');
-    my $fn = $http_input->get('fn');
-    my $new = $http_input->get('new');
-    my $parallel = $http_input->get('parallel');
-
-    # Check if this action is allowed.
-    if ($Codestriker::allow_repositories == 0) {
-	$http_response->error("This function has been disabled");
-    }
-
-    # Retrieve the appropriate topic details.
-    my ($document_author, $document_title, $document_bug_ids,
-	$document_reviewers, $document_cc, $description,
-	$topic_data, $document_creation_time, $document_modified_time,
-	$topic_state, $version, $repository_url);
-    my $rc = Codestriker::Model::Topic->read($topic, \$document_author,
-					     \$document_title,
-					     \$document_bug_ids,
-					     \$document_reviewers,
-					     \$document_cc,
-					     \$description, \$topic_data,
-					     \$document_creation_time,
-					     \$document_modified_time,
-					     \$topic_state,
-					     \$version, \$repository_url);
-
-    # Retrieve the corresponding repository object.
-    my $repository =
-	    Codestriker::Repository::RepositoryFactory->get($repository_url);
-
-    # Retrieve the deltas corresponding to this file.
-    my @deltas = Codestriker::Model::File->get_deltas($topic, $fn);
-    my $filename = $deltas[0]->{filename};
-    my $revision = $deltas[0]->{revision};
-
-    # Retrieve the comment details for this topic.
-    my @comments = Codestriker::Model::Comment->read($topic, "", "",
-						     "", "", "");
-
-    # Load the appropriate original form of this file into memory.
-    my ($filedata_max_line_length, @filedata);
-    if (!_read_repository_file($filename, $revision, $tabwidth,
-			       $repository, \@filedata,
-			       \$filedata_max_line_length)) {
-	$http_response->error("Couldn't get repository data for $filename " .
-			      "$revision: $!");
-    }
-
-    # This could be done more efficiently, but for now, read through the
-    # file, and determine the longest line length for the resulting
-    # data that is to be viewed.  Note it is not 100% accurate, but it will
-    # do for now, to reduce the resulting page size.
-    my $max_line_length = $filedata_max_line_length;
-    for (my $d = 0; $d <= $#deltas; $d++) {
-	my @difflines = split /\n/, $deltas[$d]->{text};
-	for (my $i = 0; $i <= $#difflines; $i++) {
-	    my $line = $difflines[$i];
-	    if ($line =~ /^\s(.*)$/o || $line =~ /^\+(.*)$/o ||
-		$line =~ /^\-(.*)$/o) {
-		my $line_length = length($1);
-		if ($line_length > $max_line_length) {
-		    $max_line_length = $line_length;
-		}
-	    }
-	}
-    }
-
-    # Output the new file, with the deltas applied.
-    my $title;
-    if ($parallel) {
-	$title = "Parallel view of $filename v$revision";
-    } else {
-	$title = $new ? "New $filename" : "$filename v$revision";
-    }
-
-    $http_response->generate_header($topic, $title, "", "", "", $mode,
-				    $tabwidth, $repository_url, "", "", 0, 1);
-
-    # Render the HTML header.
-    my $vars = {};
-    $vars->{'version'} = $Codestriker::VERSION;
-    my $header = Codestriker::Http::Template->new("header");
-    $header->process($vars);
-
-    my $max_digit_width = length($#filedata);
-
-    # Create a new render object to perform the line rendering.
-    my @toc_filenames = ();
-    my @toc_revisions = ();
-    my @toc_binaries = ();
-    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
-    my $render =
-	Codestriker::Http::Render->new($query, $url_builder, $parallel,
-				       $max_digit_width, $topic, $mode,
-				       \@comments, $tabwidth,
-				       $repository, \@toc_filenames,
-				       \@toc_revisions, \@toc_binaries,
-				       $max_line_length);
-    # Prepare the output.
-
-    if ($parallel) {
-	$render->print_coloured_table();
-    }
-    else {
-	print "<PRE class=\"ms\">\n";
-    }
-
-    # Read through all the deltas, and apply them to the original form of the
-    # file.
-    my $delta = undef;
-    for (my $delta_index = 0; $delta_index <= $#deltas; $delta_index++) {
-	$delta = $deltas[$delta_index];
-
-	# Output those lines leading up to the start of the next delta.
-	# Build up a delta with no changes, and render it.
-	my $delta_text = "";
-	my $next_delta_linenumber = $delta->{old_linenumber};
-	for (my $i = $render->{old_linenumber};
-	     $i < $next_delta_linenumber; $i++) {
-	    $delta_text .= " $filedata[$i]\n";
-	}
-	$render->delta_text($filename, $fn, $revision,
-			    $render->{old_linenumber},
-			    $render->{new_linenumber},
-			    $delta_text, 0, $new, 0);
-			    
-	# Render the actual change delta.
-	$render->delta_text($filename, $fn, $revision,
-			    $delta->{old_linenumber},
-			    $delta->{new_linenumber}, $delta->{text}, 1,
-			    $new, 1);
-    }
-
-    # Render the tail part of the file, again by building up a delta.
-    my $delta_text = "";
-    for (my $i = $render->{old_linenumber}; $i <= $#filedata; $i++) {
-	$delta_text .= " $filedata[$i]\n";
-    }
-    $render->delta_text($filename, $fn, $revision, $render->{old_linenumber},
-			$render->{new_linenumber}, $delta_text, 0, $new, 0);
-    
-    # Close off the rendering.    
-    if ($parallel) {
-	print $query->end_table();
-    }
-    else {
-	print "</PRE>\n";
-    }
-
-    # Render the HTML trailer.
-    my $trailer = Codestriker::Http::Template->new("trailer");
-    $trailer->process();
-
-    $vars->{'list_url'} =
-	$url_builder->list_topics_url("", "", "", "", "", "", "",
-				      "", "", "", [ 0 ], undef);
-    
-    print $query->end_html();
-
-    $http_response->generate_footer();
-}
-
-# Read the specified repository file and revision into memory.  Return true if
-# successful, false otherwise.
-sub _read_repository_file ($$$$$$) {
-    my ($filename, $revision, $tabwidth, $repository, $data_array_ref,
-	$maxline_length_ref) = @_;
-
-    # Read the file data.
-    $repository->retrieve($filename, $revision, $data_array_ref);
-
-    # Determine the maximum line length, and replace tabs with spaces.
-    $$maxline_length_ref = 0;
-    for (my $i = 1; $i <= $#$data_array_ref; $i++) {
-	$$data_array_ref[$i] =
-	    Codestriker::Http::Render->tabadjust($tabwidth,
-						 $$data_array_ref[$i], 0);
-	my $line_length = length($$data_array_ref[$i]);
-	if ($line_length > $$maxline_length_ref) {
-	    $$maxline_length_ref = $line_length;
-	}
-    }
-    return 1;
-}
-
-1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/ViewSearch.pm codestriker/lib/Codestriker/Action/ViewSearch.pm
--- codestriker-1.7.7/lib/Codestriker/Action/ViewSearch.pm	Sun Aug 17 09:03:34 2003
+++ codestriker/lib/Codestriker/Action/ViewSearch.pm	Wed Dec 31 19:00:00 1969
@@ -1,70 +0,0 @@
-###############################################################################
-# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
-# sits@users.sourceforge.net
-#
-# This program is free software; you can redistribute it and modify it under
-# the terms of the GPL.
-
-# Action object for displaying the topic search page.
-
-package Codestriker::Action::ViewSearch;
-
-use strict;
-use Codestriker::Model::Project;
-
-# Create an appropriate form for topic searching.
-sub process($$$) {
-    my ($type, $http_input, $http_response) = @_;
-
-    my $query = $http_response->get_query();
-
-    # Check if this action is allowed.
-    if ($Codestriker::allow_searchlist == 0) {
-	$http_response->error("This function has been disabled");
-    }
-
-    $http_response->generate_header("", "Search", "", "", "", "", "", "", "",
-				    "", 0, 1);
-
-    # Obtain a URL builder object.
-    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
-
-    # Create the hash for the template variables.
-    my $vars = {};
-    $vars->{'version'} = $Codestriker::VERSION;
-
-    $vars->{'list_url'} =
-	$url_builder->list_topics_url("", "", "", "", "", "", "",
-				      "", "", "", [ 0 ], undef);
- 
-    # Create the URLs for viewing the documentation and for creating a topic.
-    $vars->{'doc_url'} = $url_builder->doc_url();
-    $vars->{'create_topic_url'} = $url_builder->create_topic_url();
-
-    # Create the list of valid states that can be searched over.
-    my @states = ("Any");
-    push @states, @Codestriker::topic_states;
-    $vars->{'states'} = \@states;
-
-    # Get the list of valid topics in the system that can be searched over.
-    my @projects_db = Codestriker::Model::Project->list();
-    my @projects = ();
-    my $any_project = {};
-    $any_project->{id} = -1;
-    $any_project->{name} = "Any";
-    push @projects, $any_project;
-
-    foreach my $project (@projects_db) {
-	push @projects, $project;
-    }
-    $vars->{'projects'} = \@projects;
-
-    $vars->{'bugdb_enabled'} = ($Codestriker::bug_db ne "") ? 1 : 0;
-
-    my $template = Codestriker::Http::Template->new("search");
-    $template->process($vars);
-
-    $http_response->generate_footer();
-}
-
-1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/ViewTopic.pm codestriker/lib/Codestriker/Action/ViewTopic.pm
--- codestriker-1.7.7/lib/Codestriker/Action/ViewTopic.pm	Sun Sep 28 06:56:15 2003
+++ codestriker/lib/Codestriker/Action/ViewTopic.pm	Sat Jan  3 23:02:44 2004
@@ -23,68 +23,55 @@
     my ($type, $http_input, $http_response) = @_;
 
     my $query = $http_response->get_query();
-    my $topic = $http_input->get('topic');
+    
+    my $topicid = $http_input->get('topic');
     my $mode = $http_input->get('mode');
     my $brmode = $http_input->get('brmode');
     my $tabwidth = $http_input->get('tabwidth');
     my $email = $http_input->get('email');
     my $feedback = $http_input->get('feedback');
 
-    # Retrieve the appropriate topic details.
-    my ($document_author, $document_title, $document_bug_ids,
-	$document_reviewers, $document_cc, $description,
-	$topic_data, $document_creation_time, $document_modified_time,
-	$topic_state, $version, $repository_url, $projectid, $project_name);
-    my $rc = Codestriker::Model::Topic->read($topic, \$document_author,
-					     \$document_title,
-					     \$document_bug_ids,
-					     \$document_reviewers,
-					     \$document_cc,
-					     \$description, \$topic_data,
-					     \$document_creation_time,
-					     \$document_modified_time,
-					     \$topic_state,
-					     \$version, \$repository_url,
-					     \$projectid,
-					     \$project_name);
-
-    if ($rc == $Codestriker::INVALID_TOPIC) {
+    if ( Codestriker::Model::Topic::exists($topicid) == 0) {
 	# Topic no longer exists, most likely its been deleted.
 	$http_response->error("Topic no longer exists.");
     }
 
+    # Retrieve the appropriate topic details.           
+    my $topic = Codestriker::Model::Topic->new($topicid);     
+
     # Retrieve the changed files which are a part of this review.
     my (@filenames, @revisions, @offsets, @binary);
-    Codestriker::Model::File->get_filetable($topic, \@filenames,
-					    \@revisions, \@offsets, \@binary);
+    Codestriker::Model::File->get_filetable($topicid,
+    		\@filenames,
+                \@revisions,
+                \@offsets,
+                \@binary);
 
     # Retrieve line-by-line versions of the data and description.
-    my @document_description = split /\n/, $description;
-    my @document = split /\n/, $topic_data;
+    my @document_description = split /\n/, $topic->{description};
+    my @document = split /\n/, $topic->{document};
 
     # Retrieve the comment details for this topic.
-    my @comments = Codestriker::Model::Comment->read($topic, "", "",
-						     "", "", "");
+    my @comments = $topic->read_comments();
 
-    $http_response->generate_header($topic, $document_title, $email,
-				    "", "", $mode, $tabwidth, $repository_url,
+    $http_response->generate_header($topic->{topicid}, $topic->{document_title}, 
+    			            $topic->{author},
+				    "", "", $mode, $tabwidth, $topic->{repository},
 				    "", "", 0, 1);
 
     # Retrieve the repository object, if repository functionality is enabled.
     my $repository;
     if ($Codestriker::allow_repositories) {
 	$repository =
-	    Codestriker::Repository::RepositoryFactory->get($repository_url);
+	    Codestriker::Repository::RepositoryFactory->get($topic->{repository});
     } else {
 	# Indicate not to activate any repository-related links.
-	$repository_url = "";
+	$topic->{repository} = "";
     }
 
     # Create the hash for the template variables.
     my $vars = {};
-    $vars->{'version'} = $Codestriker::VERSION;
     $vars->{'feedback'} = $feedback;
-    $vars->{'topicid'} = $topic;
 
     # Create the necessary template variables for generating the heading part
     # of the view topic display.
@@ -92,24 +79,16 @@
     # Obtain a new URL builder object.
     my $url_builder = Codestriker::Http::UrlBuilder->new($query);
 
-    # Obtains the "Create a new topic", "Search", "Open topics" and
-    # "Open topics in project".
-    my $view_comments_url = $url_builder->view_comments_url($topic);
-    $vars->{'create_topic_url'} = $url_builder->create_topic_url();
-    $vars->{'search_url'} = $url_builder->search_url();
-    $vars->{'doc_url'} = $url_builder->doc_url();
+    ProcessTopicHeader($vars, $topic, $url_builder);
 
-    my @topic_states = (0);
-    my @projectids = ($projectid);
+    my @projectids = ($topic->{project_id});
     $vars->{'list_url'} =
 	$url_builder->list_topics_url("", "", "", "", "", "", "",
-				      "", "", "", \@topic_states, undef);
+				      "", "", "", [0], undef);
     $vars->{'list_url_in_project'} =
 	$url_builder->list_topics_url("", "", "", "", "", "", "",
-				      "", "", "", \@topic_states,
+				      "", "", "", [0],
 				      \@projectids);
-    $vars->{'view_comments_url'} = $view_comments_url;
-    $vars->{'list_projects_url'} = $url_builder->list_projects_url();
 
     # Display the "update" message if the topic state has been changed.
     $vars->{'updated'} = $http_input->get('updated');
@@ -117,28 +96,8 @@
     $vars->{'rc_stale_version'} = $Codestriker::STALE_VERSION;
     $vars->{'rc_invalid_topic'} = $Codestriker::INVALID_TOPIC;
 
-    # Indicate if the "delete" button should be visible or not.
-    $vars->{'delete_enabled'} = $Codestriker::allow_delete;
-
-    # Indicate if the "list/search" functionality is available or not.
-    $vars->{'searchlist_enabled'} = $Codestriker::allow_searchlist;
-
-    # Indicate if the "project" functionality is available or not.
-    $vars->{'projects_enabled'} = $Codestriker::allow_projects;
-
-    # Obtain the view topic summary information, the title, bugs it relates
-    # to, and who the participants are.
-    $vars->{'escaped_title'} = HTML::Entities::encode($document_title);
-
-    if ($Codestriker::antispam_email) {
-	$document_author = Codestriker->make_antispam_email($document_author);
-    }
-    $vars->{'document_author'} = $document_author;
-    
-    $vars->{'document_creation_time'} = $document_creation_time;
-    
-    if ($document_bug_ids ne "") {
-	my @bugs = split ', ', $document_bug_ids;
+    if ($topic->{bug_ids} ne "") {
+	my @bugs = split ', ', $topic->{bug_ids};
 	my $bug_string = "";
 	for (my $i = 0; $i <= $#bugs; $i++) {
 	    $bug_string .=
@@ -151,13 +110,10 @@
 	$vars->{'bug_string'} = "";
     }
 
-    if ($Codestriker::antispam_email) {
-	$document_reviewers =
-	    Codestriker->make_antispam_email($document_reviewers);
-    }
-    $vars->{'document_reviewers'} = $document_reviewers;
-    $vars->{'repository'} = $repository_url;
-    $vars->{'project_name'} = $project_name;
+    $vars->{'document_reviewers'} = 
+    	Codestriker->filter_email($topic->{reviewers});
+    $vars->{'repository'} = $topic->{repository};
+    $vars->{'project_name'} = $topic->{project_name};
     $vars->{'number_of_lines'} = $#document + 1;
 
     $vars->{'suggested_topic_size_lines'} =
@@ -177,9 +133,8 @@
     }
     $vars->{'mode'} = $mode;
     $vars->{'brmode'} = $brmode;
-    $vars->{'topic_version'} = $version;
     $vars->{'states'} = \@Codestriker::topic_states;
-    $vars->{'default_state'} = $topic_state;
+    $vars->{'default_state'} = $topic->{state};
 
     # Obtain the topic description, with "Bug \d\d\d" links rendered to links
     # to the bug tracking system.
@@ -196,13 +151,9 @@
     }
     $vars->{'description'} = $data;
 
-    # Obtains how many comments there are, and the internal link to them.
-    $vars->{'number_comments'} = $#comments + 1;
-    $vars->{'comment_url'} =
-	$url_builder->view_comments_url($topic);
 
     # Obtain the link to download the actual document text.
-    $vars->{'download_url'} = $url_builder->download_url($topic);
+    $vars->{'download_url'} = $url_builder->download_url($topicid);
 
     # Fire the template on the topic heading information.
     my $template = Codestriker::Http::Template->new("viewtopic");
@@ -215,29 +166,28 @@
     # If there are no files associated with the review, remove this
     # option.
     my $coloured_url =
-	$url_builder->view_url($topic, -1, $Codestriker::COLOURED_MODE,
+	$url_builder->view_url($topicid, -1, $Codestriker::COLOURED_MODE,
 			       $brmode);
     my $coloured_mono_url =
-	$url_builder->view_url($topic, -1,
+	$url_builder->view_url($topicid, -1,
 			       $Codestriker::COLOURED_MONO_MODE, $brmode);
     my $br_normal_url =
-	$url_builder->view_url($topic, -1, $mode,
+	$url_builder->view_url($topicid, -1, $mode,
 			       $Codestriker::LINE_BREAK_NORMAL_MODE);
     my $br_assist_url =
-	$url_builder->view_url($topic, -1, $mode,
+	$url_builder->view_url($topicid, -1, $mode,
 			       $Codestriker::LINE_BREAK_ASSIST_MODE);
 	
     if ($mode == $Codestriker::COLOURED_MODE) {
 	print "View as " .
 	    $query->a({href=>$coloured_mono_url}, "coloured monospace diff") .
-	    ".";
+	    " | ";
     } elsif ($mode == $Codestriker::COLOURED_MONO_MODE) {
 	print "View as " .
 	    $query->a({href=>$coloured_url}, "coloured variable-width diff") .
-	    ".";
+	    " | ";
     }
 
-    print $query->br;
     if ($brmode == $Codestriker::LINE_BREAK_NORMAL_MODE) {
 	print "View with " .
 	    $query->a({href=>$br_assist_url}, "minimal screen width") . ".";
@@ -245,13 +195,13 @@
 	print "View with " .
 	    $query->a({href=>$br_normal_url}, "minimal line breaks") . ".";
     }
-    print $query->br;
+    print " | ";
 
     # Display the option to change the tab width.
     my $newtabwidth = ($tabwidth == 4) ? 8 : 4;
     my $change_tabwidth_url;
     $change_tabwidth_url =
-	$url_builder->view_url_extended($topic, -1, $mode, $newtabwidth,
+	$url_builder->view_url_extended($topicid, -1, $mode, $newtabwidth,
 					"", "", 0, $brmode);
 
     print "Tab width set to $tabwidth (";
@@ -265,7 +215,7 @@
 
     # Build the render which will be used to build this page.
     my $render = Codestriker::Http::Render->new($query, $url_builder, 1,
-						$max_digit_width, $topic,
+						$max_digit_width, $topicid,
 						$mode, \@comments, $tabwidth,
 						$repository, \@filenames,
 						\@revisions, \@binary, -1, $brmode);
@@ -274,7 +224,7 @@
     $render->start();
 
     # Retrieve the delta set comprising this review.
-    my @deltas = Codestriker::Model::File->get_delta_set($topic);
+    my @deltas = Codestriker::Model::File->get_delta_set($topicid);
 
     # Render the deltas.
     my $old_filename = "";
@@ -285,8 +235,6 @@
     }
 
     $render->finish();
-    print $query->p, $query->a({href=>$view_comments_url},
-			       "View all comments");
 
     # Render the HTML trailer.
     my $trailer = Codestriker::Http::Template->new("trailer");
@@ -296,5 +244,38 @@
 
     $http_response->generate_footer();
 }
+
+# This function is used by all of the three topic pages to fill out the common template
+# items that are required by all three.
+sub ProcessTopicHeader($$$) {
+    my ($vars, $topic, $url_builder) = @_;
+
+    # Handle the links in the three topic tabs.
+    $vars->{'view_topicinfo_url'} = $url_builder->view_topicinfo_url($topic->{topicid});
+    $vars->{'view_topic_url'} =
+	$url_builder->view_url($topic->{topicid}, -1, 0); ## XX mode, last param
+
+    $vars->{'view_comments_url'} = $url_builder->view_comments_url($topic->{topicid});
+
+    # Retrieve the comment details for this topic.
+    my @comments = $topic->read_comments();
+
+    # Obtains how many comments there are, and the internal link to them.
+    $vars->{'number_comments'} = $#comments + 1;
+
+    # Obtain the view topic summary information, the title, bugs it relates
+    # to, and who the participants are.
+    $vars->{'title'} = HTML::Entities::encode($topic->{title});
+
+    $vars->{'author'} = Codestriker->filter_email($topic->{author});
+    
+    $vars->{'document_creation_time'} = 
+    	Codestriker->format_timestamp($topic->{creation_ts});
+
+    $vars->{'topic'} = $topic->{topicid};
+
+    $vars->{'reviewers'} = Codestriker->filter_email($topic->{reviewers});
+    $vars->{'cc'} =  Codestriker->filter_email($topic->{cc});
+}
 
 1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/ViewTopicComments.pm codestriker/lib/Codestriker/Action/ViewTopicComments.pm
--- codestriker-1.7.7/lib/Codestriker/Action/ViewTopicComments.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/Action/ViewTopicComments.pm	Sat Jan  3 23:02:25 2004
@@ -0,0 +1,163 @@
+###############################################################################
+# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
+# sits@users.sourceforge.net
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Action object for displaying a list of comments.
+
+package Codestriker::Action::ViewTopicComments;
+
+use strict;
+use Codestriker::Http::Template;
+use Codestriker::Http::Render;
+use Codestriker::Model::Comment;
+use Codestriker::Model::File;
+use HTML::Entities;
+
+# If the input is valid, list the appropriate comments for a topic.
+sub process($$$) {
+    my ($type, $http_input, $http_response) = @_;
+
+    my $query = $http_response->get_query();
+
+    # Check that the appropriate fields have been filled in.
+    my $topicid = $http_input->get('topic');
+    my $email = $http_input->get('email');
+    my $mode = $http_input->get('mode');
+    my $feedback = $http_input->get('feedback');
+    my $show_context = $http_input->get('scontext');
+    my $show_comments_from_user = $http_input->get('sauthor');
+    my $show_comments_by_state  = $http_input->get('sstate');
+    
+    # Perform some error checking here on the parameters.
+
+    # Retrieve the comment details for this topic.
+    my @comments = Codestriker::Model::Comment->read_filtered($topicid,
+    	$show_comments_by_state,
+	$show_comments_from_user);
+
+    # Display the data, with each topic title linked to the view topic screen.
+    $http_response->generate_header($topicid, "Comment list", $email, "", "", "",
+				    "", "", "", "", 0, 0);
+
+    # Retrieve the appropriate topic details.           
+    my $topic = Codestriker::Model::Topic->new($topicid);     
+
+    # Create the hash for the template variables.
+    my $vars = {};
+    $vars->{'feedback'} = $feedback;
+
+    # Obtain a new URL builder object.
+    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
+
+
+    Codestriker::Action::ViewTopic::ProcessTopicHeader($vars, $topic, $url_builder);
+
+    $vars->{'list_url'} =
+	$url_builder->list_topics_url("", "", "", "", "", "", "",
+				      "", "", "", [ 0 ], undef);
+
+    # Get the list of users that have put comments in against the comment, and filter if needed.
+    my @usersThatHaveComments = Codestriker::Model::Comment->read_authors($topicid);
+    @usersThatHaveComments = map 
+            { Codestriker->filter_email($_) } 
+            @usersThatHaveComments;        
+    
+    # Filter the email address out, in the object.
+    foreach my $comment (@comments) {
+    	$comment->{author} = Codestriker->filter_email($comment->{author});
+    }
+                                             
+    # Go through all the comments and make them into an appropriate form for
+    # displaying.
+    my $last_filenumber = -1;
+    my $last_fileline = -1;
+    my $index = 0;
+    for (my $i = 0; $i <= $#comments; $i++) {
+	my $comment = $comments[$i];
+
+	if ($comment->{fileline} != $last_fileline ||
+	    $comment->{filenumber} != $last_filenumber) {
+	    my $new_file =
+		$url_builder->view_file_url($topicid, $comment->{filenumber},
+					    $comment->{filenew},
+					    $comment->{fileline}, $mode, 0);
+					    
+	    $comment->{view_file} =
+		"javascript: myOpen('$new_file','CVS')";
+	    my $parallel = 
+		$url_builder->view_file_url($topicid, $comment->{filenumber},
+					    $comment->{filenew},
+					    $comment->{fileline}, $mode, 1);
+	    $comment->{view_parallel} =
+		"javascript: myOpen('$parallel','CVS')";
+	    $comment->{edit_url} =
+		"javascript: eo('" . $comment->{filenumber} . "','" .
+		$comment->{fileline} . "','" . $comment->{filenew} . "')";
+	    $comment->{anchor} = $comment->{filenumber} . "|" .
+		$comment->{fileline} . "|" . $comment->{filenew};
+	    $last_fileline = $comment->{fileline};
+	    $last_filenumber = $comment->{filenumber};
+	}
+
+	my $state = $comment->{state};
+	$comment->{state} = $Codestriker::comment_states[$state];
+
+	# Make sure the comment data is HTML escaped.
+	$comment->{data} = HTML::Entities::encode($comment->{data});
+        
+        if ($show_context ne "" && $show_context > 0) {
+                my $delta = Codestriker::Model::File->get_delta($topicid, 
+                                $comment->{filenumber}, 
+                                $comment->{fileline} , 
+                                $comment->{filenew});
+
+                $comment->{context} = Codestriker::Http::Render->get_context(
+                                                $comment->{fileline} , 
+                                                $show_context, 1,
+                                                $delta->{old_linenumber},
+                                                $delta->{new_linenumber},
+                                                $delta->{text}, 
+                                                $comment->{filenew});
+       }
+    }
+
+    # Indicate what states the comments can be transferred to.
+    my @states = ();
+    for (my $i = 0; $i <= $#Codestriker::comment_states; $i++) {
+	my $state = $Codestriker::comment_states[$i];
+	if ($state ne "Draft" && $state ne "Deleted") {
+	    push @states, $state;
+	}
+    }
+
+    # Store the parameters to the template.
+    $vars->{'email'} = $email;
+    $vars->{'comments'} = \@comments;
+    $vars->{'states'} = \@states;
+    
+    $vars->{'users'} = \@usersThatHaveComments;
+    
+    # Push in the current filter combo box selections so the window remembers
+    # what the user has currently set.
+    $vars->{'scontext'} = $show_context;    
+    if ( $show_comments_by_state ne '') {
+    	$vars->{'select_sstate'} = $show_comments_by_state + 1;
+    }
+    else {
+    	$vars->{'select_sstate'} = 0;
+    }
+ 
+    $vars->{'sstate'} = $show_comments_by_state;     
+    $vars->{'sauthor'} = $http_input->get('sauthor');
+
+    # Send the data to the template for rendering.
+    my $template = Codestriker::Http::Template->new("viewtopiccomments");
+    $template->process($vars);
+
+    $http_response->generate_footer();
+}
+
+1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/ViewTopicFile.pm codestriker/lib/Codestriker/Action/ViewTopicFile.pm
--- codestriker-1.7.7/lib/Codestriker/Action/ViewTopicFile.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/Action/ViewTopicFile.pm	Sat Nov 15 22:45:48 2003
@@ -0,0 +1,198 @@
+###############################################################################
+# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
+# sits@users.sourceforge.net
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Action object for handling the viewing of a file.
+
+package Codestriker::Action::ViewTopicFile;
+
+use strict;
+
+use Codestriker::Model::File;
+use Codestriker::Model::Comment;
+use Codestriker::Http::Render;
+use Codestriker::Repository::RepositoryFactory;
+
+# If the input is valid, display the topic.
+sub process($$$) {
+    my ($type, $http_input, $http_response) = @_;
+
+    # Retrieve the parameters for this action.
+    my $query = $http_response->get_query();
+    my $topicid = $http_input->get('topic');
+    my $mode = $http_input->get('mode');
+    my $tabwidth = $http_input->get('tabwidth');
+    my $fn = $http_input->get('fn');
+    my $new = $http_input->get('new');
+    my $parallel = $http_input->get('parallel');
+
+    # Check if this action is allowed.
+    if ($Codestriker::allow_repositories == 0) {
+	$http_response->error("This function has been disabled");
+    }
+
+    # Retrieve the appropriate topic details.
+    my $topic = Codestriker::Model::Topic->new($topicid);
+
+    # Retrieve the corresponding repository object.
+    my $repository =
+	    Codestriker::Repository::RepositoryFactory->get($topic->{repository});
+
+    # Retrieve the deltas corresponding to this file.
+    my @deltas = Codestriker::Model::File->get_deltas($topic, $fn);
+    my $filename = $deltas[0]->{filename};
+    my $revision = $deltas[0]->{revision};
+
+    # Retrieve the comment details for this topic.
+    my @comments = $topic->read_comments();
+
+    # Load the appropriate original form of this file into memory.
+    my ($filedata_max_line_length, @filedata);
+    if (!_read_repository_file($filename, $revision, $tabwidth,
+			       $repository, \@filedata,
+			       \$filedata_max_line_length)) {
+	$http_response->error("Couldn't get repository data for $filename " .
+			      "$revision: $!");
+    }
+
+    # This could be done more efficiently, but for now, read through the
+    # file, and determine the longest line length for the resulting
+    # data that is to be viewed.  Note it is not 100% accurate, but it will
+    # do for now, to reduce the resulting page size.
+    my $max_line_length = $filedata_max_line_length;
+    for (my $d = 0; $d <= $#deltas; $d++) {
+	my @difflines = split /\n/, $deltas[$d]->{text};
+	for (my $i = 0; $i <= $#difflines; $i++) {
+	    my $line = $difflines[$i];
+	    if ($line =~ /^\s(.*)$/o || $line =~ /^\+(.*)$/o ||
+		$line =~ /^\-(.*)$/o) {
+		my $line_length = length($1);
+		if ($line_length > $max_line_length) {
+		    $max_line_length = $line_length;
+		}
+	    }
+	}
+    }
+
+    # Output the new file, with the deltas applied.
+    my $title;
+    if ($parallel) {
+	$title = "Parallel view of $filename v$revision";
+    } else {
+	$title = $new ? "New $filename" : "$filename v$revision";
+    }
+
+    $http_response->generate_header($topicid, $title, "", "", "", $mode,
+				    $tabwidth, $topic->{repository}, "", "", 0, 1);
+
+    # Render the HTML header.
+    my $vars = {};
+
+    my $header = Codestriker::Http::Template->new("header");
+    $header->process($vars);
+
+    my $max_digit_width = length($#filedata);
+
+    # Create a new render object to perform the line rendering.
+    my @toc_filenames = ();
+    my @toc_revisions = ();
+    my @toc_binaries = ();
+    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
+    my $render =
+	Codestriker::Http::Render->new($query, $url_builder, $parallel,
+				       $max_digit_width, $topicid, $mode,
+				       \@comments, $tabwidth,
+				       $repository, \@toc_filenames,
+				       \@toc_revisions, \@toc_binaries,
+				       $max_line_length);
+    # Prepare the output.
+
+    if ($parallel) {
+	$render->print_coloured_table();
+    }
+    else {
+	print "<PRE class=\"ms\">\n";
+    }
+
+    # Read through all the deltas, and apply them to the original form of the
+    # file.
+    my $delta = undef;
+    for (my $delta_index = 0; $delta_index <= $#deltas; $delta_index++) {
+	$delta = $deltas[$delta_index];
+
+	# Output those lines leading up to the start of the next delta.
+	# Build up a delta with no changes, and render it.
+	my $delta_text = "";
+	my $next_delta_linenumber = $delta->{old_linenumber};
+	for (my $i = $render->{old_linenumber};
+	     $i < $next_delta_linenumber; $i++) {
+	    $delta_text .= " $filedata[$i]\n";
+	}
+	$render->delta_text($filename, $fn, $revision,
+			    $render->{old_linenumber},
+			    $render->{new_linenumber},
+			    $delta_text, 0, $new, 0);
+			    
+	# Render the actual change delta.
+	$render->delta_text($filename, $fn, $revision,
+			    $delta->{old_linenumber},
+			    $delta->{new_linenumber}, $delta->{text}, 1,
+			    $new, 1);
+    }
+
+    # Render the tail part of the file, again by building up a delta.
+    my $delta_text = "";
+    for (my $i = $render->{old_linenumber}; $i <= $#filedata; $i++) {
+	$delta_text .= " $filedata[$i]\n";
+    }
+    $render->delta_text($filename, $fn, $revision, $render->{old_linenumber},
+			$render->{new_linenumber}, $delta_text, 0, $new, 0);
+    
+    # Close off the rendering.    
+    if ($parallel) {
+	print $query->end_table();
+    }
+    else {
+	print "</PRE>\n";
+    }
+
+    # Render the HTML trailer.
+    my $trailer = Codestriker::Http::Template->new("trailer");
+    $trailer->process();
+
+    $vars->{'list_url'} =
+	$url_builder->list_topics_url("", "", "", "", "", "", "",
+				      "", "", "", [ 0 ], undef);
+    
+    print $query->end_html();
+
+    $http_response->generate_footer();
+}
+
+# Read the specified repository file and revision into memory.  Return true if
+# successful, false otherwise.
+sub _read_repository_file ($$$$$$) {
+    my ($filename, $revision, $tabwidth, $repository, $data_array_ref,
+	$maxline_length_ref) = @_;
+
+    # Read the file data.
+    $repository->retrieve($filename, $revision, $data_array_ref);
+
+    # Determine the maximum line length, and replace tabs with spaces.
+    $$maxline_length_ref = 0;
+    for (my $i = 1; $i <= $#$data_array_ref; $i++) {
+	$$data_array_ref[$i] =
+	    Codestriker::Http::Render->tabadjust($tabwidth,
+						 $$data_array_ref[$i], 0);
+	my $line_length = length($$data_array_ref[$i]);
+	if ($line_length > $$maxline_length_ref) {
+	    $$maxline_length_ref = $line_length;
+	}
+    }
+    return 1;
+}
+
+1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Action/ViewTopicInfo.pm codestriker/lib/Codestriker/Action/ViewTopicInfo.pm
--- codestriker-1.7.7/lib/Codestriker/Action/ViewTopicInfo.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/Action/ViewTopicInfo.pm	Sat Jan  3 23:03:28 2004
@@ -0,0 +1,205 @@
+###############################################################################
+# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
+# sits@users.sourceforge.net
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Action object for handling the viewing of a topic.
+
+package Codestriker::Action::ViewTopicInfo;
+
+use strict;
+
+use Codestriker::Model::Topic;
+use Codestriker::Model::Comment;
+use Codestriker::Http::UrlBuilder;
+use Codestriker::Http::Render;
+use Codestriker::Repository::RepositoryFactory;
+use HTML::Entities ();
+
+# If the input is valid, display the topic.
+sub process($$$) {
+    my ($type, $http_input, $http_response) = @_;
+
+    my $query = $http_response->get_query();
+    my $topicid = $http_input->get('topic');
+    my $mode = $http_input->get('mode');
+    my $tabwidth = $http_input->get('tabwidth');
+    my $email = $http_input->get('email');
+    my $feedback = $http_input->get('feedback');
+    
+    if ( Codestriker::Model::Topic::exists($topicid) == 0) {
+	# Topic no longer exists, most likely its been deleted.
+	$http_response->error("Topic no longer exists.");
+    }
+
+    # Retrieve the appropriate topic details.           
+    my $topic = Codestriker::Model::Topic->new($topicid);     
+
+    # Retrieve the changed files which are a part of this review.
+    my (@filenames, @revisions, @offsets, @binary);
+    Codestriker::Model::File->get_filetable($topicid,
+    		\@filenames,
+                \@revisions,
+                \@offsets,
+                \@binary);
+
+    # Retrieve line-by-line versions of the data and description.
+    my @document_description = split /\n/, $topic->{description};
+    my @document = split /\n/, $topic->{document};
+
+    # Retrieve the comment details for this topic.
+    my @topic_comments = $topic->read_comments();
+
+    $http_response->generate_header($topic->{topicid}, $topic->{document_title}, 
+    			            $topic->{author},
+				    "", "", $mode, $tabwidth, $topic->{repository},
+				    "", "", 0, 1);
+
+    # Retrieve the repository object, if repository functionality is enabled.
+    my $repository;
+    if ($Codestriker::allow_repositories) {
+	$repository =
+	    Codestriker::Repository::RepositoryFactory->get($topic->{repository});
+    } else {
+	# Indicate not to activate any repository-related links.
+	$topic->{repository} = "";
+    }
+
+    # Create the hash for the template variables.
+    my $vars = {};
+    $vars->{'feedback'} = $feedback;
+
+    # Obtain a new URL builder object.
+    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
+
+    Codestriker::Action::ViewTopic::ProcessTopicHeader($vars, $topic, $url_builder);
+
+    # Get the total count of each type of comment for this topic.
+    my @commentcounts;
+
+    foreach my $state (@Codestriker::comment_states) {
+	push @commentcounts, { name=>$state, count=>0 };
+    }
+    
+    foreach my $comment (@topic_comments) {
+	++$commentcounts[$comment->{state}]->{count};
+    }
+
+    $vars->{'commentcounts'} = \@commentcounts;   
+
+    my @projectids = ($topic->{project_id});
+    $vars->{'list_url'} =
+	$url_builder->list_topics_url("", "", "", "", "", "", "",
+				      "", "", "", [0], undef);
+    $vars->{'list_url_in_project'} =
+	$url_builder->list_topics_url("", "", "", "", "", "", "",
+				      "", "", "", [0],
+				      \@projectids);
+
+    $vars->{'view_topic_url'} =
+	$url_builder->view_url($topicid, -1, $mode);
+
+    $vars->{'view_topicinfo_url'} = $url_builder->view_topicinfo_url($topicid);
+    $vars->{'view_comments_url'} = $url_builder->view_comments_url($topicid);
+    $vars->{'list_projects_url'} = $url_builder->list_projects_url();
+
+    # Display the "update" message if the topic state has been changed.
+    $vars->{'updated'} = $http_input->get('updated');
+    $vars->{'rc_ok'} = $Codestriker::OK;
+    $vars->{'rc_stale_version'} = $Codestriker::STALE_VERSION;
+    $vars->{'rc_invalid_topic'} = $Codestriker::INVALID_TOPIC;
+    
+    if ($topic->{bug_ids} ne "") {
+	my @bugs = split ', ', $topic->{bug_ids};
+	my $bug_string = "";
+	for (my $i = 0; $i <= $#bugs; $i++) {
+	    $bug_string .=
+		$query->a({href=>"$Codestriker::bugtracker$bugs[$i]"},
+			  $bugs[$i]);
+	    $bug_string .= ', ' unless ($i == $#bugs);
+	}
+	$vars->{'bug_string'} = $bug_string;
+    } else {
+	$vars->{'bug_string'} = "";
+    }
+
+    $vars->{'document_reviewers'} = 
+    	Codestriker->filter_email($topic->{reviewers});
+    $vars->{'repository'} = $topic->{repository};
+    $vars->{'project_name'} = $topic->{project_name};
+    $vars->{'number_of_lines'} = $#document + 1;
+
+    $vars->{'suggested_topic_size_lines'} =
+	$Codestriker::suggested_topic_size_lines eq "" ? 0 :
+	$Codestriker::suggested_topic_size_lines;    
+    $vars->{'list_url'} =
+	$url_builder->list_topics_url("", "", "", "", "", "", "",
+				      "", "", "", [ 0 ], undef);
+
+    # Prepare the data for displaying the state update option.
+    # Make sure the old mode setting is no longer used.
+    if ((! defined $mode) || $mode == $Codestriker::NORMAL_MODE) {
+	$mode = $Codestriker::COLOURED_MODE;
+    }
+    $vars->{'mode'} = $mode;
+    $vars->{'topic_version'} = $topic->{version};
+    $vars->{'states'} = \@Codestriker::topic_states;
+    $vars->{'default_state'} = $topic->{state};
+
+    # Obtain the topic description, with "Bug \d\d\d" links rendered to links
+    # to the bug tracking system.
+    my $data = "";
+    for (my $i = 0; $i <= $#document_description; $i++) {
+	$data .= $document_description[$i] . "\n";
+    }
+    
+    $data = HTML::Entities::encode($data);
+
+    # Replace occurances of bug strings with the appropriate links.
+    if ($Codestriker::bugtracker ne "") {
+	$data =~ s/(\b)([Bb][Uu][Gg]\s*(\d+))(\b)/$1<A HREF="${Codestriker::bugtracker}$3">$1$2$4<\/A>/mg;
+    }
+    $vars->{'description'} = $data;
+
+
+    # get the metrics.
+    my @topic_metrics = $topic->get_metrics()->get_topic_metrics();
+
+    $vars->{topic_metrics} = \@topic_metrics;
+
+    my @author_metrics = $topic->get_metrics()->get_user_metrics($topic->{author});
+    $vars->{author_metrics} = \@author_metrics;
+    
+    my @reviewer_list = split /, /, $topic->{reviewers};
+
+    # Remove the author from the list just in case somebody put themselves in twice.
+    @reviewer_list = grep { $_ ne $topic->{author} } @reviewer_list;
+
+    my @reviewer_metrics;
+    foreach my $reviewer (@reviewer_list)
+    {
+	my @user_metrics = $topic->get_metrics()->get_user_metrics($reviewer);
+
+	my $metric = 
+	{
+	    reviewer => Codestriker->filter_email($reviewer),
+	    user_metrics => \@user_metrics
+	};
+
+	push @reviewer_metrics, $metric;
+    }
+
+    $vars->{reviewer_metrics} = \@reviewer_metrics;
+
+    my @total_metrics = $topic->get_metrics()->get_user_metrics_totals(@reviewer_list, $topic->{author});
+    $vars->{total_metrics} = \@total_metrics;
+
+    my $template = Codestriker::Http::Template->new("viewtopicinfo");
+    $template->process($vars);
+
+    $http_response->generate_footer();
+}
+
+1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/DB/DBI.pm codestriker/lib/Codestriker/DB/DBI.pm
--- codestriker-1.7.7/lib/Codestriker/DB/DBI.pm	Sat Nov 30 00:10:28 2002
+++ codestriker/lib/Codestriker/DB/DBI.pm	Thu Oct  2 19:25:38 2003
@@ -26,7 +26,7 @@
     return DBI->connect($Codestriker::db, $Codestriker::dbuser,
 			$Codestriker::dbpasswd,
 			{AutoCommit=>$autocommit, RaiseError=>1})
-	|| die "Couldn't connect to database: " . DBI->errstr;
+	|| die "Couldn't connect to database: " . DBI::errstr;
 }
 
 # Release a connection, and if $success is true and this is a transaction
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Http/Input.pm codestriker/lib/Codestriker/Http/Input.pm
--- codestriker-1.7.7/lib/Codestriker/Http/Input.pm	Sun Sep 28 06:56:15 2003
+++ codestriker/lib/Codestriker/Http/Input.pm	Sat Jan  3 23:05:55 2004
@@ -115,6 +115,20 @@
     $self->{project_name} = "" if ! defined $self->{project_name};
     $self->{project_description} = "" if ! defined $self->{project_description};
 
+    my @topic_metrics = $query->param('topic_metric');
+    $self->{topic_metric} = \@topic_metrics;
+
+    my @author_metrics = $query->param('author_metric');
+    $self->{author_metric} = \@author_metrics;
+
+    for (my $userindex = 0; $userindex < 100; ++$userindex)
+    {
+	my @reviewer_metrics = $query->param("reviewer_metric,$userindex");
+
+	last if ( scalar(@reviewer_metrics) == 0);
+	$self->{"reviewer_metric,$userindex"} = \@reviewer_metrics;
+    }
+
     # Remove those annoying \r's in textareas.
     if (defined $self->{topic_description}) {
 	$self->{topic_description} =~ s/\r//g;
@@ -191,6 +205,7 @@
     $self->{reviewers} = $self->make_canonical_email_list($self->{reviewers});
     $self->{cc} = $self->make_canonical_email_list($self->{cc});
     $self->{bug_ids} = $self->make_canonical_bug_list($self->{bug_ids});
+    $self->{comment_cc} = $self->make_canonical_email_list($self->{comment_cc});
 
     # Initialise the feedback field to empty.
     $self->{feedback} = "";
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Http/Render.pm codestriker/lib/Codestriker/Http/Render.pm
--- codestriker-1.7.7/lib/Codestriker/Http/Render.pm	Wed Oct 15 06:45:01 2003
+++ codestriker/lib/Codestriker/Http/Render.pm	Sat Jan  3 22:46:04 2004
@@ -762,6 +762,8 @@
     } else {
 	$self->_coloured_mode_finish();
     }
+
+    $self->_print_legend();
 }
 
 # Start topic view display hook for normal mode.
@@ -776,16 +778,13 @@
     print "</PRE>\n";
 }
 
-# Start topic view display hook for coloured mode.  This displays a simple
-# legend, displays the files involved in the review, and opens up the initial
-# table.
-sub _coloured_mode_start($) {
+# Private functon to print the diff legend out at the bottom of the topic text page.
+sub _print_legend($) {
     my ($self) = @_;
 
     my $query = $self->{query};
     my $topic = $self->{topic};
     my $mode = $self->{mode};
-    my $brmode = $self->{brmode};
 
     print $query->start_table({-cellspacing=>'0', -cellpadding=>'0',
 			       -border=>'0'}), "\n";
@@ -801,6 +800,19 @@
 		     $query->td({-class=>'af'},
 				"Added"));
     print $query->end_table(), "\n";
+}
+
+
+# Start topic view display hook for coloured mode.  This displays a simple
+# legend, displays the files involved in the review, and opens up the initial
+# table.
+sub _coloured_mode_start($) {
+    my ($self) = @_;
+
+    my $query = $self->{query};
+    my $topic = $self->{topic};
+    my $mode = $self->{mode};
+    my $brmode = $self->{brmode};
 
     # Print out the "table of contents".
     my $filenames = $self->{filenames_ref};
@@ -810,15 +822,14 @@
     print $query->p;
     print $query->start_table({-cellspacing=>'0', -cellpadding=>'0',
 			       -border=>'0'}), "\n";
-    print $query->Tr($query->td($query->a({name=>"contents"}, "Contents:")),
+    print $query->Tr($query->td($query->a({name=>"contents"}, "Files In Topic:")),
 		     $query->td("&nbsp;")), "\n";
     
     my $url_builder = $self->{url_builder};
     for (my $i = 0; $i <= $#$filenames; $i++) {
 	my $filename = $$filenames[$i];
 	my $revision = $$revisions[$i];
-	my $href_filename =
-	    $url_builder->view_url($topic, -1, $mode, $brmode) .
+	my $href_filename = $url_builder->view_url($topic, -1, $mode, $brmode) .
 	    "#" . "$filename";
 	my $tddata = $$binaries[$i] ? $filename :
 	    $query->a({href=>"$href_filename"}, "$filename");
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Http/Response.pm codestriker/lib/Codestriker/Http/Response.pm
--- codestriker-1.7.7/lib/Codestriker/Http/Response.pm	Sun May 25 04:09:37 2003
+++ codestriker/lib/Codestriker/Http/Response.pm	Sun Nov 16 19:34:03 2003
@@ -160,6 +160,9 @@
     # As the old netscapes don't handle it properly.
     my $base_url = $query->url();
     my $jscript=<<END;
+    <script language="JavaScript" type="text/javascript">
+    <!-- Hide script
+    //<![CDATA[
     var windowHandle = '';
 
     function myOpen(url,name) {
@@ -193,9 +196,14 @@
 	if (reload) opener.location.reload(reload);
 	opener.focus();
     }
+
+    //]]> End script hiding -->
+    </script>
 END
 
-    print $query->start_html(-dtd=>'-//W3C//DTD HTML 3.2 Final//EN',
+# "http://www.w3.org/TR/html4/strict.dtd"
+
+    print $query->start_html(-dtd=>'-//W3C//DTD HTML 4.01 Transitional//EN',
 			     -charset=>'ISO-8859-1',
 			     -title=>"$title",
 			     -bgcolor=>"#eeeeee",
@@ -203,8 +211,9 @@
 			     -base=>$query->url(),
 			     -link=>'blue',
 			     -vlink=>'purple',
-			     -script=>$jscript,
 			     -onLoad=>"gotoAnchor('$load_anchor', $reload)");
+
+    print $jscript;
 
     # Write a comment indicating if this was compressed or not.
     $self->{output_compressed} = $output_compressed;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Http/Template.pm codestriker/lib/Codestriker/Http/Template.pm
--- codestriker-1.7.7/lib/Codestriker/Http/Template.pm	Sat May 24 23:31:07 2003
+++ codestriker/lib/Codestriker/Http/Template.pm	Mon Oct 27 21:34:51 2003
@@ -56,6 +56,47 @@
 # variable does the trick.
 sub process($$) {
     my ($self, $vars) = @_;
+
+    # Add into the vars the standard .conf file options. 	
+
+    # Indicate if the "delete" button should be visible or not.
+    $vars->{'delete_enabled'} = $Codestriker::allow_delete;
+
+    # Indicate if the "list/search" functionality is available or not.
+    $vars->{'searchlist_enabled'} = $Codestriker::allow_searchlist;
+
+    # Indicate if the "project" functionality is available or not.
+    $vars->{'projects_enabled'} = $Codestriker::allow_projects;
+
+    # Indicate if bug db integration is enabled.
+    $vars->{'bugdb_enabled'} = ($Codestriker::bug_db ne "") ? 1 : 0;
+
+    # CodeStriker Version, used in the title.
+    $vars->{'version'} = $Codestriker::VERSION;
+
+    $vars->{'main_title'} = $Codestriker::title;
+
+    # Indicate if the repository field should be displayed.
+    $vars->{'allow_repositories'} = $Codestriker::allow_repositories;
+
+    # Display the topic size limit if any.
+    $vars->{'maximum_topic_size_lines'} = $Codestriker::maximum_topic_size_lines eq "" ? 
+                                          0 : 
+                                          $Codestriker::maximum_topic_size_lines;
+                                          
+    $vars->{'suggested_topic_size_lines'} = $Codestriker::suggested_topic_size_lines eq "" ? 
+                                          0 : 
+                                          $Codestriker::suggested_topic_size_lines;
+
+
+    my $query = new CGI;
+    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
+
+    # Handle the links and parameters in the main title bar.
+    $vars->{'create_topic_url'} = $url_builder->create_topic_url();
+    $vars->{'search_url'} = $url_builder->search_url();
+    $vars->{'doc_url'} = $url_builder->doc_url();
+    $vars->{'create_topic_url'} = $url_builder->create_topic_url();
 
     my $data;
     my $rc = $self->{template}->process($self->{name} . ".html.tmpl",
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Http/UrlBuilder.pm codestriker/lib/Codestriker/Http/UrlBuilder.pm
--- codestriker-1.7.7/lib/Codestriker/Http/UrlBuilder.pm	Wed Oct 15 07:09:07 2003
+++ codestriker/lib/Codestriker/Http/UrlBuilder.pm	Sat Jan  3 22:58:27 2004
@@ -164,5 +164,25 @@
 
     return $self->{query}->url() . "?action=list_comments&topic=$topic";
 }
+
+sub view_topicinfo_url ($$) {
+    my ($self, $topic) = @_;
+
+    return $self->{query}->url() . "?action=viewinfo&topic=$topic";
+}
+
+sub metric_report_url {
+    my ($self) = @_;
+
+    return $self->{query}->url() . "?action=metrics_report";
+}
+
+sub metric_report_download_raw_data {
+    my ($self) = @_;
+
+    return $self->{query}->url() . "?action=metrics_download";
+}
+
+
 
 1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Model/Comment.pm codestriker/lib/Codestriker/Model/Comment.pm
--- codestriker-1.7.7/lib/Codestriker/Model/Comment.pm	Wed Oct  8 05:49:56 2003
+++ codestriker/lib/Codestriker/Model/Comment.pm	Sat Jan  3 23:06:08 2004
@@ -13,11 +13,30 @@
 
 use Codestriker::DB::DBI;
 
+sub new {
+    my $class = shift;
+    my $self = {};
+    
+    $self->{topicid} = 0;
+    $self->{fileline} = 0;
+    $self->{filenumber} = 0;
+    $self->{filenew} = 0;
+    $self->{author} = '';
+    $self->{data} = '';
+    $self->{date} = Codestriker->get_timestamp(time);
+    $self->{state} = 0;
+    $self->{version} = 0;
+    
+    bless $self, $class;
+    return $self;
+}
+
 # Create a new comment with all of the specified properties.  Ensure that the
 # associated commentstate record is created/updated.
 sub create($$$$$$$$$) {
-    my ($type, $topicid, $fileline, $filenumber, $filenew, $email, $data,
-	$timestamp, $state) = @_;
+    my ($self, $topicid, $fileline, $filenumber, $filenew, $author, $data, $state) = @_;
+            
+    my $timestamp = Codestriker->get_timestamp(time);
     
     # Obtain a database connection.
     my $dbh = Codestriker::DB::DBI->get_connection();
@@ -87,11 +106,32 @@
 
 	# Create the comment row.
 	$success &&= $insert_comment->execute($commentstateid, $data,
-					      $email, $timestamp);
+					      $author, $timestamp);
 	$success &&= $insert_comment->finish();
-
     }
 
+    $self->{topicid} =  $topicid;
+    $self->{fileline} = $fileline;
+    $self->{filenumber} = $filenumber;
+    $self->{filenew} = $filenew;
+    $self->{author} = $author;
+    $self->{data} = $data;
+    $self->{date} = $timestamp;
+    $self->{state} = $state;
+    $self->{version} = 0;
+        
+    # get the filename, for the new comment.
+    my $get_filename = $dbh->prepare_cached('SELECT filename ' .
+	   	                'FROM file ' .
+			        'WHERE topicid = ? AND sequence = ?');
+    $success &&= defined $get_filename;
+    $success &&= $get_filename->execute($topicid, $filenumber);
+                
+    ( $self->{filename} ) = $get_filename->fetchrow_array();
+    
+    $select_commentstate = undef;
+    $get_filename = undef;
+
     Codestriker::DB::DBI->release_connection($dbh, $success);
     die $dbh->errstr if !$success;
 }
@@ -134,8 +174,9 @@
     return @results;   
 }
 
-# Return all of the comments made for a specified topic.
-sub read($$) {
+# Return all of the comments made for a specified topic. This should only be called be called by the 
+# Topic object.
+sub read_all_comments_for_topic($$) {
     my ($type, $topicid) = @_;
 
     # Obtain a database connection.
@@ -172,7 +213,8 @@
     if ($success) {
 	my @data;
 	while (@data = $select_comment->fetchrow_array()) {
-	    my $comment = {};
+	    my $comment = Codestriker::Model::Comment->new();
+	    $comment->{topicid} =  $topicid;            
 	    $comment->{data} = $data[0];
 	    $comment->{author} = $data[1];
 	    $comment->{fileline} = $data[2];
@@ -193,46 +235,13 @@
     return @results;
 }
 
-# Returns a list of comments that are against the same line of the same
-# file.
-sub read_same_line
-{
-    my ($type,$topicid, $fn, $line, $new) = @_;
-    
-    # Read all of the comments from the database. 
-    my @comments = $type->read($topicid);
-
-    # Now filter out comments that don't match file, line, and new or old file attribute.
-    @comments = grep { 
-        my $comment = $_;
-        my $keep_comment = 0;
-        
-        if ( $fn   == $comment->{filenumber} && 
-             $line == $comment->{fileline} && 
-             $new  == $comment->{filenew})
-        {
-    	    $keep_comment = 1;
-        }
-        else
-        {
-            $keep_comment = 0;
-        }
-        
-        $keep_comment;      
-    } @comments;
-    
-    return @comments;
-    
-}
-
 # Return all of the comments made for a specified topic filtered by state 
 # and author. The filtered parameter is not used if it is empty.
-sub read_filtered
-{
+sub read_filtered($$$$) {
     my ($type, $topicid, $filtered_by_state_index, $filtered_by_author) = @_;
     
     # Read all of the comments from the database. 
-    my @comments = $type->read( $topicid );
+    my @comments = $type->read_all_comments_for_topic($topicid);
 
     # Now filter out comments that don't match the comment state and author filter.
     @comments = grep { 
@@ -243,19 +252,15 @@
         $keep_comment = 0 if ( $filtered_by_state_index ne ""  && 
                                $filtered_by_state_index ne $comment->{state} );
         
-        # check for filters via the comment author name.
-        if ($Codestriker::antispam_email) {
-            my $shortAuthor = 
-            		Codestriker->make_antispam_email( $comment->{author} );
-            my $shortFilterAuthor = 
-            		Codestriker->make_antispam_email( $filtered_by_author );
-            $keep_comment = 0 if ( $filtered_by_author ne "" && 
-                                   $shortAuthor ne $shortFilterAuthor);                                   
-        }
-        else {
-            $keep_comment = 0 if ( $filtered_by_author ne "" && 
-                                  $comment->{author} ne $filtered_by_author);
-        }                                                                     
+        # check for filters via the comment author name, handle email SPAM filtering.
+        my $filteredAuthor = 
+            	    Codestriker->filter_email($comment->{author});
+        my $filteredByAuthor = 
+            	    Codestriker->filter_email($filtered_by_author);
+
+        $keep_comment = 0 if ( $filteredByAuthor ne "" && 
+                               $filteredAuthor ne $filteredByAuthor);                                   
+
  	$keep_comment;
     } @comments;
     
@@ -264,13 +269,14 @@
 
 # Update the state of the specified commentstate.  The version parameter
 # indicates what version of the commentstate the user was operating on.
-sub change_state($$$$$$$) {
-    my ($type, $topicid, $fileline, $filenumber, $filenew,
-	$stateid, $version) = @_;
+sub change_state($$) {
+    my ($self, $new_stateid, $version) = @_;
 
     # Obtain a database connection.
     my $dbh = Codestriker::DB::DBI->get_connection();
 
+    my $timestamp = Codestriker->get_timestamp(time);   
+
     # Check that the version reflects the current version in the DB.
     my $select_comments =
 	$dbh->prepare_cached('SELECT version, state FROM commentstate ' .
@@ -285,8 +291,10 @@
     my $rc = $Codestriker::OK;
 
     # Retrieve the current comment data.
-    $success &&= $select_comments->execute($topicid, $fileline, $filenumber,
-					   $filenew);
+    $success &&= $select_comments->execute($self->{topicid}, 
+     				           $self->{fileline},
+                                           $self->{filenumber},
+					   $self->{filenew});
 
     # Make sure that the topic still exists, and is therefore valid.
     my ($current_version, $current_stateid);
@@ -300,20 +308,44 @@
     $success &&= $select_comments->finish();
 
     # Check the version number.
-    if ($success && $version != $current_version) {
+    if ($success && $version != $self->{version}) {
 	$success = 0;
 	$rc = $Codestriker::STALE_VERSION;
     }
 
     # If the state hasn't changed, don't do anything, otherwise update the
     # comments.
-    if ($stateid != $current_stateid) {
-	$success &&= $update_comments->execute($version+1, $stateid,
-					       $topicid, $fileline,
-					       $filenumber, $filenew);
+    if ($new_stateid != $self->{state}) {
+    	$self->{version} = $self->{version} + 1;
+        $self->{state} = $new_stateid;
+	$success &&= $update_comments->execute($self->{version} ,
+ 					       $self->{state},
+					       $self->{topicid}, 
+                                               $self->{fileline},
+					       $self->{filenumber}, 
+                                               $self->{filenew});
     }
+    
     Codestriker::DB::DBI->release_connection($dbh, $success);
+    
     return $rc;
 }
+
+# Class method to convert state name to state id, returns -1 if the
+# state name is invalid.
+sub convert_state_to_stateid {
+    my ($comment_state) = @_;
+    
+    # Map the state name to its number.
+    my $stateid = -1;
+    my $id;
+    for ($id = 0; $id <= $#Codestriker::comment_states; $id++) {
+	last if ($Codestriker::comment_states[$id] eq $comment_state);
+    }
+    if ($id <= $#Codestriker::comment_states) {
+	$stateid = $id;
+    }
+}    
+
 
 1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Model/MetricStats.pm codestriker/lib/Codestriker/Model/MetricStats.pm
--- codestriker-1.7.7/lib/Codestriker/Model/MetricStats.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/Model/MetricStats.pm	Sat Jan  3 22:29:52 2004
@@ -0,0 +1,524 @@
+###############################################################################
+# Codestriker: Copyright (c) 2003 Jason Remillard.  All rights reserved.
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Model object for handling metrics reports. This object is not an object, it
+# is a normal module.
+
+package Codestriker::Model::MetricStats;
+
+use strict;
+use warnings;
+
+use Codestriker::DB::DBI;
+
+# returns the list of users have participated in a code striker topics.
+#
+# 
+# returns a collection of the following hash references
+# {
+#   name
+#   date_last_authored
+#   date_last_participated
+#   total_topics
+# }
+
+sub get_basic_user_metrics {
+    my $last_n_days = 16*7;
+
+    my $date = Codestriker->get_timestamp(time-($last_n_days*24*60*60));
+
+    # Obtain a database connection.
+    my $dbh = Codestriker::DB::DBI->get_connection();
+
+    # get the list of authors.
+    my $author_list  = $dbh->selectall_arrayref(
+	    'select author,max(modified_ts),count(id)
+	     from topic 
+	     where modified_ts >= ?
+	     group by author
+	     order by 2 desc', {}, $date);
+
+    my @users_metrics;
+
+    foreach my $row (@$author_list) {
+	my ($name, $date, $count) = @$row;
+
+	my $metrics = 
+	{
+	    name=>$name,
+	    date_last_authored=>Codestriker->format_date_timestamp($date),
+	    date_last_participated=>'',
+	    total_topics=>$count
+	};
+
+	push( @users_metrics, $metrics);
+    }
+ 
+    # get the list of participants
+    my $participant_list  = $dbh->selectall_arrayref(
+	    'select comment.author, max(topic.modified_ts), count( distinct topic.id)
+	     from comment, commentstate, topic 
+	     where topic.modified_ts >= ? and 
+		   topic.id = commentstate.topicid and 
+		   topic.author <> comment.author and
+		   comment.commentstateid = commentstate.id
+	     group by comment.author
+	     order by 2 desc',{}, $date);
+     
+    foreach my $row (@$participant_list) {
+	my ($name, $date, $count) = @$row;
+
+	my $found = 0;
+	foreach my $user (@users_metrics) {
+	    if ( $user->{name} eq $name) {
+		$user->{date_last_participated} = 
+		    Codestriker->format_date_timestamp($date);
+		$user->{total_topics} += $count;
+		$found = 1;
+	    }
+	}
+
+	if ( $found == 0) {
+	    my $metrics = 
+	    {
+		name=>$name,
+		date_last_authored=>'',
+		date_last_participated=>Codestriker->format_date_timestamp($date),
+		total_topics=>$count
+	    };
+
+	    push( @users_metrics, $metrics);
+	}
+    }
+
+    return @users_metrics;
+}
+
+
+# Returns a list of all the topic ids in the database.
+sub get_topic_ids {
+    # Obtain a database connection.
+    my $dbh = Codestriker::DB::DBI->get_connection();
+
+    # get the list of authors.
+    my $topicid_list  = $dbh->selectall_arrayref(
+	    'select id from topic order by creation_ts');
+
+    return @$topicid_list;
+
+}
+
+# Returns in a hash the column names for the raw metric download feature.
+sub get_download_headers {
+    # Obtain a database connection.
+    my $dbh = Codestriker::DB::DBI->get_connection();
+
+    my @base_headers = qw(
+	id
+	author
+	title
+	state
+	creation
+	project	
+	);
+
+    # comment counts
+    my $comment_states  = $dbh->selectall_arrayref(
+	    'select distinct state 
+	     from commentstate 
+	     order by state
+	    ');
+
+
+    my $comment_state_count = scalar(@Codestriker::comment_states);
+
+    # states in db may be larger than current configuration.
+    if ( @$comment_states > 0 && $comment_states->[-1]->[0] >= $comment_state_count) {
+	$comment_state_count = ($comment_states->[-1]->[0])+1;
+    }
+
+    my @state_headers;
+
+    for(my $state = 0; $state < $comment_state_count; ++$state) {
+	if ($state < @Codestriker::comment_states) {
+	    push @state_headers, $Codestriker::comment_states[$state];
+	} 
+	else {
+	    push @state_headers, $state;
+	}
+    }
+
+    my @topic_metric_headers;
+
+    # topic metrics counts
+    my $topic_metrics  = $dbh->selectall_arrayref(
+	    'select distinct metric_name 
+	     from topic_metric
+	     order by metric_name
+	    ');
+
+    foreach my $metric (@$topic_metrics) {
+	push @topic_metric_headers, $metric->[0];
+    }
+
+    my @topic_user_metric_headers;
+
+    # user topic metrics counts
+    my $user_topic_metrics  = $dbh->selectall_arrayref(
+	    'select distinct metric_name 
+	     from topic_user_metric
+	     order by metric_name
+	    ');
+
+    foreach my $metric (@$user_topic_metrics) {
+	push @topic_user_metric_headers, $metric->[0];
+    }
+    
+    my $headers = 
+    {
+	base=>\@base_headers,
+	state=>\@state_headers,
+	topic=>\@topic_metric_headers,
+	user=>\@topic_user_metric_headers
+    };
+
+    return $headers;
+}
+
+# Given a topic id, and a header hash, return an list with all of the topics metric data returned
+# in the order given by the header information.
+sub get_raw_metric_data {
+    my ($topicid, $headers) = @_;
+
+    # Obtain a database connection.
+    my $dbh = Codestriker::DB::DBI->get_connection();
+
+    my @basic_topic_info = $dbh->selectrow_array('
+	    select topic.id, topic.author, topic.title, topic.state, topic.creation_ts, project.name 
+	    from topic, project
+	    where topic.id = ? and topic.projectid = project.id',{}, $topicid);
+
+
+    if ($basic_topic_info[3] < @Codestriker::topic_states) {
+	$basic_topic_info[3] = @Codestriker::topic_states[$basic_topic_info[3]];
+    }
+
+    $basic_topic_info[4] = Codestriker->format_date_timestamp($basic_topic_info[4]);
+
+    my @row;
+
+    push @row,@basic_topic_info;
+
+    # get comment state counts.
+
+    # comment counts
+    my $comment_states  = $dbh->selectall_arrayref(
+	    'select state, count(id)
+	     from commentstate 
+	     where topicid = ?
+	     group by state
+	    ',{}, $topicid);
+    
+    for (my $commentindex = 0; 
+	 $commentindex < scalar(@{$headers->{state}}); 
+	 ++$commentindex) {
+	my $count = 0;
+
+	foreach my $row ( @$comment_states ) {
+	    $count = $row->[1] if ($row->[0] == $commentindex);
+	}
+
+	push @row, $count;
+    } 
+
+
+    # topic metrics
+    my $topic_metrics = $dbh->selectall_arrayref(
+	    'select metric_name, sum(value)
+	     from topic_metric 
+	     where topicid = ?
+	     group by metric_name
+	    ',{}, $topicid);
+    
+    for (my $index = 0; $index < scalar(@{$headers->{topic}}); ++$index) {
+	my $count = 0;
+
+	foreach my $row ( @$topic_metrics ) {
+	    $count = $row->[1] if ($row->[0] eq $headers->{topic}->[$index]);
+	}
+
+	push @row, $count;
+    } 
+
+    # use metrics
+    my $user_metrics = $dbh->selectall_arrayref(
+	    'select metric_name, sum(value)
+	     from topic_user_metric 
+	     where topicid = ?
+	     group by metric_name
+	    ',{}, $topicid);
+    
+    for (my $index = 0; $index < scalar(@{$headers->{user}}); ++$index) {
+	my $count = 0;
+
+	foreach my $row ( @$user_metrics ) {
+	    $count = $row->[1] if ($row->[0] eq $headers->{user}->[$index]);
+	}
+
+	push @row, $count;
+    } 
+
+    return @row;
+}
+
+# Returns 12 months of data with a break down of comment types.
+#
+# returns a collection of the following hash references
+# {
+#   name  = the metric name
+#   counts = array ref to metric counts per month
+#   monthnames = array ref to month names
+# }
+
+sub get_comment_metrics {
+    my $query = 
+	'select commentstate.state, count(commentstate.id) 
+	from commentstate
+	where commentstate.creation_ts >  ? and
+   	      commentstate.creation_ts <= ?
+	group by commentstate.state
+	order by commentstate.state';
+
+    my @metrics = _get_monthly_metrics(12, $query);
+
+    foreach my $metric (@metrics) {
+	if ( $metric->{name} < @Codestriker::comment_states) {
+	    $metric->{name} = $Codestriker::comment_states[$metric->{name}];
+	}
+    }
+
+    # get total
+    my @total = _get_monthly_metrics(12,
+	'select \'Total Comments\', count(commentstate.id) 
+	from commentstate
+	where commentstate.creation_ts >  ? and
+	      commentstate.creation_ts <= ?');
+
+    push @metrics, @total;
+
+    return @metrics;
+}
+
+# Returns 12 months of data with a break down topic metrics
+#
+# returns a collection of the following hash references
+# {
+#   name  = the metric name
+#   counts = array ref to metric counts per month
+#   monthnames = array ref to month names
+# }
+
+sub get_topic_metrics {
+    my @metrics;
+
+    # get total
+    my @total = _get_monthly_metrics(12,
+	'select \'Total Topics\', count(topic.id) 
+	from topic
+	where topic.creation_ts >  ? and
+	      topic.creation_ts <= ?');
+
+    push @metrics, @total;
+
+    # get totals for the topic metrics
+    @total = _get_monthly_metrics(12,
+	'select topic_metric.metric_name, sum(topic_metric.value) 
+	from topic_metric,topic
+	where topic.creation_ts >  ? and
+	      topic.creation_ts <= ? and 
+	      topic_metric.topicid = topic.id
+	      group by topic_metric.metric_name
+	      order by topic_metric.metric_name');
+
+    push @metrics, @total;
+
+    # get totals for the topic metrics
+    @total = _get_monthly_metrics(12,
+	'select topic_user_metric.metric_name, sum(topic_user_metric.value) 
+	from topic_user_metric,topic
+	where topic.creation_ts >  ? and
+	      topic.creation_ts <= ? and 
+	      topic_user_metric.topicid = topic.id
+	      group by topic_user_metric.metric_name
+	      order by topic_user_metric.metric_name');
+
+    push @metrics, @total;
+
+
+    return @metrics;
+}
+
+
+# Returns $total_months of data for the given query. The query must return
+# name, count collection of rows between two times.
+#
+# returns a collection of the following hash references
+# {
+#   name  = the metric name
+#   counts = array ref to metric counts per month
+#   monthnames = array ref to month names
+# }
+
+sub _get_monthly_metrics {
+    my ($total_months, $dbi_query_string) = @_;
+
+    # Obtain a database connection.
+    my $dbh = Codestriker::DB::DBI->get_connection();
+
+    my @month_dbi_times = _dbi_month_time_stamp($total_months);
+    my @month_names     = _user_month_name_list($total_months);
+
+    my @metrics;
+
+    # for the past year, get the metrics counts for each month. 
+    for (my $month_count =0 ; $month_count+1 < @month_dbi_times; ++$month_count) {
+	# do the db query.
+	my $comment_counts = $dbh->selectall_arrayref(
+	    $dbi_query_string,
+	    {}, 
+	    $month_dbi_times[$month_count],
+	    $month_dbi_times[$month_count+1]);
+
+	foreach my $row (@$comment_counts) {
+	    my ($db_metric_name, $db_count) = @$row;
+
+	    my $found = 0;
+
+	    # see if we can find the metric
+	    foreach my $metric (@metrics) {
+		if ($metric->{name} eq $db_metric_name) {
+		    push @{$metric->{counts}}, $db_count;
+		    $found = 1;
+		    last;
+		}
+	    }
+
+	    if ($found == 0) {
+		my $metric = 
+		    {
+		    name=>$db_metric_name,
+		    counts=>[],
+		    monthnames=>\@month_names
+		    };
+
+		# Catch up the collection of counts on any missed months.
+		for( my $missingmonths = 0; 
+		     $missingmonths < $month_count; 
+		     ++$missingmonths) {
+		    push @{$metric->{counts}}, 0;
+		}
+
+		push @{$metric->{counts}}, $db_count;
+
+		push @metrics, $metric;	    
+	    }
+	}
+
+	# add zero's to any metrics not present.
+    	foreach my $metric (@metrics) {
+	    if (@{$metric->{counts}} eq $month_count) {
+		push @{$metric->{counts}}, 0;
+	    }
+	}
+    }
+
+    return @metrics;
+}
+
+# Return a list of dbi time stamp on 1 month bondaries back for n months. This
+# is used to do db queries to get data cut up by month.
+sub _dbi_month_time_stamp {
+    my ($number_months_back) = @_;
+
+    # Get the start time of this month
+
+    my @month = _add_month(-$number_months_back+1,localtime(time()));
+
+    my @month_dbi_ts;
+
+    for (my $count = 0; $count < $number_months_back +1; ++$count) {
+	# Calculate the start of this month dbi string.
+	my $month_start = sprintf("%04d-%02d-1 00:00:00", 
+	    $month[5]+1900,
+	    $month[4]+1);
+
+	push @month_dbi_ts, $month_start;
+
+	@month = _add_month(1, @month);
+    }
+    
+    return @month_dbi_ts; 
+}
+
+# Return a list of user displayable time stampa on 1 month bondaries back for n months. 
+sub _user_month_name_list {
+    my ($number_months_back) = @_;
+
+    # Get the start time of this month
+
+    my @month = _add_month(-$number_months_back+1,localtime(time()));
+
+    my @month_names;
+
+    for (my $count = 0; $count < $number_months_back; ++$count) {
+	my $month_name = $Codestriker::short_months[$month[4]] . " " . ($month[5]+1900);
+	 
+	push @month_names, $month_name;
+
+	@month = _add_month(1, @month);
+    }
+    
+    return @month_names; 
+}
+
+
+# add or substracts count months on to a time array.
+sub _add_month {
+    my ($count,@time) = @_;
+
+    my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = @time;
+    
+    if ($count > 0) {
+	for (my $i = 0; $i < $count; ++$i) {
+	    # Calculate the end of this month dbi string.
+	    ++$mon;
+
+	    if ($mon >= 12) {
+		$mon = 0;
+		++$year;
+    	    }
+	}
+    }
+    elsif ($count < 0) {
+	for (my $i = $count; $i < 0; ++$i) {
+	    # Calculate the end of this month dbi string.
+	    --$mon;
+
+	    if ($mon < 0) {
+		$mon = 11;
+		--$year;
+    	    }
+	}
+    }
+
+    $time[4] = $mon;
+    $time[5] = $year;
+
+    return @time;
+}
+
+
+1;
\ No newline at end of file
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Model/Metrics.pm codestriker/lib/Codestriker/Model/Metrics.pm
--- codestriker-1.7.7/lib/Codestriker/Model/Metrics.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/Model/Metrics.pm	Sat Jan  3 23:06:35 2004
@@ -0,0 +1,511 @@
+###############################################################################
+# Codestriker: Copyright (c) 2003 Jason Remillard.  All rights reserved.
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Model object for handling topic data.
+
+package Codestriker::Model::Metrics;
+
+use strict;
+use warnings;
+
+use Codestriker::DB::DBI;
+use Codestriker::Model::File;
+
+sub new {
+    my ($class, $topicid) = @_;
+
+    my $self = {};
+        
+    $self->{topicmetrics} = undef;
+    $self->{topicid} = $topicid;
+    $self->{usermetrics} = {};
+
+    bless $self, $class;
+   
+    return $self;
+}
+
+# Sets the topic metrics values. The values are passed in as an array. The array
+# must be in the same order returned by get_topic_metric. Metrics that are bad 
+# are silently not stored.
+sub set_topic_metrics {
+    my ($self,@metric_values) = @_;
+
+    my @metrics = $self->get_topic_metrics();
+
+    for (my $index = 0; $index < scalar(@metrics); ++$index) {
+	next if ( $metrics[$index]->{enabled} == 0);
+	die "error: not enough metrics" if (scalar(@metric_values) == 0);
+
+	my $value = shift @metric_values;
+
+	if ( $self->_verify_metric($metrics[$index], $value) eq '' ) {
+	    $metrics[$index]->{value} = $value;
+	}
+    }
+}
+
+# Verifies that all of the topic metrics are well formed and valid. It will
+# return a non-empty string if a problem is found.
+sub verify_topic_metrics {
+    my ($self,@metric_values) = @_;
+
+    my $msg = '';
+
+    my @metrics = $self->get_topic_metrics();
+
+    for (my $index = 0; $index < scalar(@metrics); ++$index) {
+	next if ( $metrics[$index]->{enabled} == 0);
+
+	# disabled values may be in the database (somebody turned off the metrics). 
+	# However, they are not paramters so the index between the paramters and the 
+	# metrics objects will not match.
+	my $value = shift @metric_values;
+
+	$msg .= $self->_verify_metric($metrics[$index], $value);
+    }
+
+    return $msg;
+}
+
+
+# Returns the topic metrics as a collection of references to hashs. The hash that is
+# returned has the same keys as the metrics_schema hash, plus a value key. If the user
+# has not entered a value, it will be set to an empty string.
+sub get_topic_metrics {
+    my $self = shift;
+
+    my @topic_metrics;
+
+    if ( defined($self->{topicmetrics}) ) {
+	#  The topic metrics has already been loaded from the database, just return 
+	# the cached data.
+	@topic_metrics = @{$self->{topicmetrics}};
+    }
+    else {
+	my @stored_metrics = ();
+
+	if ( defined($self->{topicid}) ) {
+	    # Obtain a database connection.
+	    my $dbh = Codestriker::DB::DBI->get_connection();
+
+	    my $select_topic_metrics = 
+		$dbh->prepare_cached('SELECT topic_metric.metric_name, 
+					     topic_metric.value ' .
+				     'FROM topic_metric ' .
+		                     'WHERE topic_metric.topicid = ?');
+						    
+	    $select_topic_metrics->execute($self->{topicid}); 
+
+	    @stored_metrics = @{$select_topic_metrics->fetchall_arrayref()};
+	}
+
+	# Match the configured metrics to the metrics in the database. If 
+	# the configured metric is found in the database, it is removed 
+	# from the stored_metric list to find any data that is in the 
+	# database, but is not configured.
+	foreach my $metric_schema (@Codestriker::metrics_schema) {
+	    if ( $metric_schema->{scope} eq 'topic' ) {
+		my $metric =
+		    { # this is the topic metric  
+		    name        => $metric_schema->{name},
+		    description => $metric_schema->{description},
+		    value       => '',
+		    filter      => $metric_schema->{filter},
+		    enabled     => $metric_schema->{enabled},
+		    in_database => 0
+		    };
+
+		for ( my $index = 0; $index < scalar(@stored_metrics); ++$index) {
+		    my $stored_metric = $stored_metrics[$index];
+
+		    if ( $stored_metric->[0] eq $metric_schema->{name} ) {
+			$metric->{value} = $stored_metric->[1];
+			$metric->{in_database} = 1;
+			splice @stored_metrics, $index,1;
+			last;
+		    }
+		}
+
+		if ($metric_schema->{enabled} || $metric->{in_database}) {
+		    push @topic_metrics, $metric;
+		}
+	    }
+	}
+
+	# Add in any metrics that are in the database but not currently configured.
+	# The system should display the metrics, but not let the user modify them
+	for( my $index = 0; $index < scalar( @stored_metrics); ++$index) {
+	    my $stored_metric = $stored_metrics[$index];
+
+	    my $metric =
+		{ # this is the topic metric  
+		name         => $stored_metric->[0],
+		description  => '',
+		value        => $stored_metric->[1],
+		enabled      => 0, # user can not change the metric, not configured.
+		in_database  => 1
+		};
+
+	    push @topic_metrics, $metric;
+	}
+
+	$self->{topicmetrics} = \@topic_metrics;
+    }
+
+    return @topic_metrics;
+}
+
+# Sets the metrics for a specific user, both authors and reviewers. cc's don't 
+# get metrics. The metrics are sent in as an array, that must in the same 
+# order as the get_user_metric call returns them. Metrics that are bad are 
+# silently not stored.
+sub set_user_metric {
+    my ($self, $user, @metric_values) = @_;
+
+    my @metrics = $self->get_user_metrics($user);
+
+    for (my $index = 0; $index < scalar(@metrics); ++$index) {
+	next if ( $metrics[$index]->{enabled} == 0);
+	die "error: not enough metrics" if (scalar(@metric_values) == 0);
+
+	# disabled values may be in the database (somebody turned off the metrics). 
+	# However, they are not paramters so the index between the paramters and the 
+	# metrics objects will not match.
+	my $value = shift @metric_values;
+
+	if ( $self->_verify_metric($metrics[$index], $value) eq '') {
+	    $metrics[$index]->{value} = $value
+	}
+    }
+}
+
+# Verifies that all of the user metrics are well formed and valid inputs. If a 
+# problem is found the function will return a non-empty string.
+sub verify_user_metrics {
+    my ($self, $user, @metric_values) = @_;
+
+    my $msg = '';
+
+    my @metrics = $self->get_user_metrics($user);
+
+    for (my $index = 0; $index < scalar(@metrics); ++$index) {
+	next if ( $metrics[$index]->{enabled} == 0);
+
+	# disabled values may be in the database (somebody turned off the metrics). 
+	# However, they are not paramters so the index between the paramters and the 
+	# metrics objects will not match.
+	my $value = shift @metric_values;
+
+	$msg .= $self->_verify_metric($metrics[$index], $value);
+    }
+
+    return $msg;
+}
+
+
+# Returns the user metrics as a collection of references to hashs. The hash that is
+# returned has the same keys as the metrics_schema hash, plus a value key. If the user
+# has not entered a value, it will be set to an empty string.
+sub get_user_metrics {
+    my ($self, $username) = @_;
+
+    my @user_metrics;
+
+    if ( exists($self->{usermetrics}->{$username}) ) {
+	# If the metrics for this user has already been loaded from the database, 
+	# return the cached result of that load. 
+	@user_metrics = @{$self->{usermetrics}->{$username}};
+    }
+    else {    
+	my @stored_metrics = ();
+
+	if ( defined($self->{topicid}) ) {
+	    # Obtain a database connection.
+	    my $dbh = Codestriker::DB::DBI->get_connection();
+
+
+	    # Get all of the user outputs for this topic regardless of the user.
+	    my $selected_all_user_metrics = 
+		$dbh->prepare_cached('SELECT DISTINCT metric_name ' .
+				     'FROM topic_user_metric ' .
+				     'WHERE topicid = ? ' .
+				     'ORDER BY metric_name');
+	    $selected_all_user_metrics->execute($self->{topicid}); 
+	    @stored_metrics = @{$selected_all_user_metrics->fetchall_arrayref()};
+						    
+
+	    # Get the outputs for this user.
+	    my $select_user_metrics = 
+		$dbh->prepare_cached('SELECT metric_name, value ' .
+				     'FROM topic_user_metric ' .
+				     'WHERE topicid = ? and email = ? ' .
+				     'ORDER BY metric_name');
+						    
+	    $select_user_metrics->execute($self->{topicid}, $username); 
+
+	    my @user_stored_metrics = @{$select_user_metrics->fetchall_arrayref()};
+
+	    # stuff the complete list with the values from the current user list. 
+	    # Handle displaying metrics that are in the db, but not enabled for 
+	    # new topics.
+	    foreach my $metric (@stored_metrics) {
+		my $foundit = 0;
+		foreach my $user_metric (@user_stored_metrics) {
+		    if ($user_metric->[0] eq $metric->[0]) {
+			$foundit = 1;
+			push @$metric, $user_metric->[1];
+			last;
+		    }
+		}
+
+		if ($foundit == 0) {
+		    push @$metric,'';
+		}
+	    }
+
+	}
+
+	foreach my $metric_schema (@Codestriker::metrics_schema) {
+	    if ( $metric_schema->{scope} ne 'topic') {
+		my $metric = 
+		{ 
+		    name        => $metric_schema->{name},
+		    description => $metric_schema->{description},
+		    value       => '',
+		    enabled     => $metric_schema->{enabled},
+		    scope       => $metric_schema->{scope},
+		    filter      => $metric_schema->{filter},
+		};
+
+
+		for ( my $index = 0; $index < scalar(@stored_metrics); ++$index) {
+		    my $stored_metric = $stored_metrics[$index];
+
+		    if ( $stored_metric->[0] eq $metric_schema->{name}) {
+			$metric->{value} = $stored_metric->[1];
+			$metric->{in_database} = 1;
+			splice @stored_metrics, $index,1;
+			last;
+		    }
+		}
+
+		if ($metric_schema->{enabled} || $metric->{in_database}) {
+		    push @user_metrics, $metric;
+		}
+	    }
+	}
+
+	# Clean up any metrics that are in the database but no in the schema, we 
+	# will not let them change them, and we don't have the description anymore.
+	for( my $index = 0; $index < scalar( @stored_metrics); ++$index) {
+	    my $stored_metric = $stored_metrics[$index];
+
+	    my $metric =
+		{ # this is the topic metric  
+		name=>$stored_metric->[0],
+		description=>'',
+		value=>$stored_metric->[1],
+		scope=>'participant',
+		enabled=>0, # user can not change the metric, no schema.
+		in_database=>1
+		};
+
+	    push @user_metrics, $metric;
+	}
+
+	$self->{usermetrics}->{$username} = \@user_metrics;
+    }
+
+    return @user_metrics;
+}
+
+
+# Returns the user metrics as a collection of references to hashs. 
+sub get_user_metrics_totals {
+    my ($self,@users) = @_;
+
+    my @user_metrics;
+
+    if ( exists($self->{usermetrics_totals}) ) {
+	@user_metrics = @$self->{usermetrics_totals};
+    }
+
+    my @total_metrics;
+
+    foreach my $user (@users) {
+	my @metrics = $self->get_user_metrics($user);
+
+	if ( scalar(@total_metrics) == 0 ) {
+	    # copy the metrics in.
+
+	    foreach my $metric (@metrics) {
+		my %temp = %$metric;
+		push @total_metrics, \%temp;
+	    }
+	    
+	}
+	else {
+	    # Add them up!
+	    for( my $index = 0; $index < scalar( @total_metrics) ; ++$index) {
+		if ( $metrics[$index]->{value} ne '') {
+		    if ( $total_metrics[$index]->{value} eq '') {
+			$total_metrics[$index]->{value} = 0;
+		    }
+
+		    $total_metrics[$index]->{value} += $metrics[$index]->{value};		
+		}
+	    }
+	}
+
+    }
+
+    $self->{usermetrics_totals}= \@total_metrics;
+
+    return @total_metrics;
+}
+
+# Returns an error message if a number is not a valid value for a given metric.
+sub _verify_metric {
+    my ($self, $metric, $value) = @_;
+
+    my $msg = '';
+    if ( $metric->{enabled} ) {
+	my $input_ok = 0;
+
+	if ( $metric->{filter} eq "hours") {
+	    $input_ok = ($value =~ /(^[\d]+([\.:][\d]*)?$)|(^$)/);
+	    $msg = $metric->{name} . " must be a valid time in hours. $value was " . 
+	           "not saved.<BR>" unless $input_ok;
+	}
+	elsif ( $metric->{filter} eq "count") {
+	    $input_ok = ($value =~ /(^[\d]+$)|(^$)/);
+	    $msg = $metric->{name} . " must be a valid count. $value was not " . 
+	           "saved.<BR>" unless $input_ok;
+	}
+	elsif ( $metric->{filter} eq "percent") {
+	    $input_ok = ($value =~ /(^[\d]+(\.[\d]*)?$)|(^$)/);
+
+	    if ( $input_ok && $value ne '') {
+		$input_ok = 0 unless ($value >= 0.0 && $value <= 100.0);		
+	    }
+	    $msg = $metric->{name} . " must be a valid percent, between 0 and 100. " . 
+	           "$value was not saved.<BR>" unless $input_ok;
+	}
+	else {
+	    # invalid config.
+	    $input_ok = 0;
+	    $msg = $metric->{name} . " invalid filter type in configuration. Must " . 
+	           "be hours, count, or percent.<BR>";
+	}
+    }
+
+    return $msg;
+}
+
+# Stores all of the metrics to the database.
+sub store {
+    my ($self) = @_;
+
+    $self->_store_topic_metrics();
+
+    $self->_store_user_metrics();
+}
+
+# Stores the topic metrics to the database.
+sub _store_user_metrics {
+    my ($self) = @_;
+
+    foreach my $user ( %{$self->{usermetrics}} ) {
+	$self->get_user_metrics($user);
+    }
+
+    # Obtain a database connection.
+    my $dbh = Codestriker::DB::DBI->get_connection();
+
+    # flush out the user metrics from the topic,
+    my $delete_alluser_metric =
+	$dbh->prepare_cached('DELETE FROM topic_user_metric ' .
+			     'WHERE topicid = ?');
+
+    $delete_alluser_metric->execute($self->{topicid});
+
+    my $insert_user_metric =
+	$dbh->prepare_cached('INSERT INTO topic_user_metric (topicid, 
+						    email, 
+						    metric_name, 
+						    value) ' .
+			     'VALUES (?, ?, ?, ? )');
+
+    foreach my $user (keys %{$self->{usermetrics}} ) {
+	my @metrics = $self->get_user_metrics($user);
+
+	foreach my $metric (@metrics) {
+	    if ($metric->{value} ne '') {
+		$insert_user_metric->execute($self->{topicid}, 
+					     $user, 
+					     $metric->{name}, 
+					     $metric->{value});	    
+	    }
+	}
+    }
+
+}
+
+# Stores the topic metrics to the database.
+sub _store_topic_metrics {
+    my ($self) = @_;
+
+    # Obtain a database connection.
+    my $dbh = Codestriker::DB::DBI->get_connection();
+
+    # Store the topic metrics first.
+    my @topic_metrics = $self->get_topic_metrics();
+
+    my $insert_topic_metric =
+	$dbh->prepare_cached('INSERT INTO topic_metric (topicid, 
+						        metric_name, 
+							value) ' .
+			     'VALUES (?, ?, ? )');
+    my $update_topic_metric =
+	$dbh->prepare_cached('UPDATE topic_metric SET value = ? ' .
+			     'WHERE topicid = ? and metric_name = ?');
+
+    my $delete_topic_metric =
+	$dbh->prepare_cached('DELETE FROM topic_metric ' .
+			     'WHERE topicid = ? and metric_name = ?');
+
+    foreach my $metric (@topic_metrics) {
+	if ( $metric->{in_database} ) {
+
+	    if ( $metric->{value} ne '') {
+		$update_topic_metric->execute($metric->{value} , 
+				    $self->{topicid}, 
+				    $metric->{name} );
+	    }
+	    else {
+		# delete the row.
+		$delete_topic_metric->execute($self->{topicid}, $metric->{name});
+		$metric->{in_database} = 0;
+	    }
+	}
+	else {
+
+	    # new metric that is not in the datbase.
+	    if ( $metric->{value} ne '') {
+		$insert_topic_metric->execute($self->{topicid}, 
+			$metric->{name}, 
+			$metric->{value} );
+		$metric->{in_database} = 1;
+	    }
+	}
+
+	$metric->{in_database} = 1;
+    }
+}
+
+1;
+
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Model/Topic.pm codestriker/lib/Codestriker/Model/Topic.pm
--- codestriker-1.7.7/lib/Codestriker/Model/Topic.pm	Sun Aug 17 09:03:34 2003
+++ codestriker/lib/Codestriker/Model/Topic.pm	Sat Jan  3 23:04:43 2004
@@ -13,13 +13,63 @@
 
 use Codestriker::DB::DBI;
 use Codestriker::Model::File;
+use Codestriker::Model::Metrics;
+
+sub new {
+    my ($class, $topicid) = @_;
+    my $self = {};
+        
+    $self->{topicid} = 0;
+    $self->{author} = "";
+    $self->{title} = "";
+    $self->{bug_ids} = "";
+    $self->{reviewers} = "";
+    $self->{cc} = "";
+    $self->{description} = "";
+    $self->{document} = "";
+    $self->{creation_ts} = "";
+    $self->{modified_ts} = "";
+    $self->{topic_state} = "";
+    $self->{version} = 0;
+    $self->{repository} = "";
+    $self->{project_id} = "";
+    $self->{project_name} = "";
+    $self->{comments} = [];
+    $self->{metrics} = Codestriker::Model::Metrics->new();
+
+    bless $self, $class;
+
+    if ( defined( $topicid)) {
+	$self->read($topicid);
+    }
+   
+    return $self;
+}
 
 # Create a new topic with all of the specified properties.
 sub create($$$$$$$$$$$$) {
-    my ($type, $topicid, $author, $title, $bug_ids, $reviewers, $cc,
-	$description, $document, $timestamp, $repository, $projectid,
+    my ($self, $topicid, $author, $title, $bug_ids, $reviewers, $cc,
+	$description, $document, $repository, $projectid,
 	$deltas_ref) = @_;
 
+    my $timestamp = Codestriker->get_timestamp(time);        
+        
+    $self->{topicid} = $topicid;
+    $self->{author} = $author;
+    $self->{title} = $title;
+    $self->{bug_ids} = $bug_ids;
+    $self->{reviewers} = $reviewers;
+    $self->{cc} = $cc;
+    $self->{description} = $description;
+    $self->{document} = $document;
+    $self->{creation_ts} = $timestamp;
+    $self->{modified_ts} = $timestamp;
+    $self->{topic_state} = 0;
+    $self->{project_id} = $projectid;
+    $self->{version} = 0;
+    $self->{repository} = $repository;
+    $self->{metrics} = Codestriker::Model::Metrics->new($topicid);
+                            
     my @bug_ids = split /, /, $bug_ids;
     my @reviewers = split /, /, $reviewers;
     my @cc = split /, /, $cc;
@@ -81,11 +131,10 @@
 
 # Read the contents of a specific topic, and return the results in the
 # provided reference variables.
-sub read($$\$\$\$\$\$\$\$\$\$\$\$\$\$) {
-    my ($type, $topicid, $author_ref, $title_ref, $bug_ids_ref, $reviewers_ref,
-	$cc_ref, $description_ref, $document_ref, $creation_time_ref,
-	$modified_time_ref, $topic_state_ref, $version_ref,
-	$repository_ref, $project_id_ref, $project_name_ref) = @_;
+sub read($$) {
+    my ($self, $topicid) = @_;
+    
+    $self->{topicid} = $topicid;    
 
     # Obtain a database connection.
     my $dbh = Codestriker::DB::DBI->get_connection();
@@ -111,7 +160,6 @@
 
     my $success = defined $select_topic && defined $select_bugs &&
 	defined $select_participants;
-    my $rc = $Codestriker::OK;
 
     # Retrieve the topic information.
     $success &&= $select_topic->execute($topicid);
@@ -119,6 +167,7 @@
     my ($id, $author, $title, $description, $document, $state,
 	$creationtime, $modifiedtime, $version, $repository,
 	$projectid, $projectname);
+
     if ($success) {
 	($id, $author, $title, $description, $document, $state,
 	 $creationtime, $modifiedtime, $version, $repository,
@@ -128,7 +177,7 @@
 
 	if (!defined $id) {
 	    $success = 0;
-	    $rc = $Codestriker::INVALID_TOPIC;
+	    die("Topic id \"$topicid\" no longer exists.");
 	}
     }
 
@@ -164,34 +213,48 @@
     # Store the data into the referenced variables if the operation was
     # successful.
     if ($success) {
-	$$author_ref = $author;
-	$$title_ref = $title;
-	$$bug_ids_ref = join ', ', @bugs;
-	$$reviewers_ref = join ', ', @reviewers;
-	$$cc_ref = join ', ', @cc;
-	$$description_ref = $description;
-	$$document_ref = $document;
-	$$creation_time_ref = Codestriker->format_timestamp($creationtime);
-	$$modified_time_ref = Codestriker->format_timestamp($modifiedtime);
-	$$topic_state_ref = $Codestriker::topic_states[$state];
-	$$project_id_ref = $projectid;
-	$$project_name_ref = $projectname;
-	$$version_ref = $version;
+	$self->{author} = $author;
+	$self->{title} = $title;
+	$self->{bug_ids} = join ', ', @bugs;
+	$self->{reviewers} = join ', ', @reviewers;
+	$self->{cc} = join ', ', @cc;
+	$self->{description} = $description;
+	$self->{document} = $document;
+	$self->{creation_ts} = $creationtime;
+	$self->{modified_ts} = $modifiedtime;
+	$self->{topic_state} = $Codestriker::topic_states[$state];
+	$self->{project_id} = $projectid;
+	$self->{project_name} = $projectname;
+	$self->{version} = $version;
+        $self->{metrics} = Codestriker::Model::Metrics->new($topicid);
 	
 	# Set the repository to the default system value if it is not defined.
 	if (!defined $repository || $repository eq "") {
-	    $$repository_ref = $Codestriker::default_repository;
+	    $self->{repository} = $Codestriker::default_repository;
 	} else {
-	    $$repository_ref = $repository;
+	    $self->{repository} = $repository;
+	}
 	}
     }
 
-    return $rc;
+# Reads from the db if needed, and returns the list of comments for this topic. If the list of 
+# comments have already been returned, the function will skip the db call, and just return the list
+# from memory. 
+sub read_comments {
+    my ($self) = shift;
+
+    if ( scalar(@{$self->{comments}}) == 0) {
+	my @comments = Codestriker::Model::Comment->read_all_comments_for_topic($self->{topicid});
+    
+	$self->{comments} = \@comments;
+    }
+
+    return @{$self->{comments}};
 }
 
 # Determine if the specified topic id exists in the table or not.
-sub exists($$) {
-    my ($type, $topicid) = @_;
+sub exists($) {
+    my ($topicid) = @_;
 
     # Obtain a database connection.
     my $dbh = Codestriker::DB::DBI->get_connection();
@@ -214,10 +277,46 @@
     return $count;
 }
 
-# Update the state of the specified topic.  The version parameter indicates
-# what version of the topic the user was operating on.
-sub change_state($$$$$) {
-    my ($type, $topicid, $new_state, $modified_ts, $version) = @_;
+# This function returns the metrics objects that are part of the topic.
+sub get_metrics {
+    my ($self) = @_;
+
+    return $self->{metrics};
+}
+
+
+# This function is used to create a new topic id. The function insures 
+# that the new topic id is difficult to guess, and is not taken in the 
+# database already.
+sub create_new_topicid {
+    # For "hysterical" reasons, the topic id is randomly generated.  Seed the
+    # generator based on the time and the pid.  Keep searching until we find
+    # a free topicid.  In 99% of the time, we will get a new one first time.
+    srand(time() ^ ($$ + ($$ << 15)));
+    my $topicid;
+    do {
+	$topicid = int rand(10000000);
+    } while (Codestriker::Model::Topic::exists($topicid));
+    
+    return $topicid;
+}
+
+# Everytime a topic is stored the version number is incremented. When a page is created
+# it includes the version number of the topic used to create the page. The user posts
+# information back to server to change, the version information needs to be checked to 
+# make sure somebody else has not modified the server.
+sub check_for_stale($$) {
+    my ($self, $version) = @_;
+
+    return $self->{version} ne $version;
+}
+
+
+# Update the state of the specified topic. 
+sub change_state($$) {
+    my ($self, $new_state) = @_;
+
+    my $modified_ts = Codestriker->get_timestamp(time);
 
     # Map the new state to its number.
     my $new_stateid;
@@ -237,7 +336,7 @@
     # the same value when updating the record, otherwise it gets set to the
     # current time!
     my $select_topic =
-	$dbh->prepare_cached('SELECT version, state, creation_ts ' .
+	$dbh->prepare_cached('SELECT version, creation_ts ' .
 			     'FROM topic WHERE id = ?');
     my $update_topic =
 	$dbh->prepare_cached('UPDATE topic SET version = ?, state = ?, ' .
@@ -246,13 +345,12 @@
     my $rc = $Codestriker::OK;
 
     # Retrieve the current topic data.
-    $success &&= $select_topic->execute($topicid);
+    $success &&= $select_topic->execute($self->{topicid});
 
     # Make sure that the topic still exists, and is therefore valid.
-    my ($current_version, $current_stateid, $creation_ts);
+    my ($current_version, $creation_ts);
     if ($success && 
-	! (($current_version, $current_stateid, $creation_ts)
-	   = $select_topic->fetchrow_array())) {
+	! (($current_version, $creation_ts) = $select_topic->fetchrow_array())) {
 	# Invalid topic id.
 	$success = 0;
 	$rc = $Codestriker::INVALID_TOPIC;
@@ -260,18 +358,23 @@
     $success &&= $select_topic->finish();
 
     # Check the version number.
-    if ($success && $version != $current_version) {
+    if ($self->{version} != $current_version) {
 	$success = 0;
 	$rc = $Codestriker::STALE_VERSION;
     }
 
     # If the state hasn't changed, don't do anything, otherwise update the
     # topic.
-    if ($new_stateid != $current_stateid) {
-	$success &&= $update_topic->execute($version+1, $new_stateid,
+    if ($new_state ne $self->{topic_state}) {
+    	$self->{version} = $self->{version} + 1;
+	$success &&= $update_topic->execute($self->{version}, $new_stateid,
 					    $creation_ts, $modified_ts,
-					    $topicid);
+					    $self->{topicid});
     }
+    
+    $self->{modified_ts} = $modified_ts;
+    $self->{topic_state} = $new_state;
+    
     Codestriker::DB::DBI->release_connection($dbh, $success);
     return $rc;
 }
@@ -444,8 +547,8 @@
 }
 
 # Delete the specified topic.
-sub delete($$) {
-    my ($type, $topicid) = @_;
+sub delete($) {
+    my ($self) = @_;
 
     # Obtain a database connection.
     my $dbh = Codestriker::DB::DBI->get_connection();
@@ -470,26 +573,35 @@
     my $delete_delta =
 	$dbh->prepare_cached('DELETE FROM delta WHERE topicid = ?');
 
+    my $topic_metrics =
+	$dbh->prepare_cached('DELETE FROM topic_metric WHERE topicid = ?');
+
+    my $user_metrics =
+	$dbh->prepare_cached('DELETE FROM topic_user_metric WHERE topicid = ?');
+
     my $success = defined $delete_topic && defined $delete_comments &&
 	defined $delete_commentstate && defined $select &&
 	defined $delete_file && defined $delete_participant &&
-	defined $delete_topicbug && $delete_delta;
+	defined $delete_topicbug && defined $delete_delta && 
+	defined $topic_metrics && defined $user_metrics;
 
     # Now do the deed.
-    $success &&= $select->execute($topicid);
+    $success &&= $select->execute($self->{topicid});
     if ($success) {
 	while (my ($commentstateid) = $select->fetchrow_array()) {
 	    $success &&= $delete_comments->execute($commentstateid);
 	}
 	$success &&= $select->finish();
     }
-    $success &&= $delete_commentstate->execute($topicid);
-    $success &&= $delete_topic->execute($topicid);
-    $success &&= $delete_comments->execute($topicid);
-    $success &&= $delete_file->execute($topicid);
-    $success &&= $delete_participant->execute($topicid);
-    $success &&= $delete_topicbug->execute($topicid);
-    $success &&= $delete_delta->execute($topicid);
+    $success &&= $delete_commentstate->execute($self->{topicid});
+    $success &&= $delete_topic->execute($self->{topicid});
+    $success &&= $delete_comments->execute($self->{topicid});
+    $success &&= $delete_file->execute($self->{topicid});
+    $success &&= $delete_participant->execute($self->{topicid});
+    $success &&= $delete_topicbug->execute($self->{topicid});
+    $success &&= $delete_delta->execute($self->{topicid});
+    $success &&= $topic_metrics->execute($self->{topicid});
+    $success &&= $user_metrics->execute($self->{topicid});
 
     Codestriker::DB::DBI->release_connection($dbh, $success);
 
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/Smtp/SendEmail.pm codestriker/lib/Codestriker/Smtp/SendEmail.pm
--- codestriker-1.7.7/lib/Codestriker/Smtp/SendEmail.pm	Sat May 24 23:31:07 2003
+++ codestriker/lib/Codestriker/Smtp/SendEmail.pm	Wed Dec 31 19:00:00 1969
@@ -1,78 +0,0 @@
-###############################################################################
-# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
-# sits@users.sourceforge.net
-#
-# This program is free software; you can redistribute it and modify it under
-# the terms of the GPL.
-
-# Methods for sending an email.
-
-package Codestriker::Smtp::SendEmail;
-
-use Net::SMTP;
-use Sys::Hostname;
-use strict;
-
-# If true, just ignore all email requests.
-my $DEVNULL_EMAIL = 0;
-
-use vars qw ( $EMAIL_HR );
-
-# Separator to use in email.
-$EMAIL_HR = "--------------------------------------------------------------";
-
-# Send an email with the specified data.  Return false if the mail can't be
-# successfully delivered, true otherwise.
-sub doit($$$$$$$$$) {
-    my ($type, $new, $topicid, $from, $to, $cc, $bcc, $subject, $body) = @_;
-
-    return 1 if ($DEVNULL_EMAIL);
-    
-    my $smtp = Net::SMTP->new($Codestriker::mailhost);
-    defined $smtp || die "Unable to connect to mail server: $!";
-
-    $smtp->mail($from);
-    $smtp->ok() || die "Couldn't set sender to \"$from\" $!";
-
-    # $to has to be defined.
-    my $recipients = $to;
-    $recipients .= ", $cc" if $cc ne "";
-    $recipients .= ", $bcc" if $bcc ne "";
-    my @receiver = split /, /, $recipients;
-    for (my $i = 0; $i <= $#receiver; $i++) {
-	$smtp->recipient($receiver[$i]);
-	$smtp->ok() || die "Couldn't send email to \"$receiver[$i]\" $!";
-    }
-
-    $smtp->data();
-    $smtp->datasend("From: $from\n");
-    $smtp->datasend("To: $to\n");
-    $smtp->datasend("Cc: $cc\n") if $cc ne "";
-
-    # If the message is new, create the appropriate message id, otherwise
-    # construct a message which refers to the original message.  This will
-    # allow for threading, for those email clients which support it.
-    my $message_id = "<Codestriker-" . hostname() . "-${topicid}>";
-
-    if ($new) {
-	$smtp->datasend("Message-Id: $message_id\n");
-    } else {
-	$smtp->datasend("References: $message_id\n");
-	$smtp->datasend("In-Reply-To: $message_id\n");
-    }
-
-    $smtp->datasend("Subject: $subject\n");
-
-    # Insert a blank line for the body.
-    $smtp->datasend("\n");
-    $smtp->datasend($body);
-    $smtp->dataend();
-    $smtp->ok() || die "Couldn't send email $!";
-
-    $smtp->quit();
-    $smtp->ok() || die "Couldn't send email $!";
-
-    return 1;
-}
-
-1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/TopicListeners/Bugzilla.pm codestriker/lib/Codestriker/TopicListeners/Bugzilla.pm
--- codestriker-1.7.7/lib/Codestriker/TopicListeners/Bugzilla.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/TopicListeners/Bugzilla.pm	Thu Oct  2 19:25:42 2003
@@ -0,0 +1,97 @@
+###############################################################################
+# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
+# sits@users.sourceforge.net
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Topic Listener for Bugzilla. For now, add all Codestriker comment to 
+# bugzilla as comments.
+
+use strict;
+use warnings;
+
+package Codestriker::TopicListeners::Bugzilla;
+
+use Codestriker::TopicListeners::TopicListener;
+use Codestriker::BugDB::BugDBConnectionFactory;
+
+our @ISA = ("Codestriker::TopicListeners::TopicListener");
+
+sub new {
+    my $type = shift;
+    
+    # TopicListener is parent class.
+    my $self = Codestriker::TopicListeners::TopicListener->new();
+    return bless $self, $type;
+}
+
+sub topic_create($$) { 
+    my ($self,$topic) = @_;
+
+    # If Codestriker is linked to a bug database, and this topic is associated
+    # with some bugs, update them with an appropriate message.
+    if ($topic->{bug_ids} ne "" && $Codestriker::bug_db ne "") {
+	my $query = new CGI;
+        my $url_builder = Codestriker::Http::UrlBuilder->new($query);
+        my $topic_url = $url_builder->view_url_extended($topic->{topicid}, -1, "", "", "",
+                                                            $query->url(), 0);
+        
+	my $bug_db_connection =
+	    Codestriker::BugDB::BugDBConnectionFactory->getBugDBConnection();
+	$bug_db_connection->get_connection();
+	my @ids = split /, /, $topic->{bug_ids};
+        
+	my $text = "Codestriker topic: $topic_url created.\n" .
+	    "Author: $topic->{author}\n" .
+	    "Reviewer(s): $topic->{reviewers}\n" .
+	    "Title: $topic->{title}\n";
+            
+	for (my $i = 0; $i <= $#ids; $i++) {
+	    $bug_db_connection->update_bug($ids[$i], $text);
+	}
+	$bug_db_connection->release_connection();
+    }
+    
+    return '';
+}
+
+sub topic_state_change($$$) {
+    my ($self,$topic,$newstate) = @_;
+
+    # If Codestriker is linked to a bug database, and this topic is associated
+    # with some bugs, update them with an appropriate message.
+    if ($topic->{bug_ids} ne "" && $Codestriker::bug_db ne "") {
+
+	my $query = new CGI;
+        my $url_builder = Codestriker::Http::UrlBuilder->new($query);
+        my $topic_url = $url_builder->view_url_extended($topic->{topicid}, -1, "", "", "",
+                                                            $query->url(), 0);
+ 	my $bug_db_connection =
+	    Codestriker::BugDB::BugDBConnectionFactory->getBugDBConnection();
+	$bug_db_connection->get_connection();
+        
+	my @ids = split /, /, $topic->{bug_ids};
+                                                                    
+	my $text = "Codestriker topic: $topic_url\n" .
+	    "State changed to \"$newstate\" by $topic->{author}\n";
+            
+	for (my $i = 0; $i <= $#ids; $i++) {
+	    $bug_db_connection->update_bug($ids[$i], $text);
+	}
+	$bug_db_connection->release_connection();
+    }
+    
+    return '';
+}
+
+sub topic_delete($$) {
+    my ($self,$topic) = @_;
+    
+    $self->topic_state_change($topic,"Deleted");
+        
+    return '';     
+}
+
+
+1;
\ No newline at end of file
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/TopicListeners/Email.pm codestriker/lib/Codestriker/TopicListeners/Email.pm
--- codestriker-1.7.7/lib/Codestriker/TopicListeners/Email.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/TopicListeners/Email.pm	Sat Jan  3 22:25:58 2004
@@ -0,0 +1,231 @@
+###############################################################################
+# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
+# sits@users.sourceforge.net
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Topic Listeners to do email notification. All email sent from Codestriker
+# is sent from this file when an topic event happens.
+
+use strict;
+use warnings;
+
+package Codestriker::TopicListeners::Email;
+
+use Codestriker::TopicListeners::TopicListener;
+use Net::SMTP;
+use Sys::Hostname;
+
+# Separator to use in email.
+#our $EMAIL_HR = "--------------------------------------------------------------";
+
+# If true, just ignore all email requests.
+my $DEVNULL_EMAIL = 1;
+
+our @ISA = ("Codestriker::TopicListeners::TopicListener");
+
+sub new {
+    my $type = shift;
+    
+    # TopicListener is parent class.
+    my $self = Codestriker::TopicListeners::TopicListener->new();
+    return bless $self, $type;
+}
+
+sub topic_create($$) { 
+    my ($self, $topic) = @_;
+    
+    $self->_send_topic_email($topic,"Created",1);
+
+    return '';
+}
+
+sub comment_create($$$) {
+    my ($self, $topic, $comment) = @_;
+        
+    my $query = new CGI;
+    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
+    
+    # Send an email to the document author and all contributors with the
+    # relevant information.  The person who wrote the comment is indicated
+    # in the "From" field, and is BCCed the email so they retain a copy.
+    my $edit_url = $url_builder->edit_url($comment->{filenumber}, 
+     			$comment->{fileline}, 
+                        $comment->{filenew},
+			$comment->{topicid}, "", "", $query->url());
+
+    # Retrieve the diff hunk for this file and line number.
+    my $delta = Codestriker::Model::File->get_delta(
+                    $comment->{topicid}, 
+                    $comment->{filenumber}, 
+		    $comment->{fileline}, 
+		    $comment->{filenew});
+
+    # Retrieve the comment details for this topic.
+    my @comments = $topic->read_comments();
+
+    my %contributors = ();
+    $contributors{$comment->{author}} = 1;
+    my @cc_recipients;
+    for (my $i = 0; $i <= $#comments; $i++) {
+	if ( $comments[$i]{fileline} == $comment->{fileline} &&
+	     $comments[$i]{filenumber} == $comment->{filenumber} &&
+	     $comments[$i]{filenew} == $comment->{filenew} &&
+	     $comments[$i]{author} ne $topic->{author} &&
+	     ! exists $contributors{$comments[$i]{author}}) {
+	    $contributors{$comments[$i]{author}} = 1;
+	    push(@cc_recipients, $comments[$i]{author});
+	}
+    }
+        
+    push @cc_recipients, (split ',', $comment->{cc});
+       
+    my $from = $comment->{author};
+    my $to = $topic->{author};
+    my $bcc = $comment->{author};
+    my $subject = "[REVIEW] Topic \"$topic->{title}\" comment added by $comment->{author}";
+    my $body =
+	"$comment->{author} added a comment to Topic \"$topic->{title}\".\n\n" .
+	"URL: $edit_url\n\n";
+
+    $body .= "File: " . $delta->{filename} . " line $comment->{fileline}.\n\n";
+
+    $body .= "Context:\n";
+    $body .= "$Codestriker::Smtp::SendEmail::EMAIL_HR\n\n";
+    my $email_context = $Codestriker::EMAIL_CONTEXT;
+    $body .= Codestriker::Http::Render->get_context($comment->{fileline}, 
+						    $email_context, 0,
+						    $delta->{old_linenumber},
+						    $delta->{new_linenumber},
+						    $delta->{text}, 
+						    $comment->{filenew})
+	. "\n";
+    $body .= "$Codestriker::Smtp::SendEmail::EMAIL_HR\n\n";    
+    
+    # Now display the comments that have already been submitted.
+    for (my $i = $#comments; $i >= 0; $i--) {
+	if ($comments[$i]{fileline} == $comment->{fileline} &&
+	    $comments[$i]{filenumber} == $comment->{filenumber} &&
+	    $comments[$i]{filenew} == $comment->{filenew}) {
+	    my $data = $comments[$i]{data};
+
+	    $body .= "$comments[$i]{author} $comments[$i]{date}\n\n$data\n\n";
+	    $body .= "$Codestriker::Smtp::SendEmail::EMAIL_HR\n\n";    
+	}
+    }
+
+    # Send the email notification out, if it is allowed in the config file.
+    if ( $Codestriker::allow_comment_email || $comment->{cc} ne "")
+    {
+	if (!$self->doit(0, $comment->{topicid}, $from, $to,
+			join(',',@cc_recipients), $bcc,
+			$subject, $body)) {
+	    return "Failed to send topic creation email";
+        }
+    }
+    
+    return '';    
+}
+
+# This is a private helper function that is used to send topic emails. Topic 
+# emails include topic creation, state changes, and deletes.
+sub _send_topic_email {
+    my ($self, $topic, $event_name, $include_url) = @_;
+  
+    # Send an email to the document author and all contributors with the
+    # relevant information.  The person who wrote the comment is indicated
+    # in the "From" field, and is BCCed the email so they retain a copy.
+    my $from = $topic->{author};
+    my $to   = $topic->{reviewers};
+    my $bcc =  $topic->{author};
+    my $cc = $topic->{cc};
+    
+    my $query = new CGI;
+    my $url_builder = Codestriker::Http::UrlBuilder->new($query);
+    my $topic_url = $url_builder->view_url_extended($topic->{topicid}, -1, 
+						    "", "", "",
+						    $query->url(), 0);
+    
+    my $subject = "[REVIEW] Topic \"" . $topic->{title} . "\" $event_name\n";
+    my $body =
+	"Topic \"$topic->{title}\" $event_name\n" .
+	"Author: $topic->{author}\n" .
+	(($topic->{bug_ids} ne "") ? "Bug IDs: $topic->{bug_ids}\n" : "") .
+	"Reviewers: $topic->{reviewers}\n" .
+        (($include_url) ? "URL: $topic_url\n\n" : "") .
+	"Description:\n" .
+	"$Codestriker::Smtp::SendEmail::EMAIL_HR\n\n" .
+	"$topic->{description}\n";
+
+    # Send the email notification out.
+    $self->doit(1, $topic->{topicid}, $from, $to, $cc, $bcc,
+		    $subject, $body);
+}
+
+sub comment_state_change($$$) {
+    my ($self, $topic, $comment, $newstate) = @_;
+
+    # Default version of function that does nothing, and allowed the
+    # event to continue.
+    
+    print STDERR  "$comment->{data} for topic $topic->{title} is going to $newstate\n";
+    
+    return '';    
+}
+
+# Send an email with the specified data.  Return false if the mail can't be
+# successfully delivered, true otherwise.
+sub doit($$$$$$$$$) {
+    my ($type, $new, $topicid, $from, $to, $cc, $bcc, $subject, $body) = @_;
+
+    return 1 if ($DEVNULL_EMAIL);
+    
+    my $smtp = Net::SMTP->new($Codestriker::mailhost);
+    defined $smtp || die "Unable to connect to mail server: $!";
+
+    $smtp->mail($from);
+    $smtp->ok() || die "Couldn't set sender to \"$from\" $!";
+
+    # $to has to be defined.
+    my $recipients = $to;
+    $recipients .= ", $cc" if $cc ne "";
+    $recipients .= ", $bcc" if $bcc ne "";
+    my @receiver = split /, /, $recipients;
+    for (my $i = 0; $i <= $#receiver; $i++) {
+	$smtp->recipient($receiver[$i]);
+	$smtp->ok() || die "Couldn't send email to \"$receiver[$i]\" $!";
+    }
+
+    $smtp->data();
+    $smtp->datasend("From: $from\n");
+    $smtp->datasend("To: $to\n");
+    $smtp->datasend("Cc: $cc\n") if $cc ne "";
+
+    # If the message is new, create the appropriate message id, otherwise
+    # construct a message which refers to the original message.  This will
+    # allow for threading, for those email clients which support it.
+    my $message_id = "<Codestriker-" . hostname() . "-${topicid}>";
+
+    if ($new) {
+	$smtp->datasend("Message-Id: $message_id\n");
+    } else {
+	$smtp->datasend("References: $message_id\n");
+	$smtp->datasend("In-Reply-To: $message_id\n");
+    }
+
+    $smtp->datasend("Subject: $subject\n");
+
+    # Insert a blank line for the body.
+    $smtp->datasend("\n");
+    $smtp->datasend($body);
+    $smtp->dataend();
+    $smtp->ok() || die "Couldn't send email $!";
+
+    $smtp->quit();
+    $smtp->ok() || die "Couldn't send email $!";
+
+    return 1;
+}
+
+1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/TopicListeners/Manager.pm codestriker/lib/Codestriker/TopicListeners/Manager.pm
--- codestriker-1.7.7/lib/Codestriker/TopicListeners/Manager.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/TopicListeners/Manager.pm	Thu Oct  2 19:25:42 2003
@@ -0,0 +1,115 @@
+###############################################################################
+# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
+# sits@users.sourceforge.net
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# Object to create and call all of the lister objects.
+
+use strict;
+use warnings;
+
+package Codestriker::TopicListeners::Manager;
+
+use Codestriker::TopicListeners::Email;
+use Codestriker::TopicListeners::Bugzilla;
+
+our @topic_listeners;
+
+sub topic_create { 
+    _create_listeners();
+    
+    # Call all of the topic listeners that are created. If any of the
+    # topic listeners return a non-empty string, it is treated as a 
+    # request to reject the requested state change, and display the 
+    # returned string as the user error message.
+    my $returnValue = '';
+    
+    foreach my $listener (@topic_listeners) {
+       $returnValue .= $listener->topic_create(@_);
+       last if length($returnValue);
+    }
+    
+    return $returnValue;
+}
+
+sub topic_delete {
+    _create_listeners();
+    
+    # Call all of the topic listeners that are created. If any of the
+    # topic listeners return a non-empty string, it is treated as a 
+    # request to reject the requested state change, and display the 
+    # returned string as the user error message.
+    my $returnValue = '';
+    
+    foreach my $listener (@topic_listeners) {
+       $returnValue .= $listener->topic_delete(@_);
+       last if length($returnValue);
+    }
+    
+    return $returnValue;
+}
+
+sub topic_state_change {
+    _create_listeners();
+    
+    # Call all of the topic listeners that are created. If any of the
+    # topic listeners return a non-empty string, it is treated as a 
+    # request to reject the requested state change, and display the 
+    # returned string as the user error message.
+    my $returnValue = '';
+    
+    foreach my $listener (@topic_listeners) {
+       $returnValue .= $listener->topic_state_change(@_);
+       last if length($returnValue);
+    }
+    
+    return $returnValue;
+}
+
+sub comment_create {
+    _create_listeners();
+    
+    # Call all of the topic listeners that are created. If any of the
+    # topic listeners return a non-empty string, it is treated as a 
+    # request to reject the requested state change, and display the 
+    # returned string as the user error message.
+    my $returnValue = '';
+    
+    foreach my $listener (@topic_listeners) {
+       $returnValue .= $listener->comment_create(@_);
+       last if length($returnValue);
+    }
+    
+    return $returnValue;
+}
+
+sub comment_state_change {
+    _create_listeners();
+    
+    # Call all of the topic listeners that are created. If any of the
+    # topic listeners return a non-empty string, it is treated as a 
+    # request to reject the requested state change, and display the 
+    # returned string as the user error message.
+    my $returnValue = '';
+    
+    foreach my $listener (@topic_listeners) {
+       $returnValue .= $listener->comment_state_change(@_);
+       last if length($returnValue);
+    }
+    
+    return $returnValue;
+}
+
+# Private function to create all of the listener objects, and stuff
+# them into module variable @topic_listeners.
+sub _create_listeners {
+   if ( scalar(@topic_listeners) == 0) {
+       push @topic_listeners, Codestriker::TopicListeners::Bugzilla->new();
+       push @topic_listeners, Codestriker::TopicListeners::Email->new();       
+   }
+}
+
+1;
+
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker/TopicListeners/TopicListener.pm codestriker/lib/Codestriker/TopicListeners/TopicListener.pm
--- codestriker-1.7.7/lib/Codestriker/TopicListeners/TopicListener.pm	Wed Dec 31 19:00:00 1969
+++ codestriker/lib/Codestriker/TopicListeners/TopicListener.pm	Sat Jan  3 22:26:19 2004
@@ -0,0 +1,71 @@
+###############################################################################
+# Codestriker: Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
+# sits@users.sourceforge.net
+#
+# This program is free software; you can redistribute it and modify it under
+# the terms of the GPL.
+
+# This is a base class for all of the topic listeners objects. It provides
+# an easy way to see what a listener is expected to implement, and it
+# also provides stub functions for listeners that don't want to handle all of the
+# events. 
+
+package Codestriker::TopicListeners::TopicListener;
+
+use strict;
+use warnings;
+
+sub new {
+    my $type = shift;
+    my $self = {};
+    return bless $self, $type;
+}
+
+sub topic_create($$) { 
+    my ($self, $topic) = @_;
+    
+    # Default version of function that does nothing, and allowed the
+    # event to continue.
+
+    return '';    
+}
+
+sub topic_delete($$) {
+    my ($self, $topic) = @_;
+
+    # Default version of function that does nothing, and allowed the
+    # event to continue.
+        
+    return '';     
+}
+
+sub topic_state_change($$$) {
+    my ($self, $topic, $newstate) = @_;
+
+    # Default version of function that does nothing, and allowed the
+    # event to continue.
+    
+    return '';    
+}
+
+sub comment_create($$$) {
+    my ($self, $topic, $comment) = @_;
+
+    # Default version of function that does nothing, and allowed the
+    # event to continue.
+    
+    return '';    
+}
+
+sub comment_state_change($$$) {
+    my ($self, $topic, $comment, $newstate) = @_;
+
+    # Default version of function that does nothing, and allowed the
+    # event to continue.
+    
+    return '';    
+}
+
+
+1;
+
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/lib/Codestriker.pm codestriker/lib/Codestriker.pm
--- codestriker-1.7.7/lib/Codestriker.pm	Wed Oct 15 06:45:01 2003
+++ codestriker/lib/Codestriker.pm	Sat Jan  3 22:48:17 2004
@@ -21,11 +21,14 @@
 	      $bug_db $bug_db_host $bug_db_name $bug_db_password $bug_db_user
 	      $lxr_map $allow_comment_email $default_topic_br_mode
 	      $allow_delete $allow_searchlist $allow_repositories
-              $allow_projects $antispam_email $VERSION $BASEDIR
+              $allow_projects $antispam_email $VERSION $title $BASEDIR
+	      @metrics_schema
 	      );
 
 # Version of Codestriker.
-$Codestriker::VERSION = "1.7.7";
+$Codestriker::VERSION = "1.8.0 development";
+
+$Codestriker::title = "Codestriker $Codestriker::VERSION";
 
 # The maximum size of a diff file to accept.  At the moment, this is 20Mb.
 $Codestriker::DIFF_SIZE_LIMIT = 20000 * 1024;
@@ -57,13 +60,8 @@
 # Default email context to use.
 $Codestriker::EMAIL_CONTEXT = 8;
 
-# Valid comment states.
+# Valid comment states, the only one that is special is the submitted state.
 $Codestriker::COMMENT_SUBMITTED = 0;
-$Codestriker::COMMENT_INVALID = 1;
-$Codestriker::COMMENT_COMPLETED = 2;
-
-# Textual representations of the above states.
-@Codestriker::comment_states = ("Submitted", "Invalid", "Completed");
 
 # Day strings
 @Codestriker::days = ("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
@@ -81,6 +79,170 @@
 @Codestriker::short_months = ("Jan", "Feb", "Mar", "Apr", "May", "Jun",
 			      "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");
 
+
+
+# name => The short name of the metric. This name will be used in the SQL table, in the data download, and in the input tables.
+#
+# description => The long description of the item. Displayed as online help.
+#
+# enabled=> If 1, the metrics are enabled by default on new installs of codestriker. After 
+#             the system has been configured, it is up to the local admin. 
+#
+# Scope => This will be "topic", "reviewer","author".
+#	    A "topic" metric that has a 1 to 1 relationship with the topic itself.
+#           If it is not a topic metric, it is a kind  of user metric. User metrics 
+#           have a 1-1 relationship with each user in the topic. If the type is 
+#           reviewer, it is only needed by a user that is a reviewer (but not author), 
+#           of the topic. If the type is author, it is only needed by the author of the 
+#           metric, and if it is participants, it is needed by all users regardless 
+#           of the role.
+#
+# filter => The type of data being stored. "hours" or "count". Data will not be stored to 
+#           the database if it does not pass the format expected for the filter type.
+
+@metrics_schema = 
+( 
+  # planning time
+  {
+  name=>"entry time",
+  description=>"Work hours spent by the inspection leader to check that entry conditions are met, and to work towards meeting them",
+  enabled=>0,
+  scope=>"author",
+  filter=>"hours"
+  },
+  {
+  name=>"kickoff time",
+  description=>"Total work hours used per individual for the kickoff meeting and for planning of the kickoff meeting.",
+  scope=>"participant",
+  enabled=>1,
+  filter=>"hours"
+  },
+  {
+  name=>"planning time",
+  description=>"Total work hours used to create the inspection master plan.",
+  scope=>"author",
+  enabled=>0,
+  filter=>"hours"
+  },
+
+  # checking time
+  {
+  name=>"checking time",
+  description=>"The total time spent checking the topic.",
+  scope=>"participant",
+  enabled=>1, 
+  filter=>"hours"
+  },
+  {
+  name=>"lines studied",
+  description=>"The number of lines which have been closly scrutinized at or near optimum checking rate",
+  scope=>"participant",
+  enabled=>0,
+  filter=>"count"
+  },
+  {
+  name=>"lines scanned",
+  description=>"The number of lines which have been looked at higher then the optimum checking rate",
+  scope=>"participant",
+  enabled=>0,
+  filter=>"count"
+  },
+  {
+  name=>"studied time",
+  description=>"The time in hours spent closly scrutinized at or near optimum checking rate",
+  scope=>"participant",
+  enabled=>0,
+  filter=>"hours"
+  },
+  {
+  name=>"scanned time",
+  description=>"The time in hours spent looking at the topic at higher then the optimum checking rate",
+  scope=>"participant",
+  enabled=>0,
+  filter=>"hours"
+  },
+
+  # logging meeting time.
+  {
+  name=>"logging meeting duration",
+  description=>"The wall clock time of the logging meeting.",
+  scope=>"topic",
+  enabled=>1, 
+  filter=>"hours"
+  },
+  {
+  name=>"logging meeting logging duration",
+  description=>"The wall clock time spent reporting issues and searching for new issues.",
+  scope=>"topic",
+  enabled=>0,
+  filter=>"hours"
+  },
+  {
+  name=>"logging meeting discussion duration",
+  description=>"The wall clock time spent not reporting issues and searching for new issues.",
+  scope=>"topic",
+  enabled=>0,
+  filter=>"hours"
+  },
+  {
+  name=>"logging meeting logging time",
+  description=>"The total time spent reporting issues and searching for new issues.",
+  scope=>"participant",
+  enabled=>0,
+  filter=>"hours"
+  },
+  {
+  name=>"logging meeting discussion time",
+  description=>"The total time spent not reporting issues and searching for new issues.",
+  scope=>"participant",
+  enabled=>0,
+  filter=>"hours"
+  },
+  ,
+  {
+  name=>"logging meeting new issues logged",
+  description=>"The total number of issues that were not noted before the meeting and found during the meeting.",
+  scope=>"topic",
+  enabled=>0,
+  filter=>"count"
+  },
+
+  # editing
+
+  {
+  name=>"edit time",
+  description=>"The total time spent editing all items",
+  scope=>"author",
+  enabled=>0,
+  filter=>"hours"
+  },
+  {
+  name=>"follow up time",
+  description=>"The total time spent by the leader to check exit criteria and do exit activities.",
+  scope=>"author",
+  enabled=>0,
+  filter=>"hours"
+  },
+
+  {
+  name=>"exit time",
+  description=>"The total time spent by the leader to check exit criteria and do exit activities.",
+  scope=>"author",
+  enabled=>0,
+  filter=>"hours"
+  },
+
+  {
+  name=>"correct fix rate",
+  description=>"The percentage of edit corrections attempts with correct fix a defect and not introduce new defects.",
+  scope=>"author",
+  enabled=>0,
+  filter=>"percent"
+  },
+
+);
+
+
 # Initialise codestriker, by loading up the configuration file and exporting
 # those values to the rest of the system.
 sub initialise($$) {
@@ -119,8 +281,8 @@
 	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
 	    localtime($time_value);
 	$year += 1900;
-	return sprintf("%02d:%02d:%02d $Codestriker::days[$wday], $mday " .
-		       "$Codestriker::months[$mon], $year",
+	return sprintf("$Codestriker::days[$wday] " .
+		       "$Codestriker::months[$mon] $mday , $year %02d:%02d:%02d ",
 		       $hour, $min, $sec);
     } else {
 	return $timestamp;
@@ -146,6 +308,25 @@
     }
 }
 
+# Given a database formatted timestamp, output it in a short,
+# human-readable date only form.
+sub format_date_timestamp($$) {
+    my ($type, $timestamp) = @_;
+
+    if ($timestamp =~ /(\d\d\d\d)\-(\d\d)\-(\d\d) (\d\d):(\d\d):(\d\d)/ ||
+	$timestamp =~ /(\d\d\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)/) {
+	my $time_value = Time::Local::timelocal($6, $5, $4, $3, $2-1, $1);
+	my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) =
+	    localtime($time_value);
+	$year += 1900;
+	return "$Codestriker::short_days[$wday] $Codestriker::short_months[$mon] $mday, $year";
+		      
+    } else {
+	return $timestamp;
+    }
+}
+
+
 # Given an email string, replace it in a non-SPAM friendly form.
 # sits@users.sf.net -> sits@us...
 sub make_antispam_email($$) {
@@ -155,6 +336,14 @@
     return "$email";
 }
 
-1;
+sub filter_email {
+    my ($type, $email) = @_;
 
+    if ($Codestriker::antispam_email) {
+	$email = $type->make_antispam_email($email);
+    }
 
+    return $email;
+}
+
+1;
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/createproject.html.tmpl codestriker/template/en/default/createproject.html.tmpl
--- codestriker-1.7.7/template/en/default/createproject.html.tmpl	Fri Oct 10 07:30:05 2003
+++ codestriker/template/en/default/createproject.html.tmpl	Tue Oct 28 20:54:17 2003
@@ -1,13 +1,6 @@
 [%# Screen for the create project form. #%]
 
-[% PROCESS header.html.tmpl version = version %]
-
-[%# Show the top-level links for "List projects" and "Search" #%]
-<p>
-    <a href="[% list_projects_url %]">Project list</a> | 
-    <a href="[% search_url %]">Search</a> |
-    <a href="[% doc_url %]/x314.html">Help</a>
-</p>
+[% PROCESS header.html.tmpl version = version help = "x308.html" %]
 
 [%# Display any "feedback" to the user if necessary. #%]
 [% IF feedback != '' %]
@@ -39,6 +32,9 @@
 <INPUT TYPE="submit" NAME=".submit" VALUE="Submit">
 
 </FORM>
+
+<a href="[% list_projects_url %]">Project list</a> 
+
 
 [% PROCESS trailer.html.tmpl %]
 
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/createtopic.html.tmpl codestriker/template/en/default/createtopic.html.tmpl
--- codestriker-1.7.7/template/en/default/createtopic.html.tmpl	Fri Oct 10 07:30:26 2003
+++ codestriker/template/en/default/createtopic.html.tmpl	Sat Nov 15 21:34:47 2003
@@ -1,12 +1,6 @@
 [%# Screen for the create topic form. #%]
 
-[% PROCESS header.html.tmpl version = version %]
-
-[%# Show the top-level links for "Search" and "Help" #%]
-<p>
-    <a href="[% search_url %]">Search</a> |
-    <a href="[% doc_url %]/x338.html">Help</a>
-</p>
+[% PROCESS header.html.tmpl version = version help="x332.html" %]
 
 [%# Display any "feedback" to the user if necessary. #%]
 [% IF feedback != '' %]
@@ -20,7 +14,7 @@
 <P>
 
 <FORM METHOD="POST" ENCTYPE="multipart/form-data">
-<INPUT TYPE="hidden" NAME="action" VALUE="submit_topic">
+<INPUT TYPE="hidden" NAME="action" VALUE="submit_new_topic">
 
 [%# The topic title input field #%]
 Topic title:
@@ -42,7 +36,7 @@
 notification email to all reviewers.
 ')">(What's this?)</A></FONT>
 <BR>
-<TEXTAREA NAME="topic_description" ROWS=6 COLS=70 WRAP="hard">[% topic_description %]</TEXTAREA>
+<TEXTAREA NAME="topic_description" ROWS=12 COLS=80 WRAP="hard">[% topic_description %]</TEXTAREA>
 <P>
 
 <TABLE>
@@ -167,11 +161,6 @@
       </SELECT>
  </TD>
 </TR>
-
-[% ELSE %]
-
-[%# Set the projectid to the default projectid. #%]
-<INPUT TYPE="hidden" NAME="projectid" VALUE="[% projects.0.id %]">
 
 [% END %]
 
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/displaycomments.html.tmpl codestriker/template/en/default/displaycomments.html.tmpl
--- codestriker-1.7.7/template/en/default/displaycomments.html.tmpl	Fri Oct 10 07:30:42 2003
+++ codestriker/template/en/default/displaycomments.html.tmpl	Wed Dec 31 19:00:00 1969
@@ -1,160 +0,0 @@
-[%# Display a list of comments #%]
-
-[% PROCESS header.html.tmpl version = version %]
-
-<SCRIPT language="JavaScript">
-<!-- This function handles the three filter select boxes at the top of the table.
-function SelectFilter(post)
-{
-    var url = '';
-
-    var userSelectionIndex = document.form.filter_comments_author.options.selectedIndex;    
-    if (userSelectionIndex > 0)
-    {
-	var userSelection = document.form.filter_comments_author.options[userSelectionIndex].value;
-    	url = url + '&sauthor=' + userSelection;
-    }
-        
-    var stateIndex = document.form.filter_comments_state.options.selectedIndex;     
-    if ( stateIndex > 0)
-    {
-    	url = url + '&sstate=' + (stateIndex-1);
-    }
-    
-    var contextIndex = document.form.show_context_in_comments.options.selectedIndex;
-    var contextSelection = document.form.show_context_in_comments.options[contextIndex].value;
-    
-    url = url + '&scontext=' + contextSelection;
-    
-    // The filtering url parameters have been build, now a "get" back to the web server
-    // with the updated filter paramters, the ListComments.pm script will refilter then.
-    if (post == 0)
-    {
-    	window.location='[% view_comments_url %]' + url;
-    }
-    else
-    {
-    	window.form.action = '[% view_comments_url %]' + url ;
-        window.form.post();
-    }
-}
-// -->
-</SCRIPT>
-
-[%# Show the top-level link for "Refresh" and "View topic" #%]
-<P>
-<A HREF="[% view_comments_url %]">View all updated comments</A> |
-<A HREF="[% view_topic_url %]">View topic</A> |
-<A HREF="[% doc_url %]/x499.html">Help</A>
-<HR>
-<P>
-
-[%# Display any "feedback" to the user if necessary. #%]
-[% IF feedback != '' %]
-    <font color="red">[% feedback %]</font>
-    <p>
-[% END %]
-
-<FORM METHOD="POST" ENCTYPE="multipart/form-data" name="form" onSubmit="SelectFilter(1)">
-<INPUT TYPE="hidden" NAME="action" VALUE="change_comments">
-<INPUT TYPE="hidden" NAME="topic" VALUE="[% topic %]">
-
-<INPUT TYPE="hidden" NAME="scontext" VALUE="[% scontext %]">
-<INPUT TYPE="hidden" NAME="sauthor" VALUE="[% sauthor %]">
-<INPUT TYPE="hidden" NAME="sstate" VALUE="[% sstate %]">
-
-
-<P><FONT size="5">Comments: &nbsp; &nbsp;</FONT>
-
-Show comments authored by: &nbsp;
-  <SELECT name="filter_comments_author" onChange="SelectFilter(0)">
-     <OPTION value="1"> Everybody     
-     [% FOREACH user = users %]
-     <OPTION value="[% user %]" [% IF sauthor == user %] SELECTED [%END%] >[% user %]
-     [% END %]
-  </SELECT>
-     
-with: 
-  <SELECT name="filter_comments_state" onChange="SelectFilter(0)">
-     <OPTION value="Any" [%IF select_sstate == 0 %] SELECTED [%END%]> Any
-     [% FOREACH state = states %]
-     <OPTION value="[% state %]" [%IF loop.count() == select_sstate %] SELECTED [% END %]>[% state %]
-     [% END %]
-  </SELECT>
-  
-state and
-
-  <SELECT name="show_context_in_comments" onChange="SelectFilter(0)">
-     <OPTION value="0" [%IF scontext == 0 %] SELECTED [% END %]>no context
-     <OPTION value="3" [%IF scontext == 3 %] SELECTED [% END %]>with context 3 lines
-     <OPTION value="6" [%IF scontext == 6 %] SELECTED [% END %]>with context 6 lines
-  </SELECT>
-.
-
-<TABLE CELLPADDING="1" CELLSPACING="3" BORDER="0" WIDTH="100%">
-
-[% last_fileline = -1 %]
-[% last_filenumber = -1 %]
-[% FOREACH comment = comments %]
-[% FLUSH IF loop.count() % 10 == 1 %]
-
-    [% IF comment.fileline != last_fileline ||
-          comment.filenumber != last_filenumber %]
-    <TR CLASS="comments">
-        <TD>
-            <INPUT TYPE="checkbox" NAME="selected_comments" 
-	           VALUE="[%comment.filenumber %],[% comment.fileline %],[% comment.filenew %],[% comment.version %]">
-        </TD>
-	<TD><A NAME="[% comment.anchor %]">[% comment.state %]</A></TD>
-	<TD>
-	    [% IF comment.filename != '' %]
-	       <A HREF="[% comment.view_file %]">[% comment.filename %]:[% comment.fileline %]</A> |
-	       <A HREF="[% comment.view_parallel %]">Parallel</A> |
-	       <A HREF="[% comment.edit_url %]">Add comment</A>
-	    [% ELSE %]
-	       Line: [% comment.line %] |
-	        <A HREF="[% comment.edit_url %]">Add comment</A>
-	    [% END %]
-	</TD>
-    </TR>
-    [% IF comment.context != '' %]
-    <TR CLASS="commentc">
-        <TD></TD><TD COLSPAN="2"><PRE>[% comment.context %]</PRE></TD>
-    </TR>
-    [% END %]
-    [% last_fileline = comment.fileline %]
-    [% last_filenumber = comment.filenumber %]
-
-    [% END %]
-
-    <TR CLASS="commenth">
-        <TD CLASS="commentb">&nbsp;</TD>
-        <TD COLSPAN="2">[% comment.author %]&nbsp;[% comment.date %]</TD>
-    </TR>
-    <TR CLASS="commentb">
-        <TD>&nbsp;</TD><TD COLSPAN="2"><PRE>[% comment.data %]</PRE></TD>
-    </TR>
-
-[% END %]
-
-    <TR CLASS="comments"><TD COLSPAN="3">&nbsp;</TD></TR>
-
-</TABLE>
-
-<P>
-
-Change state: &nbsp;
-  <SELECT name="comment_state">
-     [% FOREACH state = states %]
-     <OPTION value="[% state %]">[% state %]
-     [% END %]
-  </SELECT>
-  <INPUT TYPE="submit" NAME="button" VALUE="Update">
-
-</FORM>
-
-[% PROCESS trailer.html.tmpl %]
-
-</body>
-</html>
-
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/editcomment.html.tmpl codestriker/template/en/default/editcomment.html.tmpl
--- codestriker-1.7.7/template/en/default/editcomment.html.tmpl	Wed Dec 31 19:00:00 1969
+++ codestriker/template/en/default/editcomment.html.tmpl	Fri Dec 19 22:51:11 2003
@@ -0,0 +1,88 @@
+[%# Screen for the create topic form. #%]
+
+<table width="100%" border="0" cellpadding="0" cellspacing="0">
+<tr class="heading">
+  <td valign="bottom"></td>   
+  <td class="heading"><center><a href="[% list_url | uri | html %]" STYLE="text-decoration: none"><font color="black">[% main_title %]</font></a></center></td>
+  <td valign="bottom"><a href="[% doc_url | uri | html %]/x380.html#ADD-COMMENT">Help</a></td>
+</tr>
+</table>
+<HR>
+
+
+<table border=0 rules=groups cellpadding=5% cellspacing=0 width="100%">
+<colgroup span=3>
+<tr class="tlh">
+    <td colspan=4>Topic Title: <b>[% topic_title %]</b>. </td>
+    <td align=right>[% document_creation_time %]</td>
+</tr>
+</table>
+
+<P>
+Enter new comment:
+
+<FORM METHOD="POST"  ENCTYPE="application/x-www-form-urlencoded">
+ <INPUT TYPE="hidden" NAME="action" VALUE="submit_comment">
+ <INPUT TYPE="hidden" NAME="line" VALUE="[% line %]">
+ <INPUT TYPE="hidden" NAME="topic" VALUE="[% topic %]">
+ <INPUT TYPE="hidden" NAME="mode" VALUE="[% mode %]">
+ <INPUT TYPE="hidden" NAME="a" VALUE="[% anchor %]">
+ <INPUT TYPE="hidden" NAME="fn" VALUE="[% fn %]">
+ <INPUT TYPE="hidden" NAME="new" VALUE="[% new %]">
+ <TEXTAREA NAME="comments" ROWS=13 COLS=75 WRAP="hard"></TEXTAREA>
+ <P>
+
+ <TABLE>
+ <TR>
+  <TD>Your email address: </TD>
+  <TD><INPUT TYPE="text" NAME="email" VALUE="[% email %]" SIZE=50 MAXLENGTH=100></TD>
+  <TD></TD>
+ </TR>
+ <TR>
+  <TD>Cc: </TD>
+  <TD><INPUT TYPE="text" NAME="comment_cc"  SIZE=50 MAXLENGTH=150></TD>
+  <TD><INPUT TYPE="submit" NAME="submit" VALUE="Submit" ONCLICK="opener.focus()"></TD>
+ </TR>
+ </TABLE>
+
+ 
+</FORM>
+
+[%# Display a list of comments #%]
+
+<TABLE CELLPADDING="1" CELLSPACING="1" BORDER="0" width="100%">
+[% FOREACH comment = comments %]
+[% FLUSH IF loop.count() % 10 == 1 %]
+
+[% IF loop.count() == 1 %]
+<TR CLASS="comments"><TD><B>Comments:</B></TD></TR>
+<TR CLASS="commentb"><TD>&nbsp;</TD></TR>
+[% END %]
+
+<TR CLASS="commenth">
+<TD>
+[% IF comment.line != '' %]
+<A HREF="[% comment.lineurl %]" NAME="[% comment.linename %]">
+[% comment.line %]</A>
+[% END %]
+
+[% comment.author %]&nbsp;[% comment.date %]
+</TD>
+</TR>
+<TR CLASS="commentb">
+<TD>
+<PRE>[% comment.data %]</PRE></TD>
+</TR>
+[% END %]
+</TABLE>
+
+<hr>
+<P>Context: (<A HREF="[% inc_context_url %]">increase</A> | <A HREF="[% dec_context_url %]">decrease)</A>
+<PRE>[% context %]
+</PRE>
+
+[% PROCESS trailer.html.tmpl %]
+
+</BODY>
+</HTML>
+
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/editproject.html.tmpl codestriker/template/en/default/editproject.html.tmpl
--- codestriker-1.7.7/template/en/default/editproject.html.tmpl	Fri Oct 10 07:30:55 2003
+++ codestriker/template/en/default/editproject.html.tmpl	Tue Oct 28 20:51:41 2003
@@ -1,13 +1,6 @@
 [%# Screen for the edit project form. #%]
 
-[% PROCESS header.html.tmpl version = version %]
-
-[%# Show the top-level links for "List projects" and "Search" #%]
-<p>
-    <a href="[% list_projects_url %]">Project list</a> | 
-    <a href="[% search_url %]">Search</a> |
-    <a href="[% doc_url %]/x314.html">Help</a>
-</p>
+[% PROCESS header.html.tmpl version = version help="x308.html" %]
 
 [%# Display any "feedback" to the user if necessary. #%]
 [% IF feedback != '' %]
@@ -42,6 +35,9 @@
 <INPUT TYPE="submit" NAME=".submit" VALUE="Submit">
 
 </FORM>
+
+<a href="[% list_projects_url %]">Project list</a>
+
 
 [% PROCESS trailer.html.tmpl %]
 
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/edittopic.html.tmpl codestriker/template/en/default/edittopic.html.tmpl
--- codestriker-1.7.7/template/en/default/edittopic.html.tmpl	Wed Oct  8 06:12:47 2003
+++ codestriker/template/en/default/edittopic.html.tmpl	Wed Dec 31 19:00:00 1969
@@ -1,78 +0,0 @@
-[%# Screen for the create topic form. #%]
-
-[% PROCESS header.html.tmpl version = version %]
-
-<P>
-<A HREF="[% view_topic_url %]">View topic</A> |
-<A HREF="[% view_comments_url %]">View all comments</A> |
-<A HREF="[% doc_url %]/x385.html#ADD-COMMENT">Help</A>
-<HR>
-
-<H2>[% topic_title %]</H2>
-<TABLE>
-<TR>
- <TD>Author: </TD>
- <TD>[% author %]</TD>
-</TR>
-<TR>
- <TD>Reviewers: </TD> 
- <TD>[% reviewers %]</TD>
-</TR>
-[% IF cc != '' %]
-<TR>
- <TD>Cc: </TD> 
- <TD>[% cc %]</TD>
-</TR>
-[% END %]
-</TABLE>
-
-<P>
-<HR>
-
-<P>Context: (<A HREF="[% inc_context_url %]">increase</A> | <A HREF="[% dec_context_url %]">decrease)</A>
-<P>
-
-<PRE>[% context %]
-</PRE>
-
-<P>
-<HR>
-<P>
-
-[% PROCESS listcomments.html.tmpl comments = comments %]
-   
-<P>
-Enter new comment:
-<P>
-
-<FORM METHOD="POST"  ENCTYPE="application/x-www-form-urlencoded">
- <INPUT TYPE="hidden" NAME="action" VALUE="submit_comment">
- <INPUT TYPE="hidden" NAME="line" VALUE="[% line %]">
- <INPUT TYPE="hidden" NAME="topic" VALUE="[% topicid %]">
- <INPUT TYPE="hidden" NAME="mode" VALUE="[% mode %]">
- <INPUT TYPE="hidden" NAME="a" VALUE="[% anchor %]">
- <INPUT TYPE="hidden" NAME="fn" VALUE="[% fn %]">
- <INPUT TYPE="hidden" NAME="new" VALUE="[% new %]">
- <TEXTAREA NAME="comments" ROWS=15 COLS=75 WRAP="hard"></TEXTAREA>
- <P>
-
- <TABLE>
- <TR>
-  <TD>Your email address: </TD>
-  <TD><INPUT TYPE="text" NAME="email" VALUE="[% email %]" SIZE=50 MAXLENGTH=100></TD>
- </TR>
- <TR>
-  <TD>Cc: </TD>
-  <TD><INPUT TYPE="text" NAME="comment_cc"  SIZE=50 MAXLENGTH=150></TD>
- </TR>
- </TABLE>
-
- <P>
- <INPUT TYPE="submit" NAME="submit" VALUE="Submit" ONCLICK="opener.focus()">
-</FORM>
-
-[% PROCESS trailer.html.tmpl %]
-
-</BODY>
-</HTML>
-
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/header.html.tmpl codestriker/template/en/default/header.html.tmpl
--- codestriker-1.7.7/template/en/default/header.html.tmpl	Sun Aug 17 09:03:34 2003
+++ codestriker/template/en/default/header.html.tmpl	Sat Nov 15 23:53:58 2003
@@ -1,7 +1,13 @@
 [%# Header HTML code to appear on each screen, after <BODY> tag. #%]
 
 <table width="100%" border="0" cellpadding="0" cellspacing="0">
-<tr>
-  <td class="heading"><center><a href="[% list_url %]"><font color="white">Codestriker [% version %]</font></a></center></td>
+<tr class="heading">
+  <td valign="bottom"><a href="[% list_url | uri | html %]">Home</a></td>   
+  <td valign="bottom"><a href="[% create_topic_url | uri | html %]">New Topic</a></td>
+  <td class="heading"><center><a href="[% list_url | uri | html %]" STYLE="text-decoration: none"><font color="black">[% main_title %]</font></a></center></td>
+  <td valign="bottom">
+    [% IF searchlist_enabled != 0 %]<a href="[% search_url | uri | html %]">Search</a></td>[% END %]
+  <td valign="bottom"><a href="[% doc_url | uri | html %]/[% help | uri | html %]">Help</a></td>
 </tr>
 </table>
+<HR>
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/listcomments.html.tmpl codestriker/template/en/default/listcomments.html.tmpl
--- codestriker-1.7.7/template/en/default/listcomments.html.tmpl	Sun Feb  2 05:44:59 2003
+++ codestriker/template/en/default/listcomments.html.tmpl	Wed Dec 31 19:00:00 1969
@@ -1,28 +0,0 @@
-[%# Display a list of comments #%]
-
-<TABLE CELLPADDING="1" CELLSPACING="1" BORDER="0">
-[% FOREACH comment = comments %]
-[% FLUSH IF loop.count() % 10 == 1 %]
-
-[% IF loop.count() == 1 %]
-<TR CLASS="comments"><TD><B>Comments:</B></TD></TR>
-<TR CLASS="commentb"><TD>&nbsp;</TD></TR>
-[% END %]
-
-<TR CLASS="commenth">
-<TD>
-[% IF comment.line != '' %]
-<A HREF="[% comment.lineurl %]" NAME="[% comment.linename %]">
-[% comment.line %]</A>
-[% END %]
-
-[% comment.author %]&nbsp;[% comment.date %]
-</TD>
-</TR>
-<TR CLASS="commentb">
-<TD>
-<PRE>[% comment.data %]</PRE></TD>
-</TR>
-<TR CLASS="commentb"><TD>&nbsp;</TD></TR>
-[% END %]
-</TABLE>
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/listprojects.html.tmpl codestriker/template/en/default/listprojects.html.tmpl
--- codestriker-1.7.7/template/en/default/listprojects.html.tmpl	Fri Oct 10 07:31:21 2003
+++ codestriker/template/en/default/listprojects.html.tmpl	Tue Oct 28 20:50:05 2003
@@ -1,13 +1,6 @@
 [%# Display a list of projects #%]
 
-[% PROCESS header.html.tmpl version = version %]
-
-[%# Show the top-level links for "Create new topic" and "Search" #%]
-<p>
-    <a href="[% create_topic_url %]">Create new topic</a> | 
-    <a href="[% search_url %]">Search</a> |
-    <a href="[% doc_url %]/x314.html">Help</a>
-</p>
+[% PROCESS header.html.tmpl version = version help="x308.html" %]
 
 [%# Display any "feedback" to the user if necessary. #%]
 [% IF feedback != '' %]
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/listtopics.html.tmpl codestriker/template/en/default/listtopics.html.tmpl
--- codestriker-1.7.7/template/en/default/listtopics.html.tmpl	Fri Oct 10 07:31:39 2003
+++ codestriker/template/en/default/listtopics.html.tmpl	Tue Dec  2 22:25:21 2003
@@ -1,16 +1,8 @@
 [%# Screen for show a list of topics. #%]
 
-[% PROCESS header.html.tmpl version = version %]
+[% PROCESS header.html.tmpl version = version help ="x287.html"  %]
 
-[%# Show the top-level links for "Create new topic" and "Search" #%]
-<p>
-    <a href="[% create_topic_url %]">Create new topic</a>
-[% IF projects_enabled != 0 %]
-    | <a href="[% list_projects_url %]">List projects</a>
-[% END %]
-    | <a href="[% search_url %]">Search</a>
-    | <a href="[% doc_url %]/x287.html">Help</a>
-</p>
+<!-- "" -->
 
 [%# Display any "feedback" to the user if necessary. #%]
 [% IF feedback != '' %]
@@ -19,9 +11,8 @@
 [% END %]
 
 [%# Display the heading and create the table #%]
-<h1>Topic list</h1>
 <FORM METHOD="POST" ENCTYPE="multipart/form-data">
-<INPUT TYPE="hidden" NAME="action" VALUE="change_topics">
+<INPUT TYPE="hidden" NAME="action" VALUE="change_topics_state">
 
 [%# Store the search parameters as hidden variables #%]
 <INPUT TYPE="hidden" NAME="sauthor" VALUE="[% sauthor %]">
@@ -57,7 +48,7 @@
 
     <tr class="[% loop.count() % 2 == 0 ? 'tl1' : 'tl2' %]">
         <td><INPUT TYPE="checkbox" NAME="selected_topics" VALUE="[% topic.id %],[% topic.version %]"></td>
-        <td><a href="[% topic.view_topic_url %]">[% topic.title %]</a></td>
+        <td><a href="[% topic.view_topic_url | uri | html %]">[% topic.title %]</a></td>
         <td>[% topic.author %]</td>
         <td>[% topic.reviewer %]</td>
         <td>[% topic.cc %]</td>
@@ -89,10 +80,20 @@
 
    <table width="100%">
     <tr class="tlh"><td>&nbsp</td></tr>
-    </tr>
    </table>
 
 </FORM>
+
+<p>
+[% IF projects_enabled != 0 %]
+    <a href="[% list_projects_url | uri | html %]">Administer Projects</a>
+[% END %]
+
+    | <a href="[% view_metrics_url | uri | html %]">Metrics Report</a>
+
+
+</p>
+
 
 [% PROCESS trailer.html.tmpl %]
 
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/metricsreport.html.tmpl codestriker/template/en/default/metricsreport.html.tmpl
--- codestriker-1.7.7/template/en/default/metricsreport.html.tmpl	Wed Dec 31 19:00:00 1969
+++ codestriker/template/en/default/metricsreport.html.tmpl	Fri Dec 19 22:04:04 2003
@@ -0,0 +1,101 @@
+[%# Screen for show a list of topics. #%]
+
+[% PROCESS header.html.tmpl version = version help ="x287.html"  %]
+
+<!-- "" -->
+
+[%# Display any "feedback" to the user if necessary. #%]
+[% IF feedback != '' %]
+    <font color="red">[% feedback %]</font>
+    <p>
+[% END %]
+
+<h3>User Metrics</h3>
+
+
+<table cellpadding="5%" >
+    <tr class="tlh"><td>
+	<td>last topic authored (days)
+	<td>last topic reviewed (days)
+	<td colspan=5>number of topics participated in the past 16 weeks
+    </tr>
+
+    [% FOREACH user_metrics %]
+
+    <tr class="[% loop.count() % 2 == 0 ? 'tl1' : 'tl2' %]">
+	<td>[% name | html %]
+	<td>[% date_last_authored %]
+	<td>[% date_last_participated %]
+	<td>[% total_topics %]
+    </tr>
+
+    [% END %]
+
+</table>
+
+<hr>
+<h3>Topic Metrics</h3>
+
+<table cellpadding="5%">
+
+    <tr class="tl2">
+        <td></td>
+
+	[% FOREACH month = comment_metrics_month_names %]
+	    <td>[% month %]</td>
+	[% END %]
+    </tr>
+
+    <tr class="tlh"><td colspan="13" align="center"> Comment Metrics</td></tr>
+
+
+    [% FOREACH comment_metrics %]
+
+    <tr class="[% loop.count() % 2 == 0 ? 'tl1' : 'tl2' %]">
+	<td>[% name | html %]</td>
+
+	[% FOREACH scount = counts %]
+	    <td>[% scount %]</td>
+	[% END %]
+    </tr>
+
+    [% END %]
+
+    <tr><td></td></tr>
+    <tr class="tlh"><td colspan="13" align="center"> Topic Metrics</td></tr>
+
+    [% FOREACH topic_metrics %]
+
+    <tr class="[% loop.count() % 2 == 0 ? 'tl1' : 'tl2' %]">
+	<td>[% name | html %]</td>
+
+	[% FOREACH scount = counts %]
+	    <td>[% scount %]</td>
+	[% END %]
+    </tr>
+    [% END %]
+
+    <tr><td></td></tr>
+
+    <tr class="tl2">
+        <td></td>
+
+	[% FOREACH month = comment_metrics_month_names %]
+	    <td>[% month %]</td>
+	[% END %]
+    </tr>
+
+</table>
+
+
+
+<hr>
+<p><a href="[% download_url %]">Download Raw Data</a>
+
+
+[% PROCESS trailer.html.tmpl %]
+
+</body>
+</html>
+
+
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/search.html.tmpl codestriker/template/en/default/search.html.tmpl
--- codestriker-1.7.7/template/en/default/search.html.tmpl	Fri Oct 10 07:31:51 2003
+++ codestriker/template/en/default/search.html.tmpl	Tue Oct 28 20:47:06 2003
@@ -1,12 +1,6 @@
 [%# Screen for search topics. #%]
 
-[% PROCESS header.html.tmpl version = version %]
-
-[%# Show the top-level links for "Create new topic" and "Help" #%]
-<p>
-    <a href="[% create_topic_url %]">Create new topic</a> |
-    <a href="[% doc_url %]/x533.html">Help</a>
-</p>
+[% PROCESS header.html.tmpl version = version help="x527.html" %]
 
 <H1>Topic search</H1>
 
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/submitcomment.html.tmpl codestriker/template/en/default/submitcomment.html.tmpl
--- codestriker-1.7.7/template/en/default/submitcomment.html.tmpl	Thu Apr  3 05:13:53 2003
+++ codestriker/template/en/default/submitcomment.html.tmpl	Wed Dec 31 19:00:00 1969
@@ -1,24 +0,0 @@
-[%# Screen for the submit comment confirmation screen. #%]
-
-[% PROCESS header.html.tmpl version = version %]
-
-<P>
-<A HREF="[% view_topic_url %]">View topic</A> |
-<A HREF="[% view_comments_url %]">View all comments</A>
-<HR>
-
-<H2>Comment submitted</H2>
-<P>
-<PRE>[% comment %]
-</PRE><P>
-
-[%# Display a simple form for closing the comment popup window #%]
-<FORM METHOD="POST"  ENCTYPE="application/x-www-form-urlencoded">
-<INPUT TYPE="submit" NAME=".submit" VALUE="Close"
-       ONCLICK="window.close()">
-</FORM>
-
-[% PROCESS trailer.html.tmpl %]
-
-</BODY>
-</HTML>
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/submitnewcomment.html.tmpl codestriker/template/en/default/submitnewcomment.html.tmpl
--- codestriker-1.7.7/template/en/default/submitnewcomment.html.tmpl	Wed Dec 31 19:00:00 1969
+++ codestriker/template/en/default/submitnewcomment.html.tmpl	Wed Oct 29 20:21:53 2003
@@ -0,0 +1,19 @@
+[%# Screen for the submit comment confirmation screen. #%]
+
+[% PROCESS header.html.tmpl version = version help="x332.html" %]
+
+<H2>Comment submitted</H2>
+<P>
+<PRE>[% comment %]
+</PRE><P>
+
+[%# Display a simple form for closing the comment popup window #%]
+<FORM METHOD="POST"  ENCTYPE="application/x-www-form-urlencoded">
+<INPUT TYPE="submit" NAME=".submit" VALUE="Close"
+       ONCLICK="window.close()">
+</FORM>
+
+[% PROCESS trailer.html.tmpl %]
+
+</BODY>
+</HTML>
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/submitnewtopic.html.tmpl codestriker/template/en/default/submitnewtopic.html.tmpl
--- codestriker-1.7.7/template/en/default/submitnewtopic.html.tmpl	Wed Dec 31 19:00:00 1969
+++ codestriker/template/en/default/submitnewtopic.html.tmpl	Wed Oct 29 22:52:58 2003
@@ -0,0 +1,15 @@
+[%# Screen for the submit topic confirmation screen. #%]
+
+[% PROCESS header.html.tmpl version = version help="x332.html" %]
+
+<H2>Topic created</H2>
+Topic title: [% topic_title %]<BR>
+Author: [% email %]<BR>
+Topic URL: <A HREF="[% topic_url %]">[% topic_url %]</A>
+<P>
+Email has been sent to: [% email %], [% reviewers %][% IF cc != '' %], [% cc %][% END %]
+
+[% PROCESS trailer.html.tmpl %]
+
+</BODY>
+</HTML>
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/submittopic.html.tmpl codestriker/template/en/default/submittopic.html.tmpl
--- codestriker-1.7.7/template/en/default/submittopic.html.tmpl	Thu Apr  3 05:13:53 2003
+++ codestriker/template/en/default/submittopic.html.tmpl	Wed Dec 31 19:00:00 1969
@@ -1,15 +0,0 @@
-[%# Screen for the submit topic confirmation screen. #%]
-
-[% PROCESS header.html.tmpl version = version %]
-
-<H2>Topic created</H2>
-Topic title: [% topic_title %]<BR>
-Author: [% email %]<BR>
-Topic URL: <A HREF="[% topic_url %]">[% topic_url %]</A>
-<P>
-Email has been sent to: [% email %], [% reviewers %][% IF cc != '' %], [% cc %][% END %]
-
-[% PROCESS trailer.html.tmpl %]
-
-</BODY>
-</HTML>
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/viewtopic.html.tmpl codestriker/template/en/default/viewtopic.html.tmpl
--- codestriker-1.7.7/template/en/default/viewtopic.html.tmpl	Fri Oct 10 07:32:24 2003
+++ codestriker/template/en/default/viewtopic.html.tmpl	Sat Nov 15 21:12:59 2003
@@ -3,199 +3,12 @@
     script, as it is complex HTML that doesn't need to be
     customised. #%]
 
-[% PROCESS header.html.tmpl version = version %]
+[% PROCESS viewtopicheader.html.tmpl version = version help="x380.html#VIEW-TOPIC" topicview=1 topiccomments=0 topicinfo=0 %]
 
-<script language="JavaScript">
-<!-- script to hit user with are you sure if they are deleting a topic.
-
-/* This function will hit the user with a "are you sure" message box if they
-   ask to delete the topic. Otherwise, just let them change the state. It
-   is called when the submit button is pressed. 
-*/
-function DeleteTopicConfirm()
-{
-    var stateIndex = document.form.topic_state.options.selectedIndex;
-    var stateSelection = document.form.topic_state.options[stateIndex].value;
-    
-    // Confirm with the user if they are deleting.
-    if (stateSelection == 'Delete')
-    {
-    	return confirm('This topic and all of its comments will be permanently ' + 
-                       'removed. Are you sure you want to delete this topic?');
-    }
-    
-    return 1;
-}
-
--->
-</script>
-
-[%# Show the top-level links for "Create new topic", "List open topics",
-    "search", and "View all comments" #%]
-<p>
-    <a href="[% create_topic_url %]">Create new topic</a>
-[% IF searchlist_enabled != 0 %]
-    | <a href="[% list_url %]">List open topics</a>
-[% IF projects_enabled != 0 %]
-    | <a href="[% list_url_in_project %]">List open topics in project</a>
-[% END %]
-    | <a href="[% search_url %]">Search</a>
-[% END %]
-[% IF projects_enabled != 0 %]
-    | <a href="[% list_projects_url %]">List projects</a>
-[% END %]
-    | <a href="[% view_comments_url %]">View all comments</a>
-    | <a href="[% doc_url %]/x386.html#VIEW-TOPIC">Help</a>
-<HR>
-
-<p>
-[%# Display any "feedback" to the user if necessary. #%]
-[% IF feedback != '' %]
-    <font color="red">[% feedback %]</font>
-    <p>
-[% END %]
-
-[%# Create a table illustrating the title, author, creation date, bug
-    ids, reviewers, number of lines and the current state. #%]
-
-<table cellpadding="2" cellspacing="2" border="0">
-
-<tr class="tth">
- <td><b>Title:</b></td>
- <td><b>[% escaped_title %]</b></td>
-</th>
-
-[% SET type = 0 %]
-
-<tr class="tt[% type mod 2 %]">
- [% type = type + 1 %]
- <td>Author:</td>
- <td>[% document_author %]</td>
-</tr>
-
-<tr class="tt[% type mod 2 %]">
- [% type = type + 1 %]
- <td>Created:</td>
- <td>[% document_creation_time %]</td>
-</tr>
-
-[% IF bug_string != '' %]
-<tr class="tt[% type mod 2 %]">
- [% type = type + 1 %]
- <td>Bug IDs:</td>
- <td>[% bug_string %]</td>
-</tr>
-[% END %]
-
-<tr class="tt[% type mod 2 %]">
- [% type = type + 1 %]
- <td>Reviewers:</td>
- <td>[% document_reviewers %]</td>
-</tr>
-
-<tr class="tt[% type mod 2 %]">
- [% type = type + 1 %]
- <td>Number of lines:</td>
- <td>[% number_of_lines %]
-  [%# Give them a nudge, that the topic is too large. #%] 
-  [% IF number_of_lines > suggested_topic_size_lines && suggested_topic_size_lines > 0 %]
-    <FONT color=red>-- over suggested topic size limit of [% suggested_topic_size_lines %] lines.</FONT>
-  [% END %]
-  
- </td>
-</tr>
-
-[% IF repository != '' %]
-<tr class="tt[% type mod 2 %]">
- [% type = type + 1 %]
- <td>Repository:</td>
- <td>[% repository %]</td>
-</tr>
-[% END %]
-
-[% IF projects_enabled != 0 %]
-<tr class="tt[% type mod 2 %]">
- [% type = type + 1 %]
- <td>Project:</td>
- <td>[% project_name %]</td>
-</tr>
-[% END %]
-
-<tr class="tt[% type mod 2 %]">
- [% type = type + 1 %]
- <td valign="top">Description:</td>
- <td><pre>[% description %]</pre></td>
-</tr>
-
-[%# Display the form for changing the topic state #%]
-<form method="post" enctype="application/x-www-form-urlencoded" name="form">
-<tr class="tt[% type mod 2 %]">
- [% type = type + 1 %]
- <td>State:
-<FONT SIZE="-2"><A HREF="javascript:alert('
-When a topic is created, it is initialised in state \'open\'.\n
-Once a topic has been reviewed, and the code has been committed,\n
-the state should be updated to \'committed\'.  If the code\n
-in this review is not be committed, perhaps because a\n
-new review will superceed this one, or because it was rejected,\n
-the state should be changed to \'closed\'.\n
-\n
-If a topic is linked to Bugzilla bugs, each time the topic\n
-state is changed, an appropriate comment will be appended to\n
-all associated bugs, as a form of tracking.\n
-\n
-The topic states are also useful as a form of filtering, when\n
-retrieving lists of topics from the search page.
-')">(What's this?)</A></FONT>
-</td>
- <td>
-   <input type="hidden" name="action" value="change_topic_state">
-   <input type="hidden" name="topic" value="[% topicid %]">
-   <input type="hidden" name="mode" value="[% mode %]">
-   <input type="hidden" name="version" value="[% topic_version %]">
-
-   [%# Now display the option button for changing the topic state #%]
-   <select name="topic_state">
-   [% FOREACH state = states %]
-       [% IF state == default_state %]
-           <option selected value="[% state %]">[% state %]
-       [% ELSE %]           
-           <option value="[% state %]">[% state %]
-       [% END %]
-   [% END %]
-   [%# Render a "delete" button, for deleting topics, if enabled #%]
-   [% IF delete_enabled != 0 %]
-   	<option value="Delete">Delete Topic ... 
-   [% END %]
-   </select>
-
-   [%# Render the submit button #%]
-   <input type="submit" name="button" value="Update" onClick="return DeleteTopicConfirm();"> 
- </td>
-</tr>
-
-<tr class="tth"><td colspan="2">&nbsp</td></tr>
-
-</form>
-</table>   
-
-[%# Now display the number of comments made, with a link to the
-    comment section. #%]
 <p>
-[% IF number_comments == 1 %]
-    Only one <a href="[% comment_url %]">comment</a> submitted.
-[% ELSIF number_comments > 1 %]
-    [% number_comments %] <a href="[% comment_url %]">comments</a> submitted.
-[% END %]
-
-<br>
 
 [%# Display the "Download topic text" link #%]
-<a href="[% download_url %]">Download</a> topic text.
-
-<p>
-<hr>
-<p>
+<a href="[% download_url %]">Download topic text</a> |  
 
 [%# The perl script takes control from here, rendering the topic data #%]
 
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/viewtopiccomments.html.tmpl codestriker/template/en/default/viewtopiccomments.html.tmpl
--- codestriker-1.7.7/template/en/default/viewtopiccomments.html.tmpl	Wed Dec 31 19:00:00 1969
+++ codestriker/template/en/default/viewtopiccomments.html.tmpl	Sat Nov 15 21:45:48 2003
@@ -0,0 +1,152 @@
+[%# Display a list of comments #%]
+
+[% PROCESS viewtopicheader.html.tmpl version = version help="x476.html" topicview=0 topiccomments=1 topicinfo=0 %]
+
+<SCRIPT language="JavaScript">
+<!-- This function handles the three filter select boxes at the top of the table.
+function SelectFilter(post)
+{
+    var url = '';
+
+    var userSelectionIndex = document.form.filter_comments_author.options.selectedIndex;    
+    if (userSelectionIndex > 0)
+    {
+	var userSelection = document.form.filter_comments_author.options[userSelectionIndex].value;
+    	url = url + '&sauthor=' + userSelection;
+    }
+        
+    var stateIndex = document.form.filter_comments_state.options.selectedIndex;     
+    if ( stateIndex > 0)
+    {
+    	url = url + '&sstate=' + (stateIndex-1);
+    }
+    
+    var contextIndex = document.form.show_context_in_comments.options.selectedIndex;
+    var contextSelection = document.form.show_context_in_comments.options[contextIndex].value;
+    
+    url = url + '&scontext=' + contextSelection;
+    
+    // The filtering url parameters have been build, now a "get" back to the web server
+    // with the updated filter paramters, the ListComments.pm script will refilter then.
+    if (post == 0)
+    {
+    	window.location='[% view_comments_url %]' + url;
+    }
+    else
+    {
+    	window.form.action = '[% view_comments_url %]' + url ;
+        window.form.post();
+    }
+}
+// -->
+</SCRIPT>
+
+[%# Display any "feedback" to the user if necessary. #%]
+[% IF feedback != '' %]
+    <font color="red">[% feedback %]</font>
+    <p>
+[% END %]
+
+<FORM METHOD="POST" ENCTYPE="multipart/form-data" name="form" onSubmit="SelectFilter(1)">
+<INPUT TYPE="hidden" NAME="action" VALUE="change_comments_state">
+<INPUT TYPE="hidden" NAME="topic" VALUE="[% topic %]">
+
+<INPUT TYPE="hidden" NAME="scontext" VALUE="[% scontext %]">
+<INPUT TYPE="hidden" NAME="sauthor" VALUE="[% sauthor %]">
+<INPUT TYPE="hidden" NAME="sstate" VALUE="[% sstate %]">
+
+
+<P><FONT size="5">Comments: &nbsp; &nbsp;</FONT>
+
+Show comments authored by: &nbsp;
+  <SELECT name="filter_comments_author" onChange="SelectFilter(0)">
+     <OPTION value="1"> Everybody     
+     [% FOREACH user = users %]
+     <OPTION value="[% user %]" [% IF sauthor == user %] SELECTED [%END%] >[% user %]
+     [% END %]
+  </SELECT>
+     
+with: 
+  <SELECT name="filter_comments_state" onChange="SelectFilter(0)">
+     <OPTION value="Any" [%IF select_sstate == 0 %] SELECTED [%END%]> Any
+     [% FOREACH state = states %]
+     <OPTION value="[% state %]" [%IF loop.count() == select_sstate %] SELECTED [% END %]>[% state %]
+     [% END %]
+  </SELECT>
+  
+state and
+
+  <SELECT name="show_context_in_comments" onChange="SelectFilter(0)">
+     <OPTION value="0" [%IF scontext == 0 %] SELECTED [% END %]>no context
+     <OPTION value="3" [%IF scontext == 3 %] SELECTED [% END %]>with context 3 lines
+     <OPTION value="6" [%IF scontext == 6 %] SELECTED [% END %]>with context 6 lines
+  </SELECT>
+.
+
+<TABLE CELLPADDING="1" CELLSPACING="3" BORDER="0" WIDTH="100%">
+
+[% last_fileline = -1 %]
+[% last_filenumber = -1 %]
+[% FOREACH comment = comments %]
+[% FLUSH IF loop.count() % 10 == 1 %]
+
+    [% IF comment.fileline != last_fileline ||
+          comment.filenumber != last_filenumber %]
+    <TR CLASS="comments">
+        <TD>
+            <INPUT TYPE="checkbox" NAME="selected_comments" 
+	           VALUE="[%comment.filenumber %],[% comment.fileline %],[% comment.filenew %],[% comment.version %]">
+        </TD>
+	<TD><A NAME="[% comment.anchor %]">[% comment.state %]</A></TD>
+	<TD>
+	    [% IF comment.filename != '' %]
+	       <A HREF="[% comment.view_file %]">[% comment.filename %]:[% comment.fileline %]</A> |
+	       [% IF allow_repositories != 0 %] <A HREF="[% comment.view_parallel %]">Parallel</A> | [% END %]
+	       <A HREF="[% comment.edit_url %]">Add comment</A>
+	    [% ELSE %]
+	       Line: [% comment.line %] |
+	        <A HREF="[% comment.edit_url %]">Add comment</A>
+	    [% END %]
+	</TD>
+    </TR>
+    [% IF comment.context != '' %]
+    <TR CLASS="commentc">
+        <TD></TD><TD COLSPAN="2"><PRE>[% comment.context %]</PRE></TD>
+    </TR>
+    [% END %]
+    [% last_fileline = comment.fileline %]
+    [% last_filenumber = comment.filenumber %]
+
+    [% END %]
+
+    <TR CLASS="commenth">
+        <TD CLASS="commentb">&nbsp;</TD>
+        <TD COLSPAN="2">[% comment.author %]&nbsp;[% comment.date %]</TD>
+    </TR>
+    <TR CLASS="commentb">
+        <TD>&nbsp;</TD><TD COLSPAN="2"><PRE>[% comment.data %]</PRE></TD>
+    </TR>
+
+[% END %]
+
+    <TR CLASS="comments"><TD COLSPAN="3">&nbsp;</TD></TR>
+
+</TABLE>
+
+<P>
+
+Change state: &nbsp;
+  <SELECT name="comment_state">
+     [% FOREACH state = states %]
+     <OPTION value="[% state %]">[% state %]
+     [% END %]
+  </SELECT>
+  <INPUT TYPE="submit" NAME="button" VALUE="Update">
+
+</FORM>
+
+[% PROCESS trailer.html.tmpl %]
+
+</body>
+</html>
+
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/viewtopicheader.html.tmpl codestriker/template/en/default/viewtopicheader.html.tmpl
--- codestriker-1.7.7/template/en/default/viewtopicheader.html.tmpl	Wed Dec 31 19:00:00 1969
+++ codestriker/template/en/default/viewtopicheader.html.tmpl	Sun Nov 30 22:26:15 2003
@@ -0,0 +1,34 @@
+
+[%# Screen for displaying the heading information of a topic.  The
+    actual view topic data is still generated directly from the perl
+    script, as it is complex HTML that doesn't need to be
+    customised. #%]
+
+[% PROCESS header.html.tmpl version = version %]
+
+
+[%# Display any "feedback" to the user if necessary. #%]
+[% IF feedback != '' %]
+    <font color="red">[% feedback %]</font>
+    <p>
+[% END %]
+
+<table cellpadding="5%" cellspacing="0%" width="100%">
+<tr class="tlh">
+   <td width="1%" nowrap [% IF topicview == 0 %] bgcolor="#cccccc" [% END %]>
+	<a STYLE="text-decoration: none" href="[% view_topic_url %]">View Topic Text</a></td>
+   <td width="1" bgcolor="#eeeeee"></td>
+   <td width="1%" nowrap [% IF topiccomments == 0 %] bgcolor="#cccccc" [% END %]>
+	<a STYLE="text-decoration: none" href="[% view_comments_url %]"> View all comments ([% number_comments %])</a></td>
+   <td width="1" bgcolor="#eeeeee"></td>
+   <td width="1%" nowrap [% IF topicinfo == 0 %] bgcolor="#cccccc" [% END %]>
+	<a STYLE="text-decoration: none" href="[% view_topicinfo_url %]"> View Topic Information</a> </td>
+   <td colspan=2 bgcolor="#eeeeee" align=right><b>[% author %]</b></td>
+</tr>
+</table>
+<table cellpadding="5%" cellspacing="0%" width="100%">
+<tr class="tlh">
+    <td colspan=4>Topic Title: <b>[% title %]</b>. </td>
+    <td align=right>[% document_creation_time %]</td>
+</tr>
+</table>
diff -wurN -x CVS -x doc -x data -x vc codestriker-1.7.7/template/en/default/viewtopicinfo.html.tmpl codestriker/template/en/default/viewtopicinfo.html.tmpl
--- codestriker-1.7.7/template/en/default/viewtopicinfo.html.tmpl	Wed Dec 31 19:00:00 1969
+++ codestriker/template/en/default/viewtopicinfo.html.tmpl	Mon Dec  1 22:51:25 2003
@@ -0,0 +1,266 @@
+[%# Screen for displaying the heading information of a topic.  The
+    actual view topic data is still generated directly from the perl
+    script, as it is complex HTML that doesn't need to be
+    customised. #%]
+
+[% PROCESS viewtopicheader.html.tmpl version = version topicview=0 topiccomments=0 topicinfo=1%]
+
+<script language="JavaScript">
+<!-- script to hit user with are you sure if they are deleting a topic.
+
+/* This function will hit the user with a "are you sure" message box if they
+   ask to delete the topic. Otherwise, just let them change the state. It
+   is called when the submit button is pressed. 
+*/
+function DeleteTopicConfirm()
+{
+    var stateIndex = document.form.topic_state.options.selectedIndex;
+    var stateSelection = document.form.topic_state.options[stateIndex].value;
+    
+    // Confirm with the user if they are deleting.
+    if (stateSelection == 'Delete')
+    {
+    	return confirm('This topic and all of its comments will be permanently ' + 
+                       'removed. Are you sure you want to delete this topic?');
+    }
+    
+    return 1;
+}
+
+-->
+</script>
+
+<pre>[% description FILTER html_entity %]</pre>
+
+[%# Create a table illustrating the title, author, creation date, bug
+    ids, reviewers, number of lines and the current state. #%]
+<p>
+
+[%# Display the form for changing the topic state #%]
+<form method="post" enctype="application/x-www-form-urlencoded" name="form">
+
+<input type="hidden" name="action" value="change_topic">
+<input type="hidden" name="topic" value="[% topic %]">
+<input type="hidden" name="mode" value="[% mode %]">
+<input type="hidden" name="version" value="[% topic_version %]">
+
+<table cellpadding="2" cellspacing="2" border="0" width="80%">
+
+[% SET type = 0 %]
+
+<tr class="tt[% type mod 2 %]">
+ [% type = type + 1 %]
+ <td>Author:</td>
+ <td colspan="5">[% author %]</td>
+</tr>
+
+[% IF bug_string != '' %]
+<tr class="tt[% type mod 2 %]">
+ <td>Bug IDs:</td>
+ <td colspan="5">[% bug_string %]</td>
+</tr>
+[% END %]
+
+<tr class="tt[% type mod 2 %]">
+ <td>Reviewers:</td>
+ <td colspan="5"><input type="text" size="50" value="[% document_reviewers  %]"></td>
+</tr>
+
+<tr class="tt[% type mod 2 %]">
+ <td>State:
+<FONT SIZE="-2"><A TABINDEX="1" HREF="javascript:alert('
+When a topic is created, it is initialised in state \'open\'.\n
+Once a topic has been reviewed, and the code has been committed,\n
+the state should be updated to \'committed\'.  If the code\n
+in this review is not be committed, perhaps because a\n
+new review will superceed this one, or because it was rejected,\n
+the state should be changed to \'closed\'.\n
+\n
+If a topic is linked to Bugzilla bugs, each time the topic\n
+state is changed, an appropriate comment will be appended to\n
+all associated bugs, as a form of tracking.\n
+\n
+The topic states are also useful as a form of filtering, when\n
+retrieving lists of topics from the search page.
+')">(What's this?)</A></FONT>
+</td>
+ <td colspan="5">
+   [%# Now display the option button for changing the topic state #%]
+   <select name="topic_state">
+   [% FOREACH state = states %]
+       [% IF state == default_state %]
+           <option selected value="[% state %]">[% state %]
+       [% ELSE %]           
+           <option value="[% state %]">[% state %]
+       [% END %]
+   [% END %]
+   [%# Render a "delete" button, for deleting topics, if enabled #%]
+   [% IF delete_enabled != 0 %]
+   	<option value="Delete">Delete Topic ... 
+   [% END %]
+   </select>
+ </td>
+</tr>
+
+
+[% IF repository != '' %]
+<tr class="tt[% type mod 2 %]">
+ <td>Repository:</td>
+ <td colspan="5">[% repository %]</td>
+</tr>
+[% END %]
+
+[% IF projects_enabled != 0 %]
+<tr class="tt[% type mod 2 %]">
+ <td>Project:</td>
+ <td colspan="5">[% project_name %]</td>
+</tr>
+[% END %]
+
+[% # Topic metrics sections %]
+<tr class="tt1">
+ <td>&nbsp;</td><td colspan="5"></td>
+</tr>
+
+<tr class="tt0">
+ <td>Comments</td>
+ 
+   [% FOREACH commentcounts %]
+   <td>[% name %]</td> 
+   [% END %]
+ 
+   <td>All Types</td>
+</tr>
+
+<tr class="tt1">
+  <td></td>
+  [% FOREACH commentcounts %]
+    <td>[% count %]</td> 
+  [% END %]
+  <td>[% number_comments %]</td>
+</tr>
+
+[% # Topic metrics sections %]
+<tr class="tt1">
+ <td>&nbsp;</td><td colspan="5"></td>
+</tr>
+
+<tr class="tt0">
+    <td>Topic Info</td>
+    <td>Lines</td>
+	
+[% FOREACH topic_metrics %]
+    <td onmouseover="(window.status='[% description %]'); return true"
+	onmouseout="(window.status=''); return true">[% name %]
+
+    [% IF description != '' %]
+    <A TABINDEX="1" HREF="javascript:alert('[% description %]')">?</A>
+    [% END %]
+    </td>
+[% END %]
+</tr>
+<tr class="tt1">
+    <td></td>
+    <td>[% number_of_lines %]</td>
+
+[% FOREACH topic_metrics %]
+    [% IF enabled %]
+    <td><input name="topic_metric" type="text" size="6" value="[% value %]"></td>
+    [% ELSE %]
+    <td>[% value %]</td>
+    [% END %]
+[% END %]
+
+</tr>
+
+[% type = 1 %]
+
+<tr class="tt[% type mod 2 %]">
+ [% type = type + 1 %]
+ <td>&nbsp;</td><td colspan="5"></td>
+</tr>
+
+<tr class="tt[% type mod 2 %]">
+ [% type = type + 1 %]
+    
+    <td>User</td>
+
+    [% FOREACH author_metrics %]
+
+    <td onmouseover="(window.status='[% description %]'); return true" 
+	onmouseout="(window.status=''); return true">[% name %]
+    [% IF description != '' %]
+    <A TABINDEX="1" HREF="javascript:alert('[% description %]')">?</A>
+    [% END %]
+    </td>
+
+    [% END %]
+</tr>
+
+<tr>
+    <td>[% author %]</td>
+    [% FOREACH author_metrics %]
+    
+    [% IF scope == 'author' || scope == 'participant' %]
+	[% IF enabled %]
+        <td><input name="author_metric" type="text" value="[% value %]" size="6"></td>
+	[% ELSE %]
+    	<td>[% value %]</td>
+	[% END %]
+    [% ELSE %]
+    <td><input name="author_metric" type="hidden"></td>
+    [% END %]
+
+    [% END %]
+</tr>
+
+[% FOREACH reviewer_metrics %]
+<tr>
+    [% SET reviewerindex = loop.index() %]
+    <td>[% reviewer %]</td>
+    [% FOREACH metric=user_metrics %]
+    
+    [% IF metric.scope != 'author' %]
+	[% IF metric.enabled != 0 %]
+	<td><input name="reviewer_metric,[% reviewerindex %]" type="text" value="[% metric.value %]" size="6"></td>
+	[% ELSE %]
+	<td>[% metric.value %]</td>
+	[% END %]
+    [% ELSE %]
+    <td><input name="reviewer_metric,[% reviewerindex %]" type="hidden"></td>
+    [% END %]
+
+    [% END %]
+</tr>
+[% END %]
+
+<tr class="tt[% type mod 2 %]">
+ [% type = type + 1 %]
+    
+    <td></td>
+
+    [% FOREACH total_metrics %]
+
+        <td>[% value %]</td>
+
+    [% END %]
+</tr>
+
+
+</table>
+
+</td></tr>
+</table>
+
+<p>
+[%# Render the submit button #%]
+<input type="submit" name="button" value="Save" onClick="return DeleteTopicConfirm();"> 
+
+</form>
+
+[% PROCESS trailer.html.tmpl %]
+
+</BODY>
+</HTML>
+
+
