? codestriker/cgi-bin/codestriker.pl
? codestriker/cgi-bin/data
Index: codestriker/codestriker.conf
===================================================================
RCS file: /cvsroot/codestriker/codestriker/codestriker.conf,v
retrieving revision 1.34
diff -u -b -r1.34 codestriker.conf
--- codestriker/codestriker.conf	1 Sep 2003 22:41:37 -0000	1.34
+++ codestriker/codestriker.conf	9 Sep 2003 23:55:21 -0000
@@ -3,14 +3,14 @@
 
 # Database to use for storing codestriker data.  Examples given are Postgresql
 # and MySQL
-$db = 'DBI:Pg:dbname=codestrikerdb';
-#$db = 'DBI:mysql:dbname=codestrikerdb';
+#$db = 'DBI:Pg:dbname=codestrikerdb';
+$db = 'DBI:mysql:dbname=codestrikerdb';
 
 # Database user.
 $dbuser = 'codestriker';
 
 # Database password.
-$dbpasswd = '';
+$dbpasswd = 'xxxxxx';
 #$dbpasswd = 'cspasswd';
 
 # Location of the mailing host.  This is used when sending out codestriker
@@ -55,7 +55,7 @@
 # be set to an anonymous user.
 @valid_repositories =
     (
-     '/home/sits/cvs',
+     '/home/sites/cvs',
      'http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi /cvsroot',
      'svn:http://svn.collab.net/repos/svn/trunk',
      ':pserver:anonymous:password@cvs.sourceforge.net:/cvsroot'
Index: codestriker/lib/Codestriker/Action/ListComments.pm
===================================================================
RCS file: /cvsroot/codestriker/codestriker/lib/Codestriker/Action/ListComments.pm,v
retrieving revision 1.7
diff -u -b -r1.7 ListComments.pm
--- codestriker/lib/Codestriker/Action/ListComments.pm	1 Sep 2003 22:41:38 -0000	1.7
+++ codestriker/lib/Codestriker/Action/ListComments.pm	9 Sep 2003 23:55:22 -0000
@@ -34,7 +34,9 @@
     # Perform some error checking here on the parameters.
 
     # Retrieve the comment details for this topic.
-    my @comments = Codestriker::Model::Comment->read($topic);
+    my @comments = Codestriker::Model::Comment->read_filtered($topic,
+    	$show_comments_by_state,
+        $show_comments_from_user);
 
     # Display the data, with each topic title linked to the view topic screen.
     $http_response->generate_header($topic, "Comment list", $email, "", "", "",
@@ -63,46 +65,17 @@
 	$url_builder->list_topics_url("", "", "", "", "", "", "",
 				      "", "", "", [ 0 ], undef);
 				      
-    # Filter out comments that the user has said they don't want to see.
-    my %usersThatHaveComments;
-    
-    @comments = grep { 
-        my $comment = $_;
-        my $keep_comment = 1;
-                        
-        # check for filter via the state of the comment.
-        $keep_comment = 0 if ( $show_comments_by_state ne ""  && 
-                               $show_comments_by_state ne $comment->{state} );
-        
-        # check for filters via the comment author name.
-        if ($Codestriker::antispam_email) {
-            my $shortAuthor = 
-            		Codestriker->make_antispam_email( $comment->{author} );
-            my $shortFilterAuthor = 
-            		Codestriker->make_antispam_email( $show_comments_from_user );
-            $keep_comment = 0 if ( $show_comments_from_user ne "" && 
-                                   $shortAuthor ne $shortFilterAuthor);
-                                   
-            # Make a list of users while we are at it.
-            $usersThatHaveComments{$shortAuthor } = 1;                                   
-        }
-        else {
-            $keep_comment = 0 if ( $show_comments_from_user ne "" && 
-                                  $comment->{author} ne $show_comments_from_user);
-                                  
-            # Make a list of users while we are at it.
-            $usersThatHaveComments{$comment->{author}} = 1;                                  
-        }
-                                               
-                      
- 	$keep_comment;
-    } @comments;
+    my @usersThatHaveComments = Codestriker::Model::Comment->read_authors( $topic );
     
     # Filter the email address out, in the object.
     if ( $Codestriker::antispam_email ) {
     	foreach my $comment (@comments) {
     	    $comment->{author} = Codestriker->make_antispam_email( $comment->{author} );
         }
+        
+        @usersThatHaveComments = map 
+        	{ Codestriker->make_antispam_email($_) } 
+                @usersThatHaveComments;        
     }     
                                          
     # Go through all the comments and make them into an appropriate form for
@@ -144,11 +117,10 @@
 	$comment->{data} = HTML::Entities::encode($comment->{data});
         
         if ($show_context ne "" && $show_context > 0) {
-                my $new = 1;        
                 my $delta = Codestriker::Model::File->get_delta($topic, 
                                 $comment->{filenumber}, 
                                 $comment->{fileline} , 
-                                $new);
+                                $comment->{filenew});
 
                 $comment->{context} = Codestriker::Http::Render->get_context(
                                                 $comment->{fileline} , 
@@ -156,7 +128,7 @@
                                                 $delta->{old_linenumber},
                                                 $delta->{new_linenumber},
                                                 $delta->{text}, 
-                                                $new);
+                                                $comment->{filenew});
        }
     }
 
@@ -175,8 +147,7 @@
     $vars->{'comments'} = \@comments;
     $vars->{'states'} = \@states;
     
-    my @usersThatHaveCommentsList = sort keys %usersThatHaveComments;
-    $vars->{'users'} = \@usersThatHaveCommentsList;
+    $vars->{'users'} = \@usersThatHaveComments;
     
     # Push in the current filter combo box selections so the window remembers
     # what the user has currently set.
Index: codestriker/lib/Codestriker/Model/Comment.pm
===================================================================
RCS file: /cvsroot/codestriker/codestriker/lib/Codestriker/Model/Comment.pm,v
retrieving revision 1.7
diff -u -b -r1.7 Comment.pm
--- codestriker/lib/Codestriker/Model/Comment.pm	30 Mar 2003 20:41:26 -0000	1.7
+++ codestriker/lib/Codestriker/Model/Comment.pm	9 Sep 2003 23:55:23 -0000
@@ -96,6 +96,44 @@
     die $dbh->errstr if !$success;
 }
 
+# This function returns as a list the authors emails address that have entered 
+# comments against a topic.
+sub read_authors
+{
+   my ($type, $topicid ) = @_;
+   
+    # Obtain a database connection.
+    my $dbh = Codestriker::DB::DBI->get_connection();
+
+    # Store the results into an array of objects.
+    my @results;
+
+    # Retrieve all of the comment information for the specified topicid.
+    my $select_comment =
+	$dbh->prepare_cached('SELECT distinct( comment.author) ' .
+			     'FROM comment, commentstate ' .
+			     'WHERE commentstate.topicid = ? ' .
+			     'AND commentstate.id = comment.commentstateid ');
+                             
+    my $success = defined $select_comment;
+    my $rc = $Codestriker::OK;
+    $success &&= $select_comment->execute($topicid);
+
+    # Store the results into the referenced arrays.
+    if ($success) {
+	my @data;
+	while (@data = $select_comment->fetchrow_array()) {
+	    push @results, $data[0];
+	}
+	$select_comment->finish();
+    }
+    
+    Codestriker::DB::DBI->release_connection($dbh, $success);
+    die $dbh->errstr unless $success;
+
+    return @results;   
+}
+
 # Return all of the comments made for a specified topic.
 sub read($$) {
     my ($type, $topicid) = @_;
@@ -153,6 +191,43 @@
     die $dbh->errstr unless $success;
 
     return @results;
+}
+
+# Return all of the comments made for a specified topic filtered by state 
+# and author. The filtered parameter is not used if it is empty.
+sub read_filtered
+{
+    my ($type, $topicid, $filtered_by_state_index, $filtered_by_author) = @_;
+    
+    # Read all of the comments from the database. 
+    my @comments = $type->read( $topicid );
+
+    # Now filter out comments that don't match the comment state and author filter.
+    @comments = grep { 
+        my $comment = $_;
+        my $keep_comment = 1;
+                                
+        # check for filter via the state of the comment.
+        $keep_comment = 0 if ( $filtered_by_state_index ne ""  && 
+                               $filtered_by_state_index ne $comment->{state} );
+        
+        # check for filters via the comment author name.
+        if ($Codestriker::antispam_email) {
+            my $shortAuthor = 
+            		Codestriker->make_antispam_email( $comment->{author} );
+            my $shortFilterAuthor = 
+            		Codestriker->make_antispam_email( $filtered_by_author );
+            $keep_comment = 0 if ( $filtered_by_author ne "" && 
+                                   $shortAuthor ne $shortFilterAuthor);                                   
+        }
+        else {
+            $keep_comment = 0 if ( $filtered_by_author ne "" && 
+                                  $comment->{author} ne $filtered_by_author);
+        }                                                                     
+ 	$keep_comment;
+    } @comments;
+    
+    return @comments;
 }
 
 # Update the state of the specified commentstate.  The version parameter
Index: codestriker/template/en/default/displaycomments.html.tmpl
===================================================================
RCS file: /cvsroot/codestriker/codestriker/template/en/default/displaycomments.html.tmpl,v
retrieving revision 1.6
diff -u -b -r1.6 displaycomments.html.tmpl
--- codestriker/template/en/default/displaycomments.html.tmpl	1 Sep 2003 22:41:38 -0000	1.6
+++ codestriker/template/en/default/displaycomments.html.tmpl	9 Sep 2003 23:55:23 -0000
@@ -86,7 +86,8 @@
 
   <SELECT name="show_context_in_comments" onChange="SelectFilter(0)">
      <OPTION value="0" [%IF scontext == 0 %] SELECTED [% END %]>no context
-     <OPTION value="3" [%IF scontext == 3 %] SELECTED [% END %]>with context
+     <OPTION value="3" [%IF scontext == 3 %] SELECTED [% END %]>with context 3 lines
+     <OPTION value="6" [%IF scontext == 6 %] SELECTED [% END %]>with context 6 lines
   </SELECT>
 .
 
