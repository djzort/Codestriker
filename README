Codestriker v1.7.2
Copyright (c) 2001, 2002, 2003 David Sitsky.  All rights reserved.
sits@users.sourceforge.net

*** Please read the CHANGELOG file for details on changes ***
-------------------------------------------------------------

Codestriker is a Perl CGI script which is used for performing code
reviews in a collaborative fashion as opposed to sending patches and
comments using unstructured emails.  It runs on UNIXes (Linux, *BSD,
etc...) and Windows.

Authors create code review topics, where the nominated reviewers will
be automatically notified by email.  Reviewers then submit comments
against the code on a per-line basis, and can also view comments
submitted by the other reviewers as they are created.  Emails are sent
to the appropriate parties when comments are created, as an alert
mechanism.  The author is also free to submit comments against the
review comments.

Once all reviewers have finished, the author has all
review comments available in a structured fashion, as
opposed to a pile of unstructured emails.

Special support is provided for integration with CVS and Subversion
repositories, for the display of coloured diffs and for the ability to
view original and new files in their entirety to assist in the review
process.  Codestriker can be optionally linked with a bug tracking
system, such as Bugzilla.  Other SCM systems, such as ClearCase and
VSS will be added in future releases, given help from the developer
community.

The Template Toolkit is used for generating HTML output, so the
appearance of Codestriker can be modified without changing any Perl
code.

A tutorial (albeit somewhat dated) on how to use codestriker can be
seen at http://codestriker.sourceforge.net

Installation
------------

*** Please read the CHANGELOG file for functionality changes between
    releases. ***

Codestriker uses a database for storing topic information.  It has
been tested with PostgreSQL and MySQL, and should work fine for other
databases, as it uses the Perl DBI.  Make sure you update
codestriker.conf appropriately for your setup.

Codestriker uses the "Template Toolkit" for its HTML pages, so that
the output can be easily customised for different sites, without
modifying any Perl code.  This also allows for the pages to be
translated (ie localised) into different languages.

The source templates live in template/en/default.

UNIX INSTALLATION
-----------------

For MySQL installations, it is necessary to download the mysql,
mysql-devel and mysql-server packages (or equivalent for non-RedHat
distros), install them, and to then obtain the DBD::mysql package from
http://www.cpan.org for the Perl MySQL DBI interface.  Start your
database with something like:

/etc/rc.d/init.d/mysql start

Then enter the following commands to create the Codestriker database,
and a codestriker database user with password "cspasswd".  Note, you
should substitute this with your own value, and update
codestriker.conf accordingly.

% mysql -u root mysql

CREATE DATABASE codestrikerdb;
GRANT SELECT,INSERT,UPDATE,DELETE,INDEX,ALTER,CREATE,DROP,REFERENCES ON codestrikerdb.* TO codestriker@localhost IDENTIFIED BY 'cspasswd';
FLUSH PRIVILEGES;
QUIT

You can then check the Codestriker database at any time using the
following command:

mysql -u codestriker -D codestrikerdb -p

Note you can remove the database by entering:

DROP DATABASE codestrikerdb;

from a "mysql -u root mysql" session.

----------------------------------------------------------------------

For PostgreSQL, download all of the relevant Postgres packages.  This
should include (for RedHat distributions) the postgresql,
postgresql-server and postgresql-devel packages.  Make sure your
version is at least 7.1, as prior versions had restrictions on the
size of "text" fields, making it impractical for use with Codestriker.
Start your database with something like: 

/etc/rc.d/init.d/postgresql start

Download and install the DBD::Pg package from http://www.cpan.org,
which is the Postgresql Perl DBI interface.

To create the codestriker database and user, issue the following
commands:

createuser --username=postgres -d -A codestriker
createdb --username=codestriker codestrikerdb

For Redhat, by default PostgreSQL accepts connections from the
localhost.  For Debian, if you want this behaviour, you may need to
change your /etc/postgres/pg_hba.conf file to use "trust" rather than
"ident" if appropriate for your setup.  I have found this to be
appropriate for my usage.

You can then check the database at any time using the following
command:

psql -U codestriker codestrikerdb

Note you can remove the database by entering:

dropdb --username=codestriker codestrikerdb

WINDOWS INSTALLATION
--------------------

Codestriker has been tested with a number of Window variants,
including Windows XP and Windows 98.  It has only been tested with
MySQL, but in principle, if PostgreSQL is available for Windows, it
should work equally as well (or any other DBI-compliant database).
Window MySQL binaries can be obtained from http://www.mysql.com.

Binaries for the Apache webserver can be obtained from
http://httpd.apache.org.  I have personally tested with an Apache 1.X
server, but in principle, Codestriker under Windows should work
equally as well under Apache 2.X.  In principle, since Codestriker can
run as a CGI script, it should be possible to deploy under any
web-server on windows that supports CGI.

Perl for windows can be downloaded from ActiveState, at
http://www.activestate.com/Products/Download/Download.plex?id=ActivePerl.

Once Perl is installed on your system, you can run the "ppm" command,
to install perl modules easily off the web.  The first time you run
"ppm", issue the following commands:

install DBI

will install the DBI package on your system.

----------------------------------------------------------------------

Deploying Codestriker
---------------------

Decide where you will deploy Codestriker on your system.  The desired
location will vary from distribution to distribution.  Under RedHat
7.1, I would do something like the following as root.

      mkdir /var/www/codestriker
      cd /var/www/codestriker
      tar zxvf /from/installed/location/codestriker-X.Y.Z.tar.gz
      chown -R apache.apache /var/www/codestriker/codestriker-X.Y.Z

Here "apache" is the user that runs the Apache server.  It could be
"nobody" under different systems.  Check with the "ps auxww" command,
or check your apache config files.

Under Windows, the Codestriker distribution could be unzipped into
c:\codestriker.

The codestriker.conf file should be modified to reflect your site's
configuration.  Some of the more advanced settings, such as Bugzilla
and LXR integration are described at the end of this document.

It is then necessary to check that your system contains all of the
necessary Perl modules.  Change into the Codestriker bin subdirectory
and run the checksetup.pl command:

./checksetup.pl  (For windows, this would be "perl checksetup.pl")

This command reports any missing modules.  The ppm command can be used
to retrieve these modules, or they can be retrieved and installed
manually by going to http://search.cpan.org.

Note this command can be executed as many times as you like, and
__MUST__ be executed whenever you upgrade Codestriker.

Once all missing modules are installed, checksetup.pl will create the
necessary database tables (or perform any data migration for
upgrades), and the codestriker.pl CGI file.  Once it completes
successfully, the system is ready to run.  The remaining task is to
configure Apache to use Codestriker.

CGI configuration
-----------------

Codestriker can be run as an ordinary CGI script.  From a performance
perspective, it is far better to run Codestriker with mod_perl (see
the following sections), as this avoids the overhead of loading a
fresh Perl interpretor for every HTTP request.

If for some reason, you can't get mod_perl installed on your site, you
can configure Apache 1.X or 2.X with Codestriker as CGI with
configuration commands something like the following:

ScriptAlias /codestriker/  /var/www/codestriker/codestriker-X.Y.Z/cgi-bin/
Alias /codestrikerhtml/  /var/www/codestriker/codestriker-X.Y.Z/html/

<Directory "/var/www/codestriker/codestriker-X.Y.Z/cgi-bin/">
   AllowOverride None
   Options ExecCGI
   Order allow,deny
   Allow from all
</Directory>

<Directory "/var/www/codestriker/codestriker-X.Y.Z/html/">
   AllowOverride None
   Allow from all
</Directory>

Note for Windows, the commands are the same, but filename paths should
still use '/' characters rather than '\'.

ScriptAlias /codestriker/ "C:/codestriker/codestriker-X.Y.Z/cgi-bin/"
Alias /codestrikerhtml/ "C:/codestriker/codestriker-X.Y.Z/html/"

<Directory "C:/codestriker/codestriker-X.Y.Z/cgi-bin/">
   AllowOverride None
   Options ExecCGI
   Order allow,deny
   Allow from all
</Directory>

<Directory "C:/codestriker/codestriker-X.Y.Z/html/">
   AllowOverride None
   Allow from all
</Directory>

Apache 1.X mod_perl configuration
---------------------------------

Mod_perl is available for download from http://perl.apache.org.  For
most Linux distributions, it is available by default with Apache.  For
installing mod_perl under Windows,
http://www.webmatrix.net/log/modperl-win32 contains installation
information.  One point to note however, I found I could not run ppm
as "ppm --location=..." as shown on this site, but had to run ppm
interactively, and issue commands like:

ppm
set location http://theoryx5.uwinnipeg.ca/ppmpackages
set save
install mod_perl

As can be seen in the previous section, the Windows configuration is
the same as the UNIX one, except for the syntax in defining filenames.

Use the following configuration for Codestriker under Apache 1.X and
mod_perl.

Alias /codestriker/  /var/www/codestriker/codestriker-X.Y.Z/cgi-bin/
Alias /codestrikerhtml/  /var/www/codestriker/codestriker-X.Y.Z/html/

<Directory "/var/www/codestriker/codestriker-X.Y.Z/cgi-bin/">
   SetHandler perl-script
   PerlHandler Apache::Registry
   Options +ExecCGI
</Directory>

<Directory "/var/www/codestriker/codestriker-X.Y.Z/html/">
   AllowOverride None
   Allow from all
</Directory>

For extra security, Codestriker supports Perl taint-mode, so it is
advisable to also have the following option in your Apache config:

PerlTaintCheck On

Apache 2.X mod_perl configuration
---------------------------------

If it isn't enabled already, you need to ensure the mod_perl module is
loaded when Apache is started.  Near the top of your config file, you
should have something like the following:

LoadModule perl_module modules/mod_perl.so
PerlModule Apache2   (or the appropriate Apache modules loaded in your
                      Perl startup file)

The Codestriker configuration for Apache 2.X is very similar, the only
change is the name of the PerlHandler.

Alias /codestriker/  /var/www/codestriker/codestriker-X.Y.Z/cgi-bin/
Alias /codestrikerhtml/  /var/www/codestriker/codestriker-X.Y.Z/html/

<Directory "/var/www/codestriker/codestriker-X.Y.Z/cgi-bin/">
   SetHandler perl-script
   PerlHandler ModPerl::Registry
   Options +ExecCGI
</Directory>

<Directory "/var/www/codestriker/codestriker-X.Y.Z/html/">
   AllowOverride None
   Allow from all
</Directory>

To enable Perl taint mode checking, using the following option:

PerlSwitches -T

----------------------------------------------------------------------

Compression support
-------------------

The pages generated from Codestriker can be quite large, depending on
the size of the review and the files involved.  It can send the HTML
as content-encoding x-gzip.  Browsers such as Netscape, Konqueror and
Mozilla supporting the handling of compressed data.  Unfortunately, IE
can't.  Using compression can make an enormous difference in the speed
of transfers, particularly over slow links.  If you have installed
Codestriker with mod_perl, and wish to use compression, you must also
install the Compress::Zlib module, available from CPAN
(http://www.cpan.org).  For non mod_perl installs, the gzip executable
can be used for compression.  When receiving a page from Codestriker,
the page source contains near the top within an HTML comment whether
the text was sent compressed or not.  To enable compression, you need
to turn that option on in the configuration file.  For an intranet
setup where the server is one hop away, compression will probably slow
things down if the review sizes are relatively small.  Its best to
experiment to see what works best for you.

Codestriker settings
--------------------

Read through the configuration options within codestriker.pl and
codestriker.conf to ensure all the settings are correct for your site.
It is intended that codestriker.conf will remain fairly static, so
upgrades should be fairly painless.  Among other things, the settings
include the location of your CVS repository, the base URL to your bug
tracking system, and the base URL to your CVS (or other SCM) viewing
system.  Note these settings can be left blank, they aren't required
in order to use Codestriker.

For deployments outside an intranet, I would suggest using apache's
".htaccess" mechanism to limit access as to who can execute the
script, as an extra security precaution.

Bugzilla integration
--------------------

To automatically create new "comments" to bugzilla bugs when code
review topics are created/closed/committed, the following steps need
to be performed:

* Create a new bugzilla user, called "codestriker" via the Bugzilla
  UI.

* Determine the userid of this new user, by connecting to the bugzilla
  database using something like:
  
  mysql -u bugs bugs -p

  Omit the -p option if you have no database password.

  Then execute the query:

  SELECT userid FROM profiles WHERE
  login_name = 'codestriker@localhost.localdomain';

  Substitute the appropriate email address for the codestriker user
  just created.  Set this value in codestriker.conf, for
  $bug_db_user_id.  Also set $bug_db_host, $bug_db_name and
  $bug_db_password so Codestriker knows how to connect to the Bugzilla
  database.

When enabled, a newly topic with associated bugs will add a comment to
those bugs with details of the new codestriker topic (including the
URL).  Comments will also be added whenever the topic changes state.

When going to a bug page, it easy to determine what code was committed
against this bug, and what the review decisions were.

It should be trivial to add support for other bug tracking systems.

LXR integration
---------------

Codestriker has been integrated with LXR, so that when performing a
review, those identifiers known to LXR will be automatically
hyperlinked.  This is an enormous aid to the code reviewing process,
as you can quickly determine where a variable/function/method/class is
defined and where it is used quickly, while studying the proposed
changes.

The LXR home page is located at http://lxr.sourceforge.net.  The
integration has been tested with versions 0.9.2.

To enable LXR integration, you need to set the appropriate values in
the codestriker.conf file.

Also note, LXR at present doesn't seem to work with Taint checking.
To avoid errors, you'll need to comment out the "PerlTaintCheck On"
line in your httpd.conf file, and remove the -T switch from the
cgi-bin/codestriker.pl file.

Troubleshooting
---------------

If you have any problems, be sure to check first if it isn't a
well-known Perl problem.  The Bugzilla trouble-shooting page at
http://www.bugzilla.org/docs216/html/troubleshooting.html documents
them well.  If it doesn't match, send me an email, along with any
relevant information (including relevant contents of your apache error
log file), and I'll be happy to help you out.

Future plans
------------

Please mail me any other suggestions you have to
codestriker-user@lists.sourceforge.net or to me personally at
sits@users.sourceforge.net.  Contributions are most welcome!

Immediate work includes support for other source control management
systems, such as clearcase, and even possibly VSS if its possible.

Codestriker project page: http://codestriker.sourceforge.net
