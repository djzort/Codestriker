Codestriker v1.5.0b2
Copyright (c) 2001, 2002 David Sitsky.  All rights reserved.
sits@users.sourceforge.net
(see the CHANGELOG file for details on changes).
------------------------------------------------

Codestriker is a perl CGI script which is used for performing code
reviews in a collaborative fashion as opposed to using unstructured
emails.

Authors create code review topics, where the nominated reviewers will
be automatically notified by email.  Reviewers then submit comments
against the code on a per-line basis, and can also view comments
submitted by the other reviewers as they are created.  Emails are sent
to the appropriate parties when comments are created, as an alert
mechanism.  The author is also free to submit comments against the
review comments.

Once all reviewers have finished, the author has all
review comments available in a structured fashion, as
opposed to a pile of unstructured emails.

Special support is provided for integration with a CVS
repository, for the display of coloured diffs and for the
ability to view original and new files in their entirety
to assist in the review process.  Codestriker can be
optionally linked with a bug tracking system, such as
bugzilla, and a CVS web viewing system, such as CVS web to
obtain further information necessary to complete a review.

A tutorial on how to use codestriker can be seen from
http://codestriker.sourceforge.net

Installation
------------

Please read the CHANGELOG file for functionality changes between
releases.

Codestriker now uses a database for storing topic information.  It has
been tested with PostgreSQL and MySQL, and should work fine for other
databases, as it uses the Perl DBI.  Make sure you update
codestriker.conf appropriately for your setup.

----------------------------------------------------------------------

For MySQL, it is necessary to download the mysql, mysql-devel and
mysql-server packages (or equivalent for non-RedHat distros), install
them, and to then obtain the DBD::mysql package from
http://www.cpan.org.  Start your database with something like:
/etc/rc.d/init.d/mysql start

Then enter the following commands to create the Codestriker database,
and a codestriker database user with password "cspasswd".  Note, you
should substitute this with your own value, and update
codestriker.conf accordingly.

% mysql -u root mysql

CREATE DATABASE codestrikerdb;
GRANT SELECT,INSERT,UPDATE,DELETE,INDEX,ALTER,CREATE,DROP,REFERENCES ON codestrikerdb.* TO codestriker@localhost IDENTIFIED BY 'cspasswd';
FLUSH PRIVILEGES;
QUIT

You can then check the Codestriker database at any time using the
following command:

mysql -u codestriker -D codestrikerdb -p

Note you can remove the database by entering:

DROP DATABASE codestrikerdb;

from a "mysql -u root mysql" session.

----------------------------------------------------------------------

For PostgreSQL, download all of the relevant Postgres packages.  Make
sure your version is at least 7.1, as prior versions had heavy
restrictions on the size of "text" fields, which make it impractical
for use with Codestriker.  Start your database with something like:
/etc/rc.d/init.d/postgresql start

Download and install the DBD::Pg package from http://www.cpan.org.

To create the codestriker database and user, issue the following:

createuser --username=postgres -d -A codestriker
createdb --username=codestriker codestrikerdb

For Redhat, by default PostgreSQL accepts connections from the
localhost.  For Debian, if you want this behaviour, you may need to
change your /etc/postgres/pg_hba.conf file to use "trust" rather than
"ident" if appropriate for your setup.  I have found this to be
appropriate for my usage.

You can then check the database at any time using the following
command:

psql -U codestriker codestrikerdb

Note you can remove the database by entering:

dropdb --username=codestriker codestrikerdb

----------------------------------------------------------------------

I use Codestriker with Apache and mod_perl, although there is nothing
specific to Apache, so it should work fine for other web servers too
just as a plain CGI script.  This is how Codestriker is installed with
Apache under Redhat 7.1 (it will be something similar to this for
other distributions):

      mkdir /var/www/codestriker
      cd /var/www/codestriker
      tar zxvf /from/installed/location/codestriker.X.Y.Z.tar.gz
      chown -R apache.apache /var/www/codestriker
      cp /var/www/codestriker/codestriker.X.Y.Z/html/codestriker.css ../html

To create all of the necessary database tables, do the following:

      cd /var/www/codestriker/codestriker.X.Y.Z/bin
      ./checksetup.pl

Note checksetup.pl can be executed again and again.  It should be run
whenever codestriker is updated, as it will automatically adjust the
database accordingly, and check that the necessary tables exist.

Put the following lines in your httpd.conf file (probably located in
/etc/httpd/conf), so that the
http://yoursite.yourdomain/codestriker/codestriker.pl is the URL to
codestriker.

Alias /codestriker/  /var/www/codestriker/codestriker.X.Y.Z/cgi-bin/

<Location /codestriker>
 SetHandler  perl-script
 PerlHandler Apache::Registry
 Options +ExecCGI
</Location>

PerlTaintCheck On

Restart apache (for upgrades) with something like
"/etc/rc.d/init.d/httpd restart" and you should be away.

Migrating old data
------------------

If you are upgrading Codestriker from a version <= 1.4.X, you need to
migrate the data from the filesystem to the database if you want to
preserve exisitng data.  This is a very straightforward process,
simply do the following (assuming your database is up and running).

      cd /var/www/codestriker/codestriker.X.Y.Z/bin
      ./import.pl /var/www/codestriker

The argument is import.pl is the location of your previous Codestriker
installation.  By default, all imported topics are set to state
"Closed".  You may need to modify some to state open via your browser
for those topics which are still pending.

Compression support
-------------------

The pages generated from Codestriker can be quite large, depending on
the size of the review and the files involved.  It can send the HTML
as content-encoding x-gzip.  Browsers such as Netscape, Konqueror and
Mozilla supporting the handling of compressed data.  Unfortunately, IE
can't.  Using compression can make an enormous difference in the speed
of transfers, particularly over slow links.  If you have installed
Codestriker with mod_perl, and wish to use compression, you must also
install the Compress::Zlib module, available from CPAN
(http://www.cpan.org).  For non mod_perl installs, the gzip executable
can be used for compression.  When receiving a page from Codestriker,
the page source contains near the top within an HTML comment whether
the text was sent compressed or not.  To enable compression, you need
to turn that option on in the configuration file.  For an intranet
setup where the server is one hop away, compression will probably slow
things down if the review sizes are relatively small.  Its best to
experiment to see what works best for you.

Data storage
------------

Codestriker now stores all of its topic data and comments into a
database.  Both PostgreSQL and MySQL have been tested.  Other
databases should work, since Perl's DBI interface is used.

Codestriker settings
--------------------

Read through the configuration options within codestriker.pl and
codestriker.conf to ensure all the settings are correct for your site.
It is intended that codestriker.conf will remain fairly static, so
upgrades should be fairly painless.  Among other things, the settings
include the location of your CVS repository, the base URL to your bug
tracking system, and the base URL to your CVS viewing system.  Note
these settings can be left blank, they aren't required in order to use
Codestriker.

For deployments outside an intranet, I would suggest using apache's
".htaccess" mechanism to limit access as to who can execute the
script, as an extra security precaution.

Future plans
------------

Some basic things like the option to delete a topic, and some more
functionality on the view topic screen.  For using Codestriker over
the net where bandwidth is not a luxury (ie not a local LAN), it would
be friendlier if you could just load the topic page once, batch all of
your comments using javascript, and then send them all at once, rather
than having to reload the topic page for each comment that is
submitted.

Please mail me any other suggestions you have to
codestriker-user@lists.sourceforge.net.  Contributions are most
welcome!

Codestriker project page: http://sourceforge.net/projects/codestriker.
The latest version of codestriker can be obtained from:
http://codestriker.sourceforge.net.

