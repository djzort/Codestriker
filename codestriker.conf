# -*-perl-*-
# Configuration file for codestriker.pl.

# Database to use for storing codestriker data.  Examples given are Postgresql
# and MySQL
#$db = 'DBI:Oracle:';
#$db = 'DBI:Pg:dbname=codestrikerdb3';
$db = 'DBI:mysql:dbname=codestrikerdb';

# Database user.
#$dbuser = 'system';
$dbuser = 'codestriker';

# Database password.
#$dbpasswd = 'manager';
$dbpasswd = 'cspasswd';

# Location of the mailing host.  This is used when sending out codestriker
# comments.
$mailhost = 'localhost';

# Indicate whether to try and compress output if the client browser
# supports it.  This can make a tremendous difference in bandwidth,
# especially over slow links.
$use_compression = 0;

# Location of gzip.  Gzip is used only if you don't have Compress::Zlib
# installed.  Note, if running with mod_perl, you _must_ have Compress:Zlib
# installed.  If gzip is not available, this can be set to "".
$gzip = '/bin/gzip';

# Location of the cvs binary.
$cvs = '/usr/bin/cvs';

# Location of the vss binary.  This can be ignored for deployments which don't
# use VSS (Visual Source Safe).
$vss = 'C:/Program Files/Microsoft Visual Studio/Common/VSS/win32/vss.exe';

# If codestriker is installed differently to that described in the README file
# (for example on the sourceforge servers), it may be necessary to explicitly
# specify the location of the codestriker_css as a URL.
$codestriker_css = '';

# The URL to the bug tracking system.  The bug number is appended to the
# end of this string when URLs are generated.  This can be left blank if
# there is no need for bug-tracking integration.
$bugtracker = '';
#$bugtracker = 'http://localhost.localdomain/show_bug.cgi?id=';

# Valid repositories which may be selected at the create topic screen.
# The order shown here is the order presented in the option list.  The
# first example is the CVSROOT of a CVS repository on the same machine
# as the codestriker server.  The second is an example of a CVS
# repository which contains the URL to a viewcvs installation (CVS web
# is also supported), followed by the CVSROOT of the repository.  The
# next example is the syntax used for specifying a Subversion repository,
# which is simple the subversion repository URL prefixed by svn:
#
# The next example is a pserver repository.  The full username, password,
# hostname and repository form must be used here.  Typically, this would
# be set to an anonymous user.
#
# The final example is a VSS repository.
#
# If this list is empty it won't be possible to view the entire contents of a
# file before the proposed change and/or after. All of the places 
# in the application that ask for, or display repository information will
# be hidden and lastly, it will be impossible to make a diff review topic
# on files that already checked in.
#
# On some servers (such as sourceforge), the firewall doesn't allow CGI 
# scripts to make remote connections. 

@valid_repositories =
    (
     '/home/sits/cvs',
     'http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi /cvsroot',
     'svn:http://svn.collab.net/repos/svn/trunk',
     ':pserver:anonymous:password@cvs.sourceforge.net:/cvsroot',
     'vss:localhost'
    );

# A mapping of repositories to filename viewers.  Examples of such systems
# would be CVSweb and ViewCVS, for local repositories.  Mappings are
# not required for remote CVSweb and ViewCVS repositories, as they are
# viewers themselves.  When viewing reviews, links from filenames will be
# mapped to these URLs, to obtain revision log information for that file.
$file_viewer =
{
    '/home/sits/cvs' => 'http://localhost/cgi-bin/cvsweb.cgi'
};

# The number of problems found per line drops if the size of the 
# topic is too large. A common inspection pitfall is for authors to 
# attempt to review too much material and then miss problems. 
# These two options allow the Codestriker administrator to limit 
# the length of the topics. Topics that have more lines than 
# $maximum_topic_size_lines are rejected when they are created. 
# Topics that are larger than $suggested_topic_size_lines generate 
# a warning displayed in the topic page, but are accepted into the 
# system. Codestriker measures that length of the topic by counting 
# the number of lines in the topic text.
#
# The codestriker default of not enforcing any limits is specified by
# settings either option to an empty string. If you are not sure 
# what a resonable limit would be, start with a suggested_topic_size_lines
# set to 350, and adjust with experence.
$maximum_topic_size_lines = '';
$suggested_topic_size_lines = '';

# The default viewing mode to use in the URL when creating a topic.  Can
# be either ($NORMAL_MODE, $COLOURED_MODE or $COLOURED_MONO_MODE).  These
# values should not be changed.
$NORMAL_MODE = 0;
$COLOURED_MODE = 1;
$COLOURED_MONO_MODE = 2;

$default_topic_create_mode = $COLOURED_MODE;

# The default line break viewing mode to use in the URL when viewing a
# topic.  Can be either $LINE_BREAK_NORMAL_MODE or $LINE_BREAK_ASSIST_MODE.
# Using $LINE_BREAK_ASSIST_MODE indicates that extra line breaks may be
# used in the topic display if the review has very long code lines.  Using
# $LINE_BREAK_NORMAL_MODE will ensure that the display matches the line
# breaks present in the code.  The line break mode can also be changed
# dynamically in the view topic screen.  There is usually no need to
# change this setting unless you regularly review code with very long
# lines.
$LINE_BREAK_NORMAL_MODE = 1;
$LINE_BREAK_ASSIST_MODE = 2;

$default_topic_br_mode = $LINE_BREAK_NORMAL_MODE;

# List of valid topic states.  Note these values are mapped to the database
# depending on their position in the list.  ie, Open -> 0, Closed -> 1, etc.
# There is no problem added new states dynamically, or changing the textual
# names.  Note, the initial topic state must be the first element.  Unless
# you know what you are doing, these should be left unchanged.
@topic_states = ('Open', 'Closed', 'Committed');

# Indicate if topics can be deleted.  Turning this to false can be useful for
# "anonymous" installations of codestriker.
$allow_delete = 1;

# Indicate if topics can be listed/searched.  Turning this to false can be
# useful for "anonymous" installations of codestriker.
$allow_searchlist = 1;

# Indicate whether project operations (create, edit, list) can be performed.
$allow_projects = 1;

# If true, don't display any email addresses in their true form, but
# truncate them, to beat SPAM harvesters.
$antispam_email = 0;

# If true, codestriker will send out emails to the topic owner and
# comment submitter when a comment is added. If this option is false,
# no email will be sent to either the topic owner or the comment
# submitter. Emails about each comment may not be needed if a meeting
# is planned to discuss the topic. If the comment submitter specifies
# a cc user, an email is always sent out, regardless of this setting.
$allow_comment_email = 1;

# Default width of tabs.  Most developers expect this to be 8, but
# some expect to see 4.  This is also stored in the user's cookie, and
# can be changed dynamically on the view topic screen.
$default_tabwidth = 8;

# Bug database to update.  Currently, only Bugzilla is supported, but it is
# straight-forward to support other bug databases.  To enable bugzilla, set
# $bug_db to "bugzilla", and set the following parameters to your setup.
# if the $bug_db is an empty string, all bug-tracking related features will
# be disabled.
$bug_db = '';
#$bug_db = 'bugzilla';

# Bug database connection details.
$bug_db_host = 'localhost';
$bug_db_name = 'bugs';
$bug_db_password = 'bugs_password';
$bug_db_dbname = 'bugs';

# Bugzilla codestriker user id.
$bug_db_user_id = '2';

# LXR database.  Each repository can be optionally mapped to a
# different LXR deployment.  If a repository has an associated LXR
# mapping, then create a new entry where the repository string is the
# key, and the value is another map, where "db" is the LXR database
# URL, "user" is the database user, "password" is the data password,
# and "url" is the base LXR URL for viewing where an identifier is
# defined/used.
$lxr_map = 
{
#    '/home/sits/cvs' => { db => 'DBI:Pg:dbname=lxr',
#			  user => 'lxr',
#			  password => '',
#			  url => 'http://localhost.localdomain/lxr/ident?i='
#			},
#
#     'svn:http://svn.collab.net/repos/svn/trunk' =>
#                        { db => 'DBI:Pg:dbname=lxr2',
#			  user => 'lxr',
#			  password => '',
#			  url => 'http://localhost.localdomain/lxr2/ident?i='
#			}
};

# Textual representations of the comment states. The order is
# important. The state at index 0, is the default state that the
# comments are created in. The state information is stored in the
# database by index, so renaming is ok, reordering them is not ok. You
# can add more state, or rename the default states with no problem.
@comment_states = ("Submitted", "Invalid", "Completed");

# Allows you to override the default title of "Codestriker %version%".
# $title = "Codestriker $Codestriker::VERSION";

