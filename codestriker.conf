# -*-perl-*-
# Configuration file for codestriker.pl.

# Location of where to store the code review data.  Make sure the
# permissions are set appropriately.  If running apache, make sure the
# following directory is writable to the user running httpd (usually
# "nobody" or "apache").  Each topic is stored in its own sub-directory,
# whose name is just a random bunch of digits.

# Database to use for storing codestriker data.  Examples given are Postgresql
# and MySQL
$db = "DBI:Pg:dbname=codestrikerdb";
#$db = "DBI:mysql:dbname=codestrikerdb";

# Database user.
$dbuser = "codestriker";

# Database password.
#$dbpasswd = "";
$dbpasswd = "cspasswd";

# Location of sendmail.
$sendmail = "/usr/lib/sendmail";

# Indicate whether to try and compress output if the client browser
# supports it.  This can make a tremdous difference in bandwidth,
# especially over slow links.
$use_compression = 0;

# Location of gzip.  Gzip is used only if you don't have Compress::Zlib
# installed.  Note, if running with mod_perl, you _must_ have Compress:Zlib
# installed.  If gzip is not available, this can be set to "".
$gzip = "/bin/gzip";

# The URL to the bug tracking system.  The bug number is appended to the
# end of this string when URLs are generated.
$bugtracker = "";
$bugtracker = "http://localhost.localdomain/show_bug.cgi?id=";

# The URL to the CVS viewing system.  The filename is appended to the end
# of this string when URLs are generated.
$cvsviewer = "";
#$cvsviewer = "http://localhost.localdomain/cgi-bin/viewcvs.cgi/";
$cvsviewer = "http://localhost.localdomain/cgi-bin/cvsweb.cgi/";

# Set this to the path of the CVS repository.
$cvsrep = "";
#$cvsrep = "/usr/local/cvsroot";
$cvsrep = "/home/sits/cvs";

# The CVS command to execute in order to retrieve the contents for a
# specific revision and file.  Note this is in single quotes, as it
# will be eval'ed at runtime.
$cvscmd = '/usr/bin/cvs -d $cvsrep co -p -r $revision $filename';
#$cvscmd = '/usr/bin/curl ${cvsviewer}~checkout~/${filename}?rev=${revision}&content-type=text/plain';

# The location of the codestriker.css file on this site.
$codestriker_css = "/codestriker.css";

# The default viewing mode to use in the URL when creating a topic.  Can
# be either ($NORMAL_MODE, $COLOURED_MODE or $COLOURED_MONO_MODE).
$NORMAL_MODE = 0;
$COLOURED_MODE = 1;
$COLOURED_MONO_MODE = 2;

$default_topic_create_mode = $NORMAL_MODE;

# List of valid topic states.  Note these values are mapped to the database
# depending on their position in the list.  ie, Open -> 0, Closed -> 1, etc.
# There is no problem added new states dynamically, or changing the textual
# names.  Note, the initial topic state must be the first element.
@topic_states = ("Open", "Closed", "Committed");

# Default width of tabs.  Most developers expect this to be 8, but
# some expect to see 4.  This is also stored in the user's cookie, and
# can be changed dynamically on the view topic screen.
$default_tabwidth = 8;

# Bug database to update.  Currently, only Bugzilla is supported, but it is
# straight-forward to support other bug databases.  To enabled bugzilla, set
# $bug_db to "bugzilla", and set the following parameters to your setup.
#$bug_db = "";
$bug_db = "bugzilla";

# Bug database connection details.
$bug_db_host = "localhost";
$bug_db_name = "bugs";
$bug_db_password = "bugs_password";

# Bugzilla codestriker user id.
$bug_db_user_id = "2";

# LXR database.  Set the variable to the appropriate database to enable
# LXR integration.
$lxr_db = "";
#$lxr_db = "DBI:Pg:dbname=lxr";

# LXR database username and password.
$lxr_user = "lxr";
$lxr_passwd = "";

# The base LXR URL for identifier lookups.
$lxr_idlookup_base_url = "http://localhost.localdomain/lxr/ident?i=";
