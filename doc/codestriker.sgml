<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN">

<book>
  <bookinfo>
    <title>The Codestriker Guide</title>
    <subtitle>Version 1.7.3</subtitle>
    <authorgroup>
      <author>
        <firstname>David</firstname>
	<surname>Sitsky</surname> 
      </author>	
    </authorgroup>
  </bookinfo>
  <toc></toc>

  <chapter>
    <title>Introduction</title>
    <sect1>
      <title>What is Codestriker?</title>
      <para>
        Codestriker is a web application which facilitates
        collaborative code reviewing.  Authors create code review
        topics, where the nominated reviewers will be automatically
        notified by email.  Reviewers then submit comments against the
        code on a per-line basis, and can also view comments submitted
        by the other reviewers as they are created.  Emails are sent
        to the appropriate parties when comments are created, as an
        alert mechanism.  The author is also free to submit comments
        against the review comments.  Once all reviewers have
        finished, the author has all review comments available in a
        structured fashion.  All information is stored in a relational
        database, which Codestriker can search over.
      </para>
      <para>
        Special support is provided for integration with CVS and
	Subversion source control management systems, for the display
	of coloured diffs and for the ability to view original and new
	files in their entirety to assist in the review process.
	Codestriker can be optionally linked with a bug tracking
	system, such as Bugzilla.  Other SCM systems, such as
	ClearCase and VSS will be added in future releases, given help
	from the developer community.  Codestriker can also be linked
	with
	<ulink url="http://lxr.sourceforge.net">LXR</ulink> to allow
	for fast lookup of code, to assit in the review process.
      </para>
      <para>
        Codestriker is written in Perl in a cross-platform style.  It
        can run on any variant of UNIX (Linux, *BSD) and has been
        tested and installed on Windows 98 and above.  The Codestriker
        project page is located at:
	<ulink url="http://codestriker.sourceforge.net">http://codestriker.sourceforge.net</ulink>
      </para>
    </sect1>
    <sect1>
      <title>Document Structure</title>
      <para>
        The remainder of this document is in three parts.  The next
        part is concerned with installing Codestriker and customising
        it.  Following that is the user's guide.  Lastly, details on
        Codestriker's code structure, database schema is presented.
      </para>
    </sect1>
  </chapter>

  <chapter>
    <title>Installation</title>
    <para>
      This chapter is concerned with installing Codestriker on your
      system.  This requires the following steps:
      <itemizedlist>
        <listitem><para>Creating the Codestriker database;</para></listitem>
        <listitem><para>Configuring the webserver; and</para></listitem>
        <listitem>
	  <para>Unpacking and configuring Codestriker.</para>
	</listitem>
      </itemizedlist>             
    </para>

    <sect1 id="codestriker-database-creation">
      <title>Codestriker database creation</title>
      <para>
        Codestriker stores all code review topics and comments into a
        relational database.  Currently, MySQL and PostgreSQL are
        supported, but any database system can be used provided it has
        an implementation of Perl's DBI interface.
      </para>
      <sect2>
        <title>Using MySQL</title>
	<para>
	  MySQL can be used on either *NIX or Window platforms.  It is
	  available for download from
	  <ulink
	  url="http://www.mysql.com">http://www.mysql.com</ulink>.
	  For Linux RedHat distributions, the necessary packages
	  required are mysql mysql-devel, mysql-server, which may or
	  may not already be present on your system.  Depending on
	  your *NIX distribution, starting mysql will be something
	  like the following:
	  <programlisting>
/etc/rc.d/init.d/mysql start
          </programlisting>
	  For Windows, there will typically be a desktop icon or menu
	  shortcut for starting mysqld.
	</para>
	<para>
	  Once mysql is running, it is necessary to create the
	  codestriker database and create the codestriker user.  Under
	  *NIX, a command like the following will be required:
	  <programlisting>
% mysql -u root mysql
          </programlisting>
          For Windows, there should be a shortcut available for
          getting a mysql prompt.
	</para>
	<para>
	  At the mysql prompt, issue the following command, but
	  substitute a suitable database password instead of cspasswd
	  as shown here.
	  <programlisting>
CREATE DATABASE codestrikerdb;

GRANT SELECT,INSERT,UPDATE,DELETE,INDEX,ALTER,CREATE,DROP,REFERENCES
 ON codestrikerdb.* TO codestriker@localhost IDENTIFIED BY 'cspasswd';

FLUSH PRIVILEGES;

QUIT
          </programlisting>
	 </para>
	 <para>
	   You can check the Codestriker database at any time from the
	   command line, by issuing the following command, and
	   entering the database password:
	  <programlisting>
mysql -u codestriker -D codestrikerdb -p
          </programlisting>
	 </para>
	 <para>
	   If required, the Codestriker database can be dropped, by
	   entering in the following command at the mysql command
	   prompt as user root:
	  <programlisting>
DROP DATABASE codestrikerdb;
          </programlisting>
	 </para>
      </sect2>
      <sect2>
        <title>Using PostgreSQL</title>
	<para>
	  At the time of writing PostgreSQL was only available for
	  *NIX platforms, however it is quite possible by the time you
	  are reading this that a version for Windows is available.
	  The project page for PostgreSQL is:
	  <ulink
	  url="http://www.postgresql.org">http://www.postgresql.org</ulink>.
	  For Linux RedHat distributions, the postgresql,
	  postgresql-server and postgresql-devel packages are
	  required.  Make sure you are using at least version 7.1, as
	  prior versions had restrictions on the size of "text"
	  fields, making it impractical for use with Codestriker.
	  PostgreSQL can be started with a command like:
	  <programlisting>
/etc/rc.d/init.d/postgresql start
          </programlisting>
	</para>
	<para>
	  To create the Codestriker database and user, enter the
	  following commands:
	  <programlisting>
% createuser --username=postgres -d -A codestriker
% createdb --username=codestriker codestrikerdb
          </programlisting>
	</para>
	<para>
	  Make sure your <filename>pg_hba.conf</filename> file is
	  suitable configurated, in particular for authentication.
	  This file is often located in
	  <filename>/etc/postgres</filename>.
	</para>
	<para>
	  You can check the Codestriker database interactively at any
	  time with the following command:
	  <programlisting>
% psql -U codestriker codestrikerdb
          </programlisting>
	</para>
	 <para>
	   If required, the Codestriker database can be dropped, by
	   entering in the following command:
	  <programlisting>
% dropdb --username=codestriker codestrikerdb
          </programlisting>
	 </para>
      </sect2>
      <sect2>
        <title>Other Databases</title>
	<para>
	  Codestriker is written using the Perl DBI package, which
	  makes it portable for use between different databases.
	  Apart from the specifics of creating the database and
	  starting it, Codestriekr should work without change for
	  other databases.
	</para>
      </sect2>
    </sect1>

    <sect1>
      <title>Configuration</title>
      <para>
        This section is concerned with unpacking the Codestriker
        distribution into a suitable location, and then configuring
        it.  For *NIX distribution, a command like the following may
        be appropriate on your system:
	<programlisting>
% mkdir /var/www/codestriker
% cd /var/www/codestriker
% tar zxvf /from/installed/location/codestriker-X.Y.Z.tar.gz
% chown -R apache.apache /var/www/codestriker/codestriker-X.Y.Z
	</programlisting>
	Here "apache" is the user which runs the Apache server.  It
	could be "nobody" under different systems.  Check with the "ps
	auxww" command, or check your Apache configuration files.
      </para>
      <para>
        Under Windows, the Codestriker distribution could be unzipped
        into a suitable location under c:\program files, or just
        c:\codestriker.  The next task to to edit the
        <filename>codestriker.conf</filename> configuration file to
        reflect the settings on your site.  The file is documented
        with examples to assist in setting appropriate values.  The
        file is in Perl syntax, so lines starting with a '#' indicate
        a comment.
      </para>
      <sect2>
        <title>Codestriker Database</title>
	<para>
	  The <varname>$db</varname> variable should be set to a DBI
	  URL representing the Codestriker database that was created,
	  as specified in <xref
	  linkend="codestriker-database-creation">.  Basically, if you
	  are using PostgreSQL, this should be:
<programlisting>
$db = 'DBI:Pg:dbname=codestrikerdb';
</programlisting>
          For MySQL, this would be:
<programlisting>
$db = 'DBI:mysql:dbname=codestrikerdb';
</programlisting>
          If your database is suituated on a different host, for
          example "dbhost", this could be modified to:
<programlisting>
$db = 'DBI:mysql:dbname=codestrikerdb;host=dhhost';
</programlisting>
        The database user and password also need to be specified.  If
        your username was "codestriker", and the password was
        "cspasswd", the settings would be just:
<programlisting>
# Database user.
$dbuser = 'codestriker';

# Database password.
$dbpasswd = 'cspasswd';
</programlisting>
	</para>
      </sect2>

      <sect2>
        <title>Email</title>
	<para>
	  When a code review topic is created, or a comment against a
	  review is made, an email is sent out as a notification
	  mechanism.  Codestriker needs to know what mail host it can
	  use for sending email messages.  The configuration file
	  default is "localhost":
	  <programlisting>
# Location of the mailing host.  This is used when sending out codestriker
# comments.
$mailhost = 'localhost';
           </programlisting>
	</para>
      </sect2>

      <sect2>
        <title>Compression</title>
	<para>
	  Some of the HTML pages generated by Codestriker can be quite
	  large, depending on the review size.  If your deployment is
	  operating to users outside an intranet, it may be worth
	  enabling this option to enable compression.  Note, IE
	  doesn't support receiving compressed HTML, so setting this
	  option will have no effect.  Initially, it is best to leave
	  this option turned off (the default), and only to enable it
	  if there is a significant performance problem.
	  <programlisting>
# Indicate whether to try and compress output if the client browser
# supports it.  This can make a tremendous difference in bandwidth,
# especially over slow links.
$use_compression = 0;
	  </programlisting>
	</para>
      </sect2>

      <sect2>
        <title>Source Code Management Systems</title>
	<para>
	  This part of the configuration deals with informing
	  Codestriker what source code control systems you use.  By
	  doing this, Codestriker can then display reviews with
	  revision information, and then allow the reviewer to view
	  the entire contents of a file before a change, and with a
	  change applied.  When a review is created, the user
	  specifies which source control system it is applied against
	  (there may not be any, if it is just a simple patch or text
	  file).  For many Codestriker deployments, there may only be
	  a single SCM system.  The configuration file has the
	  following default value which needs to be changed:
	  <programlisting>
@valid_repositories =
    (
     '/home/sits/cvs',
     'http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi /cvsroot',
     'svn:http://svn.collab.net/repos/svn/trunk',
     ':pserver:anonymous:password@cvs.sourceforge.net:/cvsroot'
    );
	  </programlisting>
	  This is Perl syntax for a list of string values.  The first
	  value indicates a CVS repository on the same machine as
	  Codestriker, which has a CVSROOT of
	  <filename>/home/sits/cvs</filename>.
	</para>
	<para>
	  If you have ViewCVS installed on your site, Codestriker can
	  use it directly for CVS information, if CVS is not installed
	  on the same machine.  The second value
	  <filename>http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi /cvsroot</filename>
	  contain the base URL for accessing ViewCVS, and the second
	  part contains the CVSROOT value of this repository, which is
	  <filename>/cvsroot</filename>.
	</para>
	<para>
	  Codestriker can also work with other source control systems.
	  There is currently support for Subversion (<ulink
	  url="http://subversion.tigris.org">http://subversion.tigris.org</ulink>),
	  and in the future, VSS, ClearCase, and any other SCM system
	  depending on demand and conrtibutions.  The third string
	  <filename>svn:http://svn.collab.net/repos/svn/trunk</filename>
	  is a Subversion repository URL prefixed by "svn:".
	</para>
	<para>
	  The last value which is likely to be common for many
	  deployment is a CVS pserver specification.  The string is
	  actually in the same form as a CVS pserver URL.  For more
	  information of setting up anonymous pserver access, please
	  consult the CVS manual.
	</para>
	<para>
	  During a review, it is sometimes benefical to see the
	  revision history of a file, such as information provided by
	  CVSweb or ViewCVS.  You can specify a mapping of repository
	  names to URLs for this purpose, for example:
	  <programlisting>
$file_viewer =
{
    '/home/sits/cvs' => 'http://localhost/cgi-bin/cvsweb.cgi'
};
	  </programlisting>
	  This indicates that for any review made against the
	  <filename>/home/sits/cvs</filename> repository, file
	  revision information can be found using the URL specified.
	</para>
	<para>
	  Finally, if you are using CVS, please make sure the
	  <varname>$cvs</varname> is set to the correct path.  For
	  *NIX, this is likely to be something like:
	  <programlisting>
# Location of the cvs binary.
$cvs = '/usr/bin/cvs';
	  </programlisting>
	  For Windows, this could be something like:
	  <programlisting>
# Location of the cvs binary.
$cvs = 'c:/gnu/bin/cvs';
	  </programlisting>
	  <emphasis>Note the use of '/' characters, rather than '\'.
	  Even under Windows, when setting filenames, you should
	  always use forward slashes.</emphasis>
	</para>
      </sect2>
      <sect2>
        <title>Bug-Tracking Integration</title>
	<para>
	  It is often useful to link the creation of code review
	  topics with the associated bug records that the code is
	  fixing.  That way, it is possible to read a bug record, and
	  apart from reading the textual description as to how it has
	  been resolved, Codestriker can add in a link to the code
	  review topic, which shows the actual code which fixed the
	  bug (and any important decisions).  Currently, there is only
	  support for Bugzilla, but it is not difficult to add in
	  support for other systems.
	</para>
	<para>
	  If you don't use Bugzilla (<ulink
	  url="http://bugzilla.mozilla.org">http://bugzilla.mozilla.org</ulink>),
	  you can skip this section, as by default, there is no
	  linking to a bug tracking system.  An example configuration
	  could be as follows:
	  <programlisting>
# Bug tracking type.
$bug_db = 'bugzilla';

# Bug database connection details.
$bug_db_host = 'localhost';
$bug_db_name = 'bugs';
$bug_db_password = 'bugs_password';

# Bugzilla codestriker user id.
$bug_db_user_id = '2';
	  </programlisting>
	  The <varname>$bug_db</varname> variable indicates to use
	  Bugzilla.  If this value is set to '', then no linkage to a
	  bug tracking system is performed (the default).
	</para>
	<para>
	  The <varname>$bug_db_host</varname> indicates the hostname
	  that holds the bugzilla database, while
	  <varname>$bug_db_name</varname> and
	  <varname>$bug_db_password</varname> contain the database
	  username and password to connect to the Bugzilla database.
	  You can verify these settings by using
	  <command>mysql</command> to connect to the Bugzilla
	  database interactively.
	</para>
	<para>
	  Codestriker adds "comments" to the appropriate bug record
	  whenever a code review topic has been created against it, or
	  the review's state has changed.  To do this, a special
	  Bugzilla user needs to be created which the comments will be
	  created against.  Create the user using the Bugzilla
	  interface, and call it "codestriker@yourhost.yourdomain".
	  Then connect to the Bugzilla database using
	  <command>mysql</command>, and execute the following command
	  to determine the userid of the user just created:
	  <programlisting>
SELECT userid FROM profiles WHERE
login_name = 'codestriker@yourhost.yourdomain';
	  </programlisting>
	  This value should be set into the
	  <varname>$bug_db_user_id</varname> variable.
	  <programlisting>
# Bugzilla codestriker user id.
$bug_db_user_id = '2';
	  </programlisting>
	</para>
      </sect2>
      <sect2>
        <title>LXR Integration</title>
	<para>
	  Codestriker has been integrated with LXR, so that when
	  performing a review, those identifiers known to LXR will be
	  automatically hyperlinked.  This is an enormous aid to the
	  code reviewing process, as you can quickly determine where a
	  variable/function/method/class is defined and where it is
	  used quickly, while studying the proposed changes.
	</para>
  
        <para>
	  The LXR home page is located at <ulink
	  url="http://lxr.sourceforge.net">http://lxr.sourceforge.net</ulink>.
	  The integration has been tested with LXR version 0.9.2.
	</para>

        <para>
	  Its possible that each source code repository is associated
	  with a different LXR deployment.  The default configuration
	  file shows an example:
	  <programlisting>
$lxr_map = 
{
    '/home/sits/cvs' => { db => 'DBI:Pg:dbname=lxr',
			  user => 'lxr',
			  password => '',
			  url => 'http://localhost.localdomain/lxr/ident?i='
			},

     'svn:http://svn.collab.net/repos/svn/trunk' =>
                        { db => 'DBI:Pg:dbname=lxr2',
			  user => 'lxr',
			  password => '',
			  url => 'http://localhost.localdomain/lxr2/ident?i='
			}
			  
};
	  </programlisting>
	  This is basically fancy Perl syntax for a map.  In this
	  instance, there are two keys,
	  <filename>/home/sits/cvs</filename> and
	  <filename>'svn:http://svn.collab.net/repos/svn/trunk</filename>,
	  which represent the source control repositories specified
	  above with <varname>@valid_repositories</varname>.
	</para>
	<para>
	  Each key is mapped to an object containing four attributes.
	  The <varname>db</varname> attribute is a DBI URL of the LXR
	  database, <varname>user</varname> is the database username,
	  <varname>password</varname> is the database password, and
	  <varname>url</varname> is the URL of the LXR deployment for
	  the identifier search page.
	</para>
	<para>
	  If you don't have LXR installed, you can simply set this
	  variable as follows:
	  <programlisting>
$lxr_map = 
{
};
	  </programlisting>
	</para>
	<para>
	  Also note, LXR at present doesn't seem to work with Taint
	  checking.  To avoid errors, you'll need to comment out the
	  "PerlTaintCheck On" line in your Apache
	  <filename>httpd.conf</filename> file, and remove the -T
	  switch at the top of the
	  <filename>bin/codestriker.pl.base</filename> file.
	</para>
      </sect2>
      <sect2>
        <title>Deployment Options</title>
	<para>
	  There are a number of other options which affect how
	  Codestriker runs.  The four most important are shown below.
	  Unless you have specific reasons to, most intranet
	  deployments of Codestriker can leave these options as is.
	  <programlisting>
# Indicate if topics can be deleted.  Turning this to false can be useful for
# "anonymous" installations of codestriker.
$allow_delete = 1;

# Indicate if topics can be listed/searched.  Turning this to false can be
# useful for "anonymous" installations of codestiker.
$allow_searchlist = 1;

# Indicate if the repository attribute can be set to a topic.  If this
# is disabled, it won't be possible to view the entire contents of a
# file before the proposed change and/or after.  On some servers (such
# as sourceforge), the firewall doesn't allow CGI scripts to make
# remote connections.
$allow_repositories = 1;

# Indicate whether project operations (create, edit, list) can be performed.
$allow_projects = 1;

# If true, don't display any email addresses in their true form, but
# truncate them, to beat SPAM harvesters.
$antispam_email = 0;
	  </programlisting>
	</para>
      </sect2>
    </sect1>

    <sect1 id="running-checksetup.pl">
      <title>Running checksetup.pl</title>
      <para>
        The <filename>checksetup.pl</filename> script located in
        <filename>bin</filename> <emphasis>must</emphasis> be run
        before Codestriker can be used, or after each upgrade.  There
        is no harm in running it as many times as you like.  The
        purpose of the script is to ensure all of the necessary pieces
        on your system are installed, and complains if they aren't.
      </para>
      <para>
        For Window systems, edit the first line from the files
        <filename>bin/checksetup.pl</filename> and
        <filename>bin/codestriker.pl.base</filename>.  For example, if
        you have Perl installed in <filename>c:\perl\perl</filename>,
        then the first line of <filename>bin/checksetup.pl</filename>
        should look like:
<programlisting>
#!c:/perl/perl -w
</programlisting>
        The first line of <filename>bin/codestriker.pl.base</filename>
        should look like:
<programlisting>
#!c:/perl/perl -wT
</programlisting>
        <emphasis>Note the use of forward slashes.</emphasis>
      </para>
      <para>
        Perl is available by default for all *NIX systems.  For
        Windows, you can download it from <ulink
        url="http://www.activestate.com/Products/Download/Download.plex?id=ActivePerl">http://www.activestate.com/Products/Download/Download.plex?id=ActivePerl</ulink>.
        Missing Perl modules can be downloaded with the
        <command>ppm</command> command typed at the command prompt,
        for Windows, which is the Perl Package Manager.  Installing
        new Perl modules is easy.  To install the DBI module, simply
        type in the following at the <command>ppm</command> prompt.
<programlisting>
install DBI
</programlisting>
        This will retrieve the DBI package and install it on your
        system.
      </para>
      <para>
        Codestriker requires the following Perl modules in order to
        run:
<programlisting>
LWP::UserAgent
CGI
CGI::Carp
Net::SMTP
DBI
IPC::Run
Template
HTML::Entities
</programlisting>
      You'll also require <filename>DBD::Pg</filename> for PostgreSQL
      or <filename>DBD::Mysql</filename> for MySQL, depending on which
      database you are using.  Its quite possible that you already
      have all/most of these modules on your system.  Running the
      <filename>checksetup.pl</filename> script will check this for
      you automatically.
      </para>
      <para>
        To run <filename>checksetup.pl</filename> under *NIX, do the
        following:
<programlisting>
% cd /codestriker/install/location/bin
% ./checksetup.pl
</programlisting>
        For Windows, you need to do something like the following from
        the command prompt:
<programlisting>
% cd c:\codestriker\bin
% perl checksetup.pl
</programlisting>
      </para>
      <para>
        This will tell you what missing Perl modules you have, and
        will then attempt to try and initialise the Codestriker
        database.  Make sure your database is running, and that you
        have the necessary DBD::Pg/DBD::Mysql modules installed.
      </para>
    </sect1>

    <sect1>
      <title>Webserver configuration</title>
      <para>
        This section deals with deploying Codestriker on a webserver.
        Codestriker can run as an ordinary CGI script, which allows it
        to run under any CGI-complaint webserver.  The following
        configuration details are specific for the Apache webserver
        (<ulink
        url="http://httpd.apache.org">http://httpd.apache.org</ulink>),
        which is available for download for both *NIX and Window
        platforms.  Apache should be already available for most *NIX
        distributions.
      </para>
      <para>
        <emphasis>Note any Codestriker or Apache configuration changes
        require the Apache server to be restarted.</emphasis>  For
        *NIX, a command like the following is required:
<programlisting>
/etc/init.d/httpd restart
</programlisting>
        or
<programlisting>
/etc/init.d/apache restart
</programlisting>
      </para>
      <para>
        For Windows, the Apache shell window can be terminated by
        pressing ^C, and started from the Windows menu.  There are
        also shortcuts from the menu for editing the Apache
        configuration file.
      </para>
      <sect2>
        <title>CGI Script</title>
	<para>
	  If you installed Codestriker into
	  <filename>/var/www/codestriker/codestriker-X.Y.Z</filename>,
	  the configuration you need in your
	  <filename>apache.conf</filename> file (normally located in
	  either
	  <filename>/etc/httpd.conf</filename>,
	  <filename>/etc/apache.conf</filename> or
	  <filename>/etc/httpd/conf/httpd.conf</filename>) is the
	  following:
<programlisting>
ScriptAlias /codestriker/  /var/www/codestriker/codestriker-X.Y.Z/cgi-bin/
Alias /codestrikerhtml/  /var/www/codestriker/codestriker-X.Y.Z/html/

&lt;Directory "/var/www/codestriker/codestriker-X.Y.Z/cgi-bin/"&gt;
   AllowOverride None
   Options ExecCGI
   Order allow,deny
   Allow from all
&lt;/Directory&gt;

&lt;Directory "/var/www/codestriker/codestriker-X.Y.Z/html/"&gt;
   AllowOverride None
   Allow from all
&lt;/Directory&gt;
</programlisting>
         For Windows, the configuration is the same, but filename
         paths should use '/' rather than '\'.  An example
         configuration could be the following, if Codestriker was
         installed in
         <filename>c:\codestriker\codestriker-X.Y.Z</filename>.
<programlisting>
ScriptAlias /codestriker/ "C:/codestriker/codestriker-X.Y.Z/cgi-bin/"
Alias /codestrikerhtml/ "C:/codestriker/codestriker-X.Y.Z/html/"

&lt;Directory "C:/codestriker/codestriker-X.Y.Z/cgi-bin/"&gt;
   AllowOverride None
   Options ExecCGI
   Order allow,deny
   Allow from all
&lt;/Directory&gt;

&lt;Directory "C:/codestriker/codestriker-X.Y.Z/html/"&gt;
   AllowOverride None
   Allow from all
&lt;/Directory&gt;
</programlisting>
	</para>
      </sect2>
      <sect2>
        <title>Apache 1.X mod_perl</title>
	<para>
	  Using <command>mod_perl</command> provides performance
	  benefits for Perl-based web applications.  For CGI
	  deployments, as described in the previous section, each HTTP
	  request will create a <emphasis>new</emphasis> Perl
	  interpretor, which needs to initialise, and then parse the
	  Codestriker source code.  This can add significant latency
	  for each HTTP request.
	</para>
	<para>
	  Using <command>mod_perl</command>, a pool of Perl
	  intrepretors which have already parsed the Codestriker
	  source code is maintained, so that whenever an HTTP request
	  is issued, the time spent creating a new Perl interpretor
	  and the parsing of the Codestriker code is removed.
	</para> 
	<para>
	  <command>Mod_perl</command> is available for download from
	  <ulink
	  url="http://perl.apache.org">http://perl.apache.org</ulink>.
	  For most *NIX distributions, it is available by default with
	  Apache.  For installing <command>mod_perl</command> under
	  Windows, <ulink
	  url="http://www.webmatrix.net/log/modperl-win32">http://www.webmatrix.net/log/modperl-win32</ulink>
	  contains installation information.  One point to note
	  however, I found I could not run ppm as <command>ppm
	  --location=...</command> as shown on this site, but had to
	  run ppm interactively, and issue commands like:
<programlisting>
ppm
set location http://theoryx5.uwinnipeg.ca/ppmpackages
set save
install mod_perl
</programlisting>
	</para>
	<para>
	  The following shows the configuration settings for an Apache
	  1.X server with <command>mod_perl</command> enabled, for a
	  Codestriker distribution installed in
	  <filename>/var/www/codestriker/codestriker-X.Y.Z</filename>.
<programlisting>
Alias /codestriker/  /var/www/codestriker/codestriker-X.Y.Z/cgi-bin/
Alias /codestrikerhtml/  /var/www/codestriker/codestriker-X.Y.Z/html/

&lt;Directory "/var/www/codestriker/codestriker-X.Y.Z/cgi-bin/"&gt;
   SetHandler perl-script
   PerlHandler Apache::Registry
   Options +ExecCGI
&lt;/Directory&gt;

&lt;Directory "/var/www/codestriker/codestriker-X.Y.Z/html/"&gt;
   AllowOverride None
   Allow from all
&lt;/Directory&gt;
</programlisting>
          The settings for Windows are the same, only the pathnames
          will be different, as per the CGI configuration in the
          previous section.
	</para>
	<para>
	  For extra security, Codestriker supports Perl taint-mode, so
	  it is advisable to also have the following option in your
	  Apache config:
<programlisting>
PerlTaintCheck On
</programlisting>
          Note if you are using LXR on the same webserver, this option
          cannot be used.  You'll also need to remove the
          <option>-T</option> argument from
          <filename>bin/codestriker.pl.base</filename>, and re-run
          <command>checksetup.pl</command> again (see <xref
          linkend="running-checksetup.pl">) if you want to use
          Codestriker and LXR.
	</para>
      </sect2>
      <sect2>
        <title>Apache 2.X mod_perl</title>
	<para>
	  For Apache 2.X, make sure the <command>mod_perl</command>
	  module is loaded when Apache starts.  Near the top of the
	  Apache config file, you should see commands like the
	  following:
<programlisting>
LoadModule perl_module modules/mod_perl.so
PerlModule Apache2
</programlisting>
          If these commands aren't present, and a Perl startup file is
          not being used, make sure these are added in.
	</para>
	<para>
	  The Codestriker configuration for Apache 2.X is very
	  similar, the only change is the name of the PerlHandler.
<programlisting>
Alias /codestriker/  /var/www/codestriker/codestriker-X.Y.Z/cgi-bin/
Alias /codestrikerhtml/  /var/www/codestriker/codestriker-X.Y.Z/html/

&lt;Directory "/var/www/codestriker/codestriker-X.Y.Z/cgi-bin/"&gt;
   SetHandler perl-script
   PerlHandler ModPerl::Registry
   Options +ExecCGI
&lt;/Directory&gt;

&lt;Directory "/var/www/codestriker/codestriker-X.Y.Z/html/"&gt;
   AllowOverride None
   Allow from all
&lt;/Directory&gt;
</programlisting>
	</para>
	<para>
	  To enable Perl taint mode checking, using the following
	  option:
<programlisting>
PerlSwitches -T
</programlisting>
	</para>
      </sect2>
      <sect2>
        <title>Other Webservers</title>
	<para>
	  There is no Apache-specific code in Codestriker, so it
	  should work fine as a vanilla CGI script for other
	  webservers.  If you have success running it under another
	  webserver, please pass this information on so that it can be
	  incorporated into this guide (see <xref linkend="contact">).
	</para>
      </sect2>
    </sect1>
  </chapter>

  <chapter>
    <title>User's Guide</title>
    <sect1>
      <title>Introduction</title>
      <para></para>
    </sect1>
    <sect1>
      <title>Topic List Screen</title>
      <para></para>
    </sect1>
    <sect1>
      <title>Creating a new Project</title>
      <para></para>
    </sect1>
    <sect1>
      <title>Creating a new Topic</title>
      <sect2>
	<title>Creating CVS Diff Topics</title>
	<para></para>
      </sect2>
      <sect2>
        <title>Creating Patch Topics</title>
	<para></para>
      </sect2>
      <sect2>
	<title>Creating Subversion Diff Topics</title>
	<para></para>
      </sect2>
    </sect1>
    <sect1>
      <title>Reviewing Topics</title>
      <sect2>
	<title>Viewing the Topic</title>
	<para></para>
      </sect2>
      <sect2>
	<title>Adding a Comment</title>
	<para></para>
      </sect2>
      <sect2>
	<title>Viewing Complete old/new Files</title>
	<para></para>
      </sect2>
    </sect1>
    <sect1>
      <title>Viewing Comments</title>
      <para></para>
    </sect1>
  </chapter>

  <chapter>
    <title>Hacking</title>
    <sect1>
      <title>Codestriker Layout</title>
      <para>
        This chapter is for developers which wish to contribute to
	Codestriker, and want a quick birds-eye view as to how the
	code is structured.  The codestriker modules are broken into
	the following sub-modules, which are located in
	<filename>lib/Codestriker</filename>:
	<variablelist>
	  <varlistentry>
	    <term>Action</term>
	    <listitem>
	      <para>
	        Every action or gesture that can be performed on the
		Codestriker UI has an associated module for handling
		that action.  The name of the module indicates what
		action it is handling.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>BugDB</term>
	    <listitem>
	      <para>
	        Support for updating bug tracking systems when topics
		are created or their state is changed against specific
		bug reports.  Currently, only Bugzilla is supported,
		but the API can support other bug-tracking systems.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>DB</term>
	    <listitem>
	      <para>
	        A thin wrapper over the DBI interface, to
		create/remove database connections.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>FileParser</term>
	    <listitem>
	      <para>
	        These modules are responsible for parsing the input
		text when topics are created.  Currently, CVS
		unidiffs, PATCH unidiffs and Subversion diff files are
		supported.  The API for these parsers is simply to
		accept input text, and to return an array of delta
		objects, which describe source code changes made to a
		specific file on specific lines.  These delta objects
		are then used for rendering a topic, so that they are
		agnostic to which source control system they
		originated from.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Http</term>
	    <listitem>
	      <para>
	        This contains initial HTTP request processing, and
		support for generating an HTTP response, including the
		handling of cookies and compressed streams.  This
		sub-module also contains the all-important Render.pm
		module, which is the work-horse for generating the
		complex HTML from the topic deltas.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Model</term>
	    <listitem>
	      <para>
	        This contains the persistent objects of the system,
		and the associated database operations on them.  These
		objects include Topics, Comments, Files and Deltas.
		The Action classes eventually call these model objects
		when the persistent state of the system needs to be
		queried or modified.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Repository</term>
	    <listitem>
	      <para>
	        A number of objects implement the Repository API,
		which is used throughout the system.  Repositories
		currently supported include a local CVS repository, a
		remote CVS repository whose data is accessed by HTTP,
		and Subversion.  Future repositories can be easily
		added to this framework.  The methods in the
		repository API include a way of retrieving the entire
		contents of a specified file and revision (which is
		used in the ViewFile action module), and the
		generation of a revision file log URL.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Smtp</term>
	    <listitem>
	      <para>
	        A simple API for sending email messages.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>

      <para>
	In addition to the above modules, the following directories
	are of interest:
	<variablelist>
	  <varlistentry>
	    <term>bin</term>
	    <listitem>
	      <para>
	        This contains the all-important
		<filename>checksetup.pl</filename> script, which is
		used for initialising the system, and for performing
		upgrades.  This isn't the most pretty script in the
		world, partly for all of the old data-migration it has
		to do from old versions to the current version.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>cgi-bin</term>
	    <listitem>
	      <para>
	        This contains the codestriker.pl CGI script.  It reads
		the "action" parameter from the URL, and delegates the
		handling of the request to the appropriate action
		object.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>html</term>
	    <listitem>
	      <para>
	        This contains the <filename>codestriker.css</filename>
	        file.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>templates</term>
	    <listitem>
	      <para>
	        Almost all of the HTML generated by codestriker (apart
	        from the actual code rendering) can be customised by
	        the templates within this directory.  Each Action
	        object typically has an associated template, where the
	        view can be easily customized.  There is also a header
	        and footer template, which is included in every page,
	        for site customization.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
    </sect1>
    <sect1>
      <title>Database Schema</title>
      <para>
        The <filename>bin/checksetup.pl</filename> script contains the
        <command>CREATE TABLE</command> statements that are used when
        the Codestriker database is initialised, in the
        <varname>$table</varname> hash.  The following tables are
        defined:
	<variablelist>
	  <varlistentry>
	    <term>project</term>
	    <listitem>
	      <para>
	        A Codestriker database can consist of a number of
	        projects, which have a name, id, description and
	        creation date.  Each code review topic, is linked to a
	        specific project.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>topic</term>
	    <listitem>
	      <para>
	        A topic represents a code review that has been
	        submitted to Codestriker.  It contains attributes like
	        the author, title, description, creation date,
	        repository, and is linked to a member project.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>participant</term>
	    <listitem>
	      <para>
	        A participant is associated with a topic, and contains
	        an email address, and the type of participant they
	        are, such as the author, reviewer or observer
	        (somebody was is CC'ed the review).
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>comment</term>
	    <listitem>
	      <para>
	         A comment is made against a specific review, and
	         consists of the author and the comment text itself.
	         It is linked with a specific commentstate object.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>commentstate</term>
	    <listitem>
	      <para>
	        A commentstate row is associated with a comment, and
	        contains exact information as to what file and
	        linenumber the comment was made against.  It also
	        contains state information about the comment, whether
	        it is marked a "submitted", "complete" or "invalid".
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>topicbug</term>
	    <listitem>
	      <para>
	        This table records a many-to-many relationship between
	        topics and bug ids.  A topic may fix more than one bug
	        ids, and likewise, a bug id can be fixed by many
	        topics.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>file</term>
	    <listitem>
	      <para>
	        A topic consists on many file objects, which contain a
	        filename, revision number and an indicator as to
	        whether it is a text or binary file.  A file consists
	        of one or more delta objects.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>delta</term>
	    <listitem>
	      <para>
	        A delta is associated with a specific file object, and
	        represents a single diff chunk or change.  It
	        represents for file X, at line number Y, the following
	        change is a part of the review.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
    </sect1>
  </chapter>

  <chapter>
    <title>Troubleshooting</title>
    <para>
      If you have any problems, be sure to check first if it isn't a
      well-known Perl problem.  The Bugzilla trouble-shooting page at
      <ulink
      url="http://www.bugzilla.org/docs216/html/troubleshooting.html">http://www.bugzilla.org/docs216/html/troubleshooting.html</ulink>
      documents them well.  If the problem doesn't match, send a
      message (see
      <xref linkend="contact">), along with any relevant information
      (including relevant contents of your apache error log file), and
      I'll be happy to help you out.
    </para>
  </chapter>

  <chapter>
    <title>Future Plans</title>
    <para></para>
  </chapter>

  <chapter id="contact">
    <title>Contact Details</title>
    <para>
      Please mail me any other suggestions you have to
      <email>codestriker-user@lists.sourceforge.net</email> or to me
      personally at <email>sits@users.sourceforge.net</email>.
      Contributions are most welcome!
    </para>
  </chapter>
      
</book>
