<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN">

<!-- Note the /usr/share/sgml/docbook/sgml-dtd-3.1/dbnotn.mod file had
  to be modified to accept PNG images (simple change).  Should migrate to
  Docbook 4 eventually. -->

<book>
  <bookinfo>
    <title>The Codestriker Guide</title>
    <subtitle>Version 1.8.5</subtitle>
    <legalnotice>
      <para>Copyright (c) 2001, 2002, 2003, 2004</para>
    </legalnotice>
    <authorgroup>
      <author>
        <firstname>David</firstname>
	<surname>Sitsky</surname>
      </author>	
    </authorgroup>
  </bookinfo>
  <toc></toc>

  <chapter>
    <title>Introduction</title>
    <sect1>
      <title>What is Codestriker?</title>
      <para>
        Codestriker is a web application which facilitates
        collaborative code reviewing.  Authors create code review
        topics, where the nominated reviewers will be automatically
        notified by email.  Reviewers then submit comments against the
        code on a per-line basis, and can also view comments submitted
        by the other reviewers as they are created.  Emails are sent
        to the appropriate parties when comments are created, as an
        alert mechanism.  The author is also free to submit comments
        against the review comments.  Once all reviewers have
        finished, the author has all review comments available in a
        structured fashion.  All information is stored in a relational
        database, which Codestriker can search over.
      </para>
      <para>
        Special support is provided for integration with
	<ulink url="http://cvshome.org">CVS</ulink>,
	<ulink url="http://subversion.tigris.org">Subversion</ulink>,
	<ulink url="http://www.perforce.com">Perforce</ulink>,
	<ulink
	url="http://www.ibm.com/software/awdtools/clearcase">ClearCase</ulink>
	and
	<ulink
	url="http://msdn.microsoft.com/ssafe">Visual SourceSafe</ulink>.
	 source control management systems, for the display of
	 coloured diffs and for the ability to view original and new
	 files in their entirety to assist in the review process.
	 Codestriker can be optionally linked with a bug tracking
	 system, such as Bugzilla.  Other SCM systems will be added in
	 future releases, given demand and help from the developer
	 community.  Codestriker can also be linked with
	<ulink url="http://lxr.sourceforge.net">LXR</ulink> to allow
	for fast lookup of code entities, to assist in the review
	process.
      </para>
      <para>
        Codestriker is written in cross-platform Perl.  It
        can run on any variant of UNIX (Linux, *BSD) and has been
        deployed on Win32 systems (Windows 98 and above).  It can be
        used in conjunction with a number of relational databases,
        including MySQL, PostgreSQL, Oracle, SQL Server, and other
        ODBC-complaint databases.
        The Codestriker home page is located at:
	<ulink
	url="http://codestriker.sourceforge.net">http://codestriker.sourceforge.net</ulink>.
	The Codestriker SourceForge project page, which contains
	information on file releases, defect lists, mailing lists and
	information on the CVS repository is located at
	<ulink
	url="http://www.sourceforge.net/projects/codestriker">http://www.sourceforge.net/projects/codestriker</ulink>.
      </para>
      <para>
        An example Codestriker topic can be seen at
	<ulink
	url="http://codestriker.sourceforge.net/cgi-bin/codestriker.pl?topic=7063366&amp;action=view">http://codestriker.sourceforge.net/cgi-bin/codestriker.pl?topic=7063366&amp;action=view</ulink>.
	To view the current list of open topics, go to <ulink
	url="http://codestriker.sourceforge.net/cgi-bin/codestriker.pl">http://codestriker.sourceforge.net/cgi-bin/codestriker.pl</ulink>.
	From here, there are links to create new topics.
      </para>
      <para>
        This document is available as a PDF:
	<ulink url="codestriker.pdf">codestriker.pdf</ulink>.
      </para>
      <para>
        A screenshot of Codestriker is action can be seen in <xref
        linkend="screenshot">.
	<figure id="screenshot" float="1">
	  <title>Codestriker Screenshot</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="screenshot.eps" format="eps" scale="25">
	    </imageobject>
	    <imageobject>
	      <imagedata fileref="screenshot.png" format="png">
	    </imageobject>
	  </mediaobject>
	</figure>
      </para>
    </sect1>
    <sect1>
      <title>Document Structure</title>
      <para>
        The remainder of this document is in three parts.  The next
        part is concerned with installing Codestriker and customising
        it.  Following that is the user's guide.  Lastly, details on
        Codestriker's code structure, database schema is presented.
      </para>
    </sect1>
    <sect1>
      <title>We Want to Hear from You!</title>
      <para>
        Please send feedback, good or bad, to us.  We are continually
        striving to improve Codestriker, and all feedback is useful.
        The best place to send feedback is either to the Codestriker
        mailing list
        <email>codestriker-user@lists.sourceforge.net</email> or to me
        personally at <email>sits@users.sourceforge.net</email>.
      </para>
    </sect1>
  </chapter>

  <chapter>
    <title>Installation</title>
    <para>
      This chapter is concerned with installing Codestriker on your
      system.  This requires the following steps:
      <itemizedlist>
        <listitem><para>creating the Codestriker database;</para></listitem>
        <listitem><para>configuring the webserver; and</para></listitem>
        <listitem>
	  <para>unpacking and configuring Codestriker.</para>
	</listitem>
      </itemizedlist>             
    </para>

    <sect1 id="codestriker-database-creation">
      <title>Codestriker database creation</title>
      <para>
        Codestriker stores all code review topics and comments into a
        relational database.  Currently,
	<ulink url="http://www.mysql.com">MySQL</ulink>,
	<ulink url="http://www.postgresql.org">PostgreSQL</ulink>,
	Oracle and SQL Server are
        supported, but any database system can be used, provided it has
        an implementation of Perl's DBI interface, which is the case
	for all major database implementations.
      </para>
      <sect2>
        <title>Using MySQL</title>
	<para>
	  MySQL can be used on either UNIX or Window platforms.  It is
	  available for download from
	  <ulink
	  url="http://www.mysql.com">http://www.mysql.com</ulink>.
	  For Linux RedHat distributions, the necessary packages
	  required are mysql mysql-devel, mysql-server, which may or
	  may not already be present on your system.  Depending on
	  your UNIX operating system, starting mysql will be something
	  like the following:
	  <programlisting>
/etc/rc.d/init.d/mysql start
          </programlisting>
	  For Windows, there will typically be a desktop icon or menu
	  shortcut for starting mysqld.
	</para>
	<para>
	  Once mysql is running, it is necessary to create the
	  Codestriker database and create the codestriker user.  Under
	  UNIX, a command like the following will be required:
	  <programlisting>
% mysql -u root mysql
          </programlisting>
          For Windows, there should be a shortcut available for
          getting a mysql prompt.
	</para>
	<para>
	  At the mysql prompt, issue the following command, but
	  substitute a suitable database password instead of cspasswd
	  as shown here.
	  <programlisting>
CREATE DATABASE codestrikerdb;

GRANT SELECT,INSERT,UPDATE,DELETE,INDEX,ALTER,CREATE,DROP,REFERENCES
 ON codestrikerdb.* TO codestriker@localhost IDENTIFIED BY 'cspasswd';

FLUSH PRIVILEGES;

QUIT
          </programlisting>
	 </para>
	 <para>
	   You can check the Codestriker database at any time from the
	   command line, by issuing the following command, and
	   entering the database password:
	  <programlisting>
mysql -u codestriker -D codestrikerdb -p
          </programlisting>
	 </para>
	 <para>
	   If required, the Codestriker database can be dropped, by
	   entering in the following command at the mysql command
	   prompt as user root:
	  <programlisting>
DROP DATABASE codestrikerdb;
          </programlisting>
	 </para>
      </sect2>
      <sect2>
        <title>Using PostgreSQL</title>
	<para>
	  At the time of writing PostgreSQL was only available for
	  UNIX platforms, however it is quite possible by the time you
	  are reading this that a version for Windows is available.
	  The project page for PostgreSQL is:
	  <ulink
	  url="http://www.postgresql.org">http://www.postgresql.org</ulink>.
	  For Linux RedHat distributions, the postgresql,
	  postgresql-server and postgresql-devel packages are
	  required.  Make sure you are using at least version 7.1, as
	  prior versions had restrictions on the size of "text"
	  fields, making it impractical for use with Codestriker.
	  PostgreSQL can be started with a command like:
	  <programlisting>
/etc/rc.d/init.d/postgresql start
          </programlisting>
	</para>
	<para>
	  To create the Codestriker database and user, enter the
	  following commands:
	  <programlisting>
% createuser --username=postgres -d -A codestriker
% createdb --username=codestriker codestrikerdb
          </programlisting>
	</para>
	<para>
	  Make sure your <filename>pg_hba.conf</filename> file is
	  suitable configured, in particular for authentication.
	  This file is often located in
	  <filename>/etc/postgres</filename>.
	</para>
	<para>
	  You can check the Codestriker database interactively at any
	  time with the following command:
	  <programlisting>
% psql -U codestriker codestrikerdb
          </programlisting>
	</para>
	 <para>
	   If required, the Codestriker database can be dropped, by
	   entering in the following command:
	  <programlisting>
% dropdb --username=codestriker codestrikerdb
          </programlisting>
	 </para>
      </sect2>
      <sect2>
        <title>Using Oracle</title>
	<para>
	  Codestriker has been deployed under Linux 2.4 using
	  Oracle 8i.  If you have Oracle installed, you most likely
	  will have somebody that can easily create a new Codestriker
	  database for you.  Install the DBD::Oracle Perl module, and
          modify the <varname>$db</varname> variable in the
	  <filename>codestriker.conf</filename> file appropriately so
	  that Codestriker knows how to connect to its database.  An
	  example is given in the configuration file.  For more
	  advanced connection strings, please consult the DBD::Oracle
	  man page.
	</para>
      </sect2>
      <sect2>
        <title>Using SQL Server</title>
	<para>
          Codestriker has been deployed using SQL Server, via the ODBC
          interface.  The first step is to create a "Codestriker"
          system data source, by going to "Control Panel" ->
          "Administrative Tools" -> "Data Sources (ODBC)".  From here,
          select the "System DSN" tab, and click "Add".  Select the
          driver named "SQL Server", then click "Finish".  Enter in
          "Codestriker" for the name textfield, "Codestriker database"
          for the description textfield, and select the appropriate
          SQL Server from the server dropdown box, then click "Next".
          Choose the authentication appropriate for your site, and
          work your way through the final configuration options.
          Modify the <varname>$db</varname> variable in the
	  <filename>codestriker.conf</filename> file appropriately
	  (see the example) so that Codestriker knows how to connect
	  to this datasource.  For more advanced connection settings,
	  please consult the DBD::ODBC man page or online manual.
	</para>
      </sect2>
      <sect2>
        <title>Other Databases</title>
	<para>
	  Codestriker uses the Perl DBI package, a portable API that
	  supports all the major database systems.  The database
	  creation code is abstracted so that it can work on a
	  diverse range of database systems.  Support for a new
	  database system involves writing a single Perl module in the
	  <filename>Codestriker::DB</filename> package and registering
	  it in the <filename>Codestriker::DB::Database</filename>
	  module.  There are a number of example database modules
	  there.
	</para>
      </sect2>
    </sect1>

    <sect1>
      <title>Configuration</title>
      <para>
        This section is concerned with unpacking the Codestriker
        distribution into a suitable location, and then configuring
        it.  For UNIX distribution, the following commands may be
        appropriate on your system:
	<programlisting>
% mkdir /var/www/codestriker
% cd /var/www/codestriker
% tar zxvf /from/installed/location/codestriker-X.Y.Z.tar.gz
% chown -R apache.apache /var/www/codestriker/codestriker-X.Y.Z
	</programlisting>
	Here "apache" is the user which runs the Apache server.  It
	could be "nobody" under different systems.  Check with the
	<command>ps auxww</command> command, or check your Apache
	configuration files.  Under Windows, the Codestriker
	distribution could be unzipped into a suitable location under
	<filename>c:\program files</filename>, or just
	<filename>c:\codestriker</filename>.
      </para>
      <para>
        The next task is to edit the
        <filename>codestriker.conf</filename> configuration file to
        reflect the settings on your site.  The file is documented
        with examples to assist in setting appropriate values.  The
        file is in Perl syntax, so lines starting with a '#' indicate
        a comment.
      </para>
      <sect2>
        <title>Codestriker Database</title>
	<para>
	  The <varname>$db</varname> variable should be set to a DBI
	  URL representing the Codestriker database that was created,
	  as specified in <xref
	  linkend="codestriker-database-creation">.  Basically, if you
	  are using PostgreSQL, this should be:
<programlisting>
$db = 'DBI:Pg:dbname=codestrikerdb';
</programlisting>
          For MySQL, this would be:
<programlisting>
$db = 'DBI:mysql:dbname=codestrikerdb';
</programlisting>
          If your database is situated on a different host, for
          example "dbhost", this could be modified to:
<programlisting>
$db = 'DBI:mysql:dbname=codestrikerdb;host=dbhost';
</programlisting>
        The database user and password also need to be specified.  If
        your username was "codestriker", and the password was
        "cspasswd", the settings would be just:
<programlisting>
# Database user.
$dbuser = 'codestriker';

# Database password.
$dbpasswd = 'cspasswd';
</programlisting>
        Other examples for other database systems are present in the
        configuration file.
	</para>
      </sect2>

      <sect2>
        <title>Email</title>
	<para>
	  When a code review topic is created, or a comment against a
	  review is made, an email is sent out as a notification
	  mechanism.  Codestriker needs to know what mail host it can
	  use for sending email messages.  The configuration file
	  default is "localhost":
	  <programlisting>
# Location of the mailing host.  This is used when sending out codestriker
# comments.
$mailhost = 'localhost';
           </programlisting>
	</para>
      </sect2>

      <sect2>
        <title>Compression</title>
	<para>
	  Some of the HTML pages generated by Codestriker can be quite
	  large, depending on the review size.  If your deployment is
	  operating to users outside an intranet, it may be worth
	  enabling this option to enable compression.  Note, IE
	  doesn't support receiving compressed HTML, so setting this
	  option will have no effect.  Initially, it is best to leave
	  this option turned off (the default), and only to enable it
	  if there is a significant performance problem.
	  <programlisting>
# Indicate whether to try and compress output if the client browser
# supports it.  This can make a tremendous difference in bandwidth,
# especially over slow links.
$use_compression = 0;
	  </programlisting>
	</para>
      </sect2>

      <sect2>
        <title>Source Code Management Systems</title>
	<para>
	  This part of the configuration deals with informing
	  Codestriker what source code control systems you use.  By
	  doing this, Codestriker can then display reviews with
	  revision information, and then allow the reviewer to view
	  the entire contents of a file before a change, and with a
	  change applied.  When a review is created, the user
	  specifies which source control system it is applied against
	  (there may not be any, if it is just a simple patch or text
	  file).  For many Codestriker deployments, there may only be
	  a single SCM system.  There is currently support for CVS,
	  Subversion, Perforce, Visual Source Safe, and ClearCase.
	  Here are examples from the codestriker.conf file:
	  <programlisting>
# Valid repositories which may be selected at the create topic screen.
# The order shown here is the order presented in the option list.  Most
# deployments will only require a single repository to be specified.
# Comment out / modify entries appropriate for your deployment.
#
# If this list is empty it won't be possible to view the entire contents of a
# file before the proposed change and/or after. All of the places 
# in the application that ask for, or display repository information will
# be hidden and lastly, it will be impossible to make a diff review topic
# on files that already checked in.
@valid_repositories =
    (
     # Example CVSROOT of a CVS repository on the same machine as the
     # codestriker server.
     '/home/sits/cvs',

     # Example of a CVS repository which contains the URL to a viewcvs
     # installation (CVS web is also supported), followed by the
     # CVSROOT of the repository.
     'http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi /cvsroot',

     # The next example is the syntax used for specifying a Subversion
     # repository, which is simply the subversion repository URL
     # prefixed # by svn:
     'svn:http://svn.collab.net/repos/svn/trunk',

     # Subversion server with authentication.  The user name and
     # password should be added to the end and separated by
     # semicolons.
     'svn:http://svn.collab.net/repos/svn/trunk;username;password',

     # Example CVS pserver config with username and password
     # specified.
     ':pserver:sits:password@cvs.sourceforge.net:/cvsroot',

     # Example CVS pserver config with proxy options.
     ':pserver;proxy=abc.com;proxyport=8080:sits:pwd@cvs.dev.net',

     # Example CVS pserver with empty password.
     ':pserver:anonymous:@cvs.sourceforge.net:/cvsroot',

     # Example CVS server which will be connected to with SSH.  This
     # assumes the appropriate ssh keys have been created so that the
     # process running the Codestriker application can connect to the
     # CVS server without requiring a password to be entered.
     ':ext:sits@localhost:/home/sits/cvs',

     # Visual SourceSafe repository on same machine at default
     # location.  Username "admin", password "password".
     'vss:admin;password',

     # Visual SourceSafe repository on same machine, but with specific
     # repository location specified.
     'vss:c:\\Program Files\\Microsoft Visual Studio\\VSS;admin;password',

     # Visual SourceSafe repository located on a network fileshare.
     'vss:\\\\VisualSourceSafeMachineName\\SharedRepositoryPath;admin;password',
     # Example Win32 CVS repository on the same machine.
     ':local:c:\\cvsrep',

     # Another Win32 CVS repository on the same machine.
     'c:/cvsrep2',

     # The next example is for a Perforce repository.  After the
     # leading :perforce identifier, the next two components are the
     # Perforce user and client parameters.  The last two parameters
     # after the '@' symbol represent the host and port number of
     # the Perforce server.
     'perforce:sits:sits2@localhost:1666',

     # The final example is a ClearCase repository, where the path is
     # the location of a shared snapshot view.  From this view, it
     # should be  possible to a file of any version can be 
     # retrieved from the vob using the "cleartool get" command.  It
     # is important that this snapshot view is accessible with  the
     # same path specification for all developers.  This is because
     # a diff file created by a developer will refer to the snapshot
     # view, and will allow Codestriker to retrieve specific files
     # and versions mentioned in the review text, when necessary.
     # It is also important that the user account running the
     # webserver process has permission to access to the snapshot
     # view.
     'clearcase:c:\\stuff\\view_name\\vob_name'
    );
        </programlisting>
        </para>
	<para>
	  During a review, it is sometimes beneficial to see the
	  revision history of a file, such as information provided by
	  CVSweb or ViewCVS.  You can specify a mapping of repository
	  names to URLs for this purpose, for example:
	  <programlisting>
$file_viewer =
{
    '/home/sits/cvs' => 'http://localhost/cgi-bin/cvsweb.cgi'
};
	  </programlisting>
	  This indicates that for any review made against the
	  <filename>/home/sits/cvs</filename> repository, file
	  revision information can be found using the URL specified.
	</para>
	<para>
	  If you are using CVS, make sure the
	  <varname>$cvs</varname> setting is set to the correct path.
	  For UNIX, this is likely to be something like:
	  <programlisting>
# Location of the cvs binary.
$cvs = '/usr/bin/cvs';
	  </programlisting>
	  For Windows, this could be something like:
	  <programlisting>
# Location of the cvs binary.
$cvs = 'c:/gnu/bin/cvs';
	  </programlisting>
	  <emphasis>Note the use of '/' (forward-slash) characters,
	  rather than '\' (back-slash).  Even under Windows, when
	  setting filenames, you should always use forward
	  slashes.</emphasis>
	</para>
	<para>
	 If you are using Perforce, make sure the
	 <varname>$p4</varname> setting is set to the correct path.
	</para>
	<para>
	 If you are using Visual SourceSafe, make sure the
	 <varname>$vss</varname> setting is set to the correct path.
	</para>
      </sect2>
      <sect2>
        <title>Bug-Tracking Integration</title>
	<para>
	  It is often useful to link the creation of code review
	  topics with the associated bug records that the code is
	  fixing.  That way, it is possible to read a bug record, and
	  apart from reading the textual description as to how it has
	  been resolved, Codestriker can add in a link to the code
	  review topic, which shows the actual code which fixed the
	  bug (and any important decisions made in the Codestriker
	  comments).  Currently, there is only support for Bugzilla,
	  but it is not difficult to add in support for other systems.
	</para>
	<para>
	  If you don't use Bugzilla (<ulink
	  url="http://bugzilla.mozilla.org">http://bugzilla.mozilla.org</ulink>),
	  you can skip this section, as by default, there is no
	  linking to a bug tracking system.  An example configuration
	  could be as follows:
	  <programlisting>
# Bug tracking type.
$bug_db = 'bugzilla';

# Bug database connection details.
$bug_db_host = 'localhost';
$bug_db_name = 'bugs';
$bug_db_password = 'bugs_password';
$bug_db_dbname = 'bugs';

# Bugzilla codestriker user id.
$bug_db_user_id = '2';
	  </programlisting>
	  The <varname>$bug_db</varname> setting indicates to use
	  Bugzilla.  If this value is set to '', then no linkage to a
	  bug tracking system is performed (the default).
	</para>
	<para>
	  The <varname>$bug_db_host</varname> setting indicates the
	  hostname that holds the bugzilla database, while
	  <varname>$bug_db_name</varname> and
	  <varname>$bug_db_password</varname> contain the database
	  username and password to connect to the Bugzilla database.
	  The <varname>$bug_db_dbname</varname> setting contains the
	  Bugzilla database name, which by default is "bugs".  You can
	  verify these settings by using
	  <command>mysql</command> to connect to the Bugzilla
	  database interactively.
	</para>
	<para>
	  Codestriker adds "comments" to the appropriate bug record
	  whenever a code review topic has been created against it, or
	  the review's state has changed.  To do this, a special
	  Bugzilla user needs to be created which the comments will be
	  created against.  Create the user using the Bugzilla
	  interface, and call it "codestriker@yourhost.yourdomain".
	  Then connect to the Bugzilla database using
	  <command>mysql</command>, and execute the following command
	  to determine the userid of the user just created:
	  <programlisting>
SELECT userid FROM profiles WHERE
login_name = 'codestriker@yourhost.yourdomain';
	  </programlisting>
	  This value should be set into the
	  <varname>$bug_db_user_id</varname> setting.
	  <programlisting>
# Bugzilla codestriker user id.
$bug_db_user_id = '2';
	  </programlisting>
	</para>
      </sect2>
      <sect2>
        <title>LXR Integration</title>
	<para>
	  Codestriker has been integrated with LXR, so that when
	  performing a review, those identifiers known to LXR will be
	  automatically hyperlinked.  This is an enormous aid to the
	  code reviewing process, as you can quickly determine where a
	  variable/function/method/class is defined and where it is
	  used quickly, while studying the proposed changes.
	</para>
  
        <para>
	  The LXR home page is located at <ulink
	  url="http://lxr.sourceforge.net">http://lxr.sourceforge.net</ulink>.
	  The integration has been tested with LXR version 0.9.2.
	</para>

        <para>
	  Its possible that each source code repository is associated
	  with a different LXR deployment.  The default configuration
	  file shows an example:
	  <programlisting>
$lxr_map = 
{
    '/home/sits/cvs' => { db => 'DBI:Pg:dbname=lxr',
			  user => 'lxr',
			  password => '',
			  url => 'http://localhost.localdomain/lxr/ident?i='
			},

     'svn:http://svn.collab.net/repos/svn/trunk' =>
                        { db => 'DBI:Pg:dbname=lxr2',
			  user => 'lxr',
			  password => '',
			  url => 'http://localhost.localdomain/lxr2/ident?i='
			}
			  
};
	  </programlisting>
	  This is basically fancy Perl syntax for a map.  In this
	  instance, there are two keys,
	  <filename>/home/sits/cvs</filename> and
	  <filename>'svn:http://svn.collab.net/repos/svn/trunk</filename>,
	  which represent the source control repositories specified
	  above within the <varname>@valid_repositories</varname>
	  setting.
	</para>
	<para>
	  Each key is mapped to an object containing four attributes.
	  The <varname>db</varname> attribute is a DBI URL of the LXR
	  database, <varname>user</varname> is the database username,
	  <varname>password</varname> is the database password, and
	  <varname>url</varname> is the URL of the LXR deployment for
	  the identifier search page.
	</para>
	<para>
	  If you don't have LXR installed, you can simply set this
	  variable as follows:
	  <programlisting>
$lxr_map = 
{
};
	  </programlisting>
	</para>
	<para>
	  Also note, LXR at present doesn't seem to work with Taint
	  checking.  To avoid warning messages, you'll need to comment
	  out the "PerlTaintCheck On" line in your Apache
	  <filename>httpd.conf</filename> file, and remove the -T
	  switch at the top of the
	  <filename>bin/codestriker.pl.base</filename> file.
	</para>
      </sect2>
      <sect2>
        <title>Deployment Options</title>
	<para>
	  There are a number of other options which affect how
	  Codestriker runs.  The most important ones are shown below.
	  Unless you have specific reasons to, most intranet
	  deployments of Codestriker can leave these options as is.
	  <programlisting>
# Exclude these file types from review topics.   
# You will generally want to exclude any non-human-readable files.
@exclude_file_types = ('rtf', 'doc', 'gif', 'bmp', 'jpeg', 'jpg', 'mdb',
		       'ppt', 'vsd', 'xls', 'zip', 'tgz', 'tar', 'gz',
		       'opt', 'aps', 'ncb', 'a', 'so', 'dll', 'lib',
		       'exe', 'png', 'pdf', 'bin', 'out', 'ld', 'fm',
		       'indd', 'wav', 'o', 'obj', 'mpp', 'vsw', 'jfif',
		       'tif', 'tiff', 'xbm', 'fnt', 'ttf', 'pfm', 'pfb',
		       'eps', 'wpj', 'sxi');

# Indicate if topics can be listed/searched.  Turning this to false can be
# useful for "anonymous" installations of Codestriker.
$allow_searchlist = 1;

# Indicate if the repository attribute can be set to a topic.  If this
# is disabled, it won't be possible to view the entire contents of a
# file before the proposed change and/or after.  On some servers (such
# as sourceforge), the firewall doesn't allow CGI scripts to make
# remote connections.
$allow_repositories = 1;

# The following controls project configuration.  Each Codestriker topic is
# a member of a specific project.  Uncomment the option you want
# below.  Note the textual state names below cannot be changed.

# Default option, projects are enabled, but they have no state
# changing operations (ie, projects are always in state 'Open').
@project_states = ('Open');

# Don't use projects at all.  Effectively, an implicit "default
# project" is created and associated with all topics behind the scenes.
# @project_states = ();
#
# Allow for projects to be closed.  Closing a project will
# not allow new topics to be created in that project.
# @project_states = ('Open', 'Closed');
#
# Allow for projects to be deleted.  This is potentially a dangerous
# option to allow, as deleting a project will delete all of its member
# topics as well.  Use with caution.
# @project_states = ('Open', 'Deleted');
#
# Allow for projects to be closed and deleted.  Use with caution.
# @project_states = ('Open', 'Closed', 'Deleted');

# If true, don't display any email addresses in their true form, but
# truncate them, to beat SPAM harvesters.
$antispam_email = 0;
	  </programlisting>
	</para>
      </sect2>
      <sect2>
        <title>Topic Length Restrictions</title>
	<para>
	  As explained by the comments in the configuration file, it
	  is possible to limit the size of code review topics that
	  will be accepted by the system:
	  <programlisting>
# The number of problems found per line drops if the size of the 
# topic is too large. A common inspection pitfall is for authors to 
# attempt to review too much material and then miss problems. 
# These two options allow the Codestriker administrator to limit 
# the length of the topics. Topics that have more lines than 
# $maximum_topic_size_lines are rejected when they are created. 
# Topics that are larger than $suggested_topic_size_lines generate 
# a warning displayed in the topic page, but are accepted into the 
# system. Codestriker measures that length of the topic by counting 
# the number of lines in the topic text.
#
# The Codestriker default of not enforcing any limits is specified by
# settings either option to an empty string. If you are not sure 
# what a reasonable limit would be, start with a suggested_topic_size_lines
# set to 350, and adjust with experience.
$maximum_topic_size_lines = '';
$suggested_topic_size_lines = '';
	  </programlisting>
	</para>
      </sect2>
      <sect2>
        <title>Comment Email Configuration</title>
	<para>
	  By default, whenever a comment it submitted, an email will
	  be sent to the author of the comment, the author of the
	  review, and anyone else who has submitted a comment on the
	  line of code in question.  This may not be appropriate for
	  some team processes, and can be changed by setting
	  <varname>$allow_comment_email</varname> to 0.
	   <programlisting>
# If true, Codestriker will send out emails to the topic owner and
# comment submitter when a comment is added. If this option is false,
# no email will be sent to either the topic owner or the comment
# submitter. Emails about each comment may not be needed if a meeting
# is planned to discuss the topic. If the comment submitter specifies
# a cc user, an email is always sent out, regardless of this setting.
$allow_comment_email = 1;
	   </programlisting>
	</para>
      </sect2>
      <sect2>
        <title>Default View Topic Line Break Mode</title>
	<para>
	  As explained by the comments in the configuration file, it
	  is possible to set the default view topic line break mode,
	  by setting the <varname>$default_topic_br_mode</varname>
	  variable.  There is usually no need to change the default
	  setting unless you regularly review code with very long
	   lines.
	  <programlisting>
# The default line break viewing mode to use in the URL when viewing a
# topic.  Can be either $LINE_BREAK_NORMAL_MODE or $LINE_BREAK_ASSIST_MODE.
# Using $LINE_BREAK_ASSIST_MODE indicates that extra line breaks may be
# used in the topic display if the review has very long code lines.  Using
# $LINE_BREAK_NORMAL_MODE will ensure that the display matches the line
# breaks present in the code.  The line break mode can also be changed
# dynamically in the view topic screen.  There is usually no need to
# change this setting unless you regularly review code with very long
# lines.
$LINE_BREAK_NORMAL_MODE = 1;
$LINE_BREAK_ASSIST_MODE = 2;

$default_topic_br_mode = $LINE_BREAK_NORMAL_MODE;
	  </programlisting>
	</para>
      </sect2>
      <sect2>
        <title>Default View Topic File View Mode</title>
	<para>
	  As explained by the comments in the configuration file, it
	  it possible to specify by default, whether topics display
	  the deltas for all files in the review, or just a single
	  file at a time by default.  The viewing mode can be changed
	  dynamically on the view topic screen.
	  <programlisting>
# When displaying a topic, if this value is -1, then all files in the
# topic are displayed in the one page (default old Codestriker
# behaviour).  If the value is 0, then only the first file is shown,
# with links to display the other files.  This is useful for those
# deployments that review a large amount of code.
$default_file_to_view = -1;
	  </programlisting>
	</para>
      </sect2>
      <sect2>
        <title>Comment Thread Metrics</title>
	<para>
	  As explained by the comments in the configuration file, it
	  is possible to defined a number of metrics associated with
	  each comment thread (issue) created in the review.
	  <programlisting>
# Each comment thread (or issue) that is created against a specific
# code line in Codestriker can have a configurable number of
# user-defined metrics recorded against it.
#
# Every site has their own requirements, below are a number of example
# configurations.  The "name" attribute refers to the name of the
# metric being recorded.  The "values" attribute is a list of values
# that this metric can be assigned to.  The "default_value" attribute
# is optional, and indicates what the default value of the metric is
# assigned to.  If this attribute is not specified, then the user will
# be required to specify a value for a metric when creating a new
# comment thread.  This is recommended, so that users think about what
# these values should be, rather than blindly accepting default
# values.  For the "Status" metric below however, it is recording the
# "state" of the thread, so an initial state of "Submitted" is reasonable.
# For the other metrics below, an initial value makes no sense.
# Metric items can have an optional show_on_main_page list that will
# force the numbers of comments with the metric settings to be reported
# on the main page of codestriker. 
$comment_state_metrics =
    [ 
      { name             => 'Status', 
	values           => ['Submitted', 'Invalid', 'Completed'],
	default_value    => 'Submitted',
	show_on_mainpage => ['Submitted' ] 
      }
    ];

# Two metrics defined: Status and Type.
#$comment_state_metrics =
#    [
#      { name=>'Status', values=>['Submitted', 'Invalid', 'Completed'],
#	                default_value=>'Submitted' },
#      { name=>'Type', values=>['Style', 'Minor', 'Major', 'Severe'] }
#    ];
#
# Four metrics defined: Status, Level, Mode and Type.
#$comment_state_metrics =
#    [
#      { name=>'Status', values=>['Submitted', 'Invalid', 'Completed'],
#	                default_value=>'Submitted' },
#      { name=>'Level', values=>['Major', 'Minor'] },
#      { name=>'Mode', values=>['Missing', 'Wrong', 'Unclear', 'Suggestion'] },
#      { name=>'Type', values=>['Logic', 'Data Handling', 'Interface',
#			       'Error Handling', 'Performance', 'Comments',
#			       'Standards'] }
#    ];
#
# Case where no comment thread metrics are to be used.
#$comment_state_metrics = [];
	  </programlisting>
	</para>
      </sect2>
      <sect2>
        <title>Metrics Support</title>
        <para>
	  As explained by the comments in the configuration file, it
	  is possible to maintain software metrics obtained from the
	  code reviewing process.  There is also scope for customising
	  Codestriker to track your own software metrics.
	  <programlisting>
# This options configures the metric support in codestriker. You have
# the following options:
#
# $metric_config = "none", "basic", "all", "metric name, metric name, etc"
#
# "none" - turns off all extra metric support in the application. The
# metric page will only display and manage data that is strictly
# required to perform the review.  Codestriker will not require any
# addition data input from the reviewers and authors.  This is the
# default. However, you still get basic data like how many topics are
# being created and how problems are being found.
#
# "basic" - Turns on the metrics that are considered to be essential
# for a metric program. It will require that reviewers and authors
# enter the time spent reviewing the topic, the time spent in the
# review meeting, and the time spent preparing for the review. The
# metric selection assumes that you are following a formal review
# process with a preparation meeting, and a defect review meeting.
#   
#   kickoff time - time spent preparing for the review
#   checking time - time spent actually reviewing the topic.
#   logging meeting duration - the time spent in the logging meeting.
#
# "all" - Turns on all of the metrics that one could possibly want to
# track. The list of metrics is from the book "Software Inspection" by
# Gilb and Graham.  You should probably not use this unless you are
# using a formal process that is well established. You may want to
# enable this temporally to get a idea of the types of metrics that
# are supported.
#
# "name,name" - Lastly, you can pick and chose what metrics you would
# like to enable.  just list the metric names in a comma separated
# list. You can see all of the build in metrics in the
# lib/Codestriker.pm file. For example, if you don't hold a kick off
# meeting, and but do hold a logging meeting, the basic option will not
# quit fit. You should set the $metric_config as:
# $metric_config = "checking time,logging meeting duration".
#
# If you don't like our choices of metrics, the names, descriptions,
# etc feel free to edit the lib/Codestriker.pm. It contains
# documentations on how to add your own metrics into codestriker. It
# is easy to do, and does not require any coding.

$metric_config = "none";
	  </programlisting>
        </para>
      </sect2>
    </sect1>

    <sect1 id="running-checksetup.pl">
      <title>Running checksetup.pl</title>
      <para>
        The <filename>checksetup.pl</filename> script located in
        the <filename>bin</filename> directory <emphasis>must</emphasis> be run
        before Codestriker can be used, or after each upgrade.  There
        is no harm in running it as many times as you like.  The
        purpose of the script is to ensure all of the necessary pieces
        on your system are installed, and tells you how to install
        anything that is missing.  The other purpose of the script is
        to create the Codestriker database, and perform any necessary
	data migrations.
      </para>
      <para>
        Perl is available by default for all UNIX systems.  For
        Windows, you can download it for free from <ulink
        url="http://www.activestate.com/Products/Download/Download.plex?id=ActivePerl">http://www.activestate.com/Products/Download/Download.plex?id=ActivePerl</ulink>.
      </para>
      <para>
        To run <filename>checksetup.pl</filename> under UNIX, do the
        following:
<programlisting>
% cd /codestriker/install/location/bin
% ./checksetup.pl
</programlisting>
        For Windows, you need to do something like the following from
        the command prompt:
<programlisting>
% cd c:\codestriker\install\location\bin
% checksetup.pl
</programlisting>
      </para>
      <para>
        This will tell you what missing Perl modules you have, 
        and how to install them.  It will then attempt to try and
        initialise the Codestriker database.  Make sure your
	Codestriker database has been created and the database
	system is running, before running this script.
      </para>
    </sect1>

    <sect1>
      <title>Apache webserver configuration</title>
      <para>
        This section deals with deploying Codestriker using Apache, on
        either a UN*X machine or Win32.
        Codestriker can run as an ordinary CGI script, which allows it
        to run under any CGI-complaint webserver.  The following
        configuration details are specific for the Apache webserver
        (<ulink
        url="http://httpd.apache.org">http://httpd.apache.org</ulink>),
        which is available for download for both UNIX and Window
        platforms.  Apache should be already available for most UNIX
        distributions.
      </para>
      <para>
        <emphasis>Note any Codestriker or Apache configuration changes
        require the Apache server to be restarted.</emphasis>  For
        UNIX, a command like the following is required:
<programlisting>
/etc/init.d/httpd restart
</programlisting>
        or
<programlisting>
/etc/init.d/apache restart
</programlisting>
      </para>
      <para>
        For Windows, the Apache shell window can be terminated by
        pressing ^C, and started from the Windows menu.  There are
        also shortcuts from the menu for editing the Apache
        configuration file.
      </para>
      <sect2>
        <title>CGI Script</title>
	<para>
	  If you installed Codestriker into
	  <filename>/var/www/codestriker/codestriker-X.Y.Z</filename>,
	  the configuration you need in your
	  <filename>apache.conf</filename> file (normally located in
	  either
	  <filename>/etc/httpd.conf</filename>,
	  <filename>/etc/apache.conf</filename> or
	  <filename>/etc/httpd/conf/httpd.conf</filename>) is the
	  following:
<programlisting>
ScriptAlias /codestriker/  /var/www/codestriker/codestriker-X.Y.Z/cgi-bin/
Alias /codestrikerhtml/  /var/www/codestriker/codestriker-X.Y.Z/html/

&lt;Directory "/var/www/codestriker/codestriker-X.Y.Z/cgi-bin/"&gt;
   AllowOverride None
   Options ExecCGI
   Order allow,deny
   Allow from all
   SetHandler cgi-script
&lt;/Directory&gt;

&lt;Directory "/var/www/codestriker/codestriker-X.Y.Z/html/"&gt;
   AllowOverride None
   Allow from all
&lt;/Directory&gt;
</programlisting>
         For Windows, the configuration is the same, but filename
         paths should use '/' rather than '\'.  An example
         configuration could be the following, if Codestriker was
         installed in
         <filename>c:\codestriker\codestriker-X.Y.Z</filename>.
<programlisting>
ScriptAlias /codestriker/ "C:/codestriker/codestriker-X.Y.Z/cgi-bin/"
Alias /codestrikerhtml/ "C:/codestriker/codestriker-X.Y.Z/html/"

&lt;Directory "C:/codestriker/codestriker-X.Y.Z/cgi-bin/"&gt;
   AllowOverride None
   Options ExecCGI
   Order allow,deny
   Allow from all
   SetHandler cgi-script
&lt;/Directory&gt;

&lt;Directory "C:/codestriker/codestriker-X.Y.Z/html/"&gt;
   AllowOverride None
   Allow from all
&lt;/Directory&gt;
</programlisting>
	</para>
      </sect2>
      <sect2>
        <title>Apache 1.X mod_perl</title>
	<para>
	  Using <command>mod_perl</command> provides performance
	  benefits for Perl-based web applications.  For CGI
	  deployments, as described in the previous section, each HTTP
	  request will create a <emphasis>new</emphasis> Perl
	  interpreter, which needs to initialise, and then parse the
	  Codestriker source code.  This may add significant latency
	  for each HTTP request.
	</para>
	<para>
	  Using <command>mod_perl</command>, a pool of Perl
	  interpreters which have already parsed the Codestriker
	  source code is maintained, so that whenever an HTTP request
	  is issued, the time spent creating a new Perl interpreter
	  and the parsing of the Codestriker code is removed.
	</para> 
	<para>
	  <command>Mod_perl</command> is available for download from
	  <ulink
	  url="http://perl.apache.org">http://perl.apache.org</ulink>.
	  For most UNIX distributions, it is available by default with
	  Apache.  For installing <command>mod_perl</command> under
	  Windows, <ulink
	  url="http://www.webmatrix.net/log/modperl-win32">http://www.webmatrix.net/log/modperl-win32</ulink>
	  contains installation information.  For PPM3 users, you
	  should be able to install it by typing:
<programlisting>
C:\> ppm
PPM> rep add theory http://theoryx5.uwinnipeg.ca/ppmpackages
PPM> install mod_perl
</programlisting>
          For PPM2:
<programlisting>
C:\> ppm
PPM> set location http://theoryx5.uwinnipeg.ca/ppmpackages
PPM> set save
PPM> install mod_perl
</programlisting>
	</para>
	<para>
	  The following shows the configuration settings for an Apache
	  1.X server with <command>mod_perl</command> enabled, for a
	  Codestriker distribution installed in
	  <filename>/var/www/codestriker/codestriker-X.Y.Z</filename>.
<programlisting>
Alias /codestriker/  /var/www/codestriker/codestriker-X.Y.Z/cgi-bin/
Alias /codestrikerhtml/  /var/www/codestriker/codestriker-X.Y.Z/html/

&lt;Directory "/var/www/codestriker/codestriker-X.Y.Z/cgi-bin/"&gt;
   SetHandler perl-script
   PerlHandler Apache::Registry
   Options +ExecCGI
&lt;/Directory&gt;

&lt;Directory "/var/www/codestriker/codestriker-X.Y.Z/html/"&gt;
   AllowOverride None
   Allow from all
&lt;/Directory&gt;
</programlisting>
          The settings for Windows are the same, only the pathnames
          will be different, as per the CGI configuration in the
          previous section.
	</para>
	<para>
	  For extra security, Codestriker supports Perl taint-mode, so
	  it is advisable to also have the following option in your
	  Apache config:
<programlisting>
PerlTaintCheck On
</programlisting>
          Note if you are using LXR on the same webserver, this option
          cannot be used.  You'll also need to remove the
          <option>-T</option> argument from
          <filename>bin/codestriker.pl.base</filename>, and re-run
          <command>checksetup.pl</command> again (see <xref
          linkend="running-checksetup.pl">) if you want to use
          Codestriker and LXR.
	</para>
        <para>
          Also note there is a strange issue with Perl 5.8 on Win32,
          the open3() call and taint mode.  For Win32 users, don't enable
          tainted mode.
        </para>
      </sect2>
      <sect2>
        <title>Apache 2.X mod_perl</title>
	<para>
	  For Apache 2.X, make sure the <command>mod_perl</command>
	  module is loaded when Apache starts.  Near the top of the
	  Apache config file, you should see commands like the
	  following:
<programlisting>
LoadModule perl_module modules/mod_perl.so
PerlModule Apache2
</programlisting>
          If these commands aren't present, and a Perl startup file is
          not being used, make sure these are added in.
	</para>
	<para>
	  The Codestriker configuration for Apache 2.X is very
	  similar, the only change is the name of the PerlHandler.
<programlisting>
Alias /codestriker/  /var/www/codestriker/codestriker-X.Y.Z/cgi-bin/
Alias /codestrikerhtml/  /var/www/codestriker/codestriker-X.Y.Z/html/

&lt;Directory "/var/www/codestriker/codestriker-X.Y.Z/cgi-bin/"&gt;
   SetHandler perl-script
   PerlHandler ModPerl::Registry
   Options +ExecCGI
&lt;/Directory&gt;

&lt;Directory "/var/www/codestriker/codestriker-X.Y.Z/html/"&gt;
   AllowOverride None
   Allow from all
&lt;/Directory&gt;
</programlisting>
	</para>
	<para>
	  To enable Perl taint mode checking, using the following
	  option:
<programlisting>
PerlSwitches -T
</programlisting>
	</para>
        <para>
          As mentioned in the previous section, Win32 users should
          not enable this mode.
        </para>
      </sect2>
    </sect1>

    <sect1>
      <title>IIS configuration</title>
      <para>
        This section deals with deploying Codestriker under IIS, as
        a CGI script.  These instructions were performed on a
        Windows 2000 machine, so hopefully this provides an indication
        as to what needs to be performed for other Win32
        configurations.  Startup the IIS configuration application by
        going to "Control Panel" -> "Administrative Tools" ->
        "Internet Services Manager".  Like the Apache configuration,
        the webserver needs to be told where to find the Codestriker
        CGI script, and where to find the associated CSS and html help
        files.
      </para>
      <para>
        Assuming you are deploying Codestriker under the "Default Web
        site", right-click this entry on the left hand frame of the
        window, and select "New" -> "Virtual Directory" -> "Next".
        Enter in <filename>codestriker</filename> into the Alias
        textfield, then click "Next".  Then enter the
        <filename>cgi-bin</filename> directory of your unpacked
        Codestriker distribution into the "Directory" textfield, then
        click "Next".  Make sure the "Execute" access permission
        checkbox is selected, then click "Next", click then "Finished".
      </para>
      <para>
        It is important that the <filename>codestriker</filename>
        virtual directory is setup to be able to execute Perl scripts.
        Right-click the <filename>codestriker</filename> virtual
        directory and select "Properties".  Click on the
        "Configuration..." button.  Check that there is an entry for
        <filename>.pl</filename> files, and that the "Executable Path"
        entry looks like (substitute the path to your local
	Perl installation):
	<programlisting>
C:\Perl\bin\perl.exe "%s" %s	  
	</programlisting>
        If there
	is no mapping for <filename>.pl</filename> files (which would
	be odd, since the ActiveState install does this for you
	automatically), add a new entry in with the above setting,
	limited to "GET,HEAD,POST".  Make sure you enter the quotes,
	as shown above.
      </para>
      <para>
        Follow a similar process for the
        <filename>codestrikerhtml</filename> directory.  Right-click
        "Default Web site" and select "New" -> "Virtual Directory" ->
        "Next".  Enter in <filename>codestrikerhtml</filename> into the
        Alias textfield, then click "Next".  Then enter the
        <filename>html</filename> directory of your unpacked
        Codestriker distribution into the "Directory" textfield, then
        click "Next".  Make sure the "Read" and "Browse" access permission
        checkboxes are selected, then "Next", then "Finished".
      </para>
      <para>
        Ensure the security for the two virtual directories
        <filename>codestriker</filename> and
        <filename>codestrikerhtml</filename> are appropriate for your
        site.  Right-click on each directory, and select "Properties",
        then the "Directory Security" tab.  Click the "Edit..." button
        and make the appropriate changes for your deployment.
      </para>
      <para>
        Right-click "Default Web site" and select "Start" if the
        website is not currently running, and test it.
      </para>
      <para>
        Further information on setting up IIS with Perl CGI can be
        found from <ulink
	url="http://www.mhuffman.com/notes/cgi/cgi_config.html">http://www.mhuffman.com/notes/cgi/cgi_config.html</ulink>.
      </para>
    </sect1>

    <sect1>
      <title>Upgrading Codestriker</title>
      <para>
        To upgrade, extract the distribution into another directory,
        check the <filename>CHANGELOG</filename> file to see if any
        configuration changes are required, since the last version you
        used, copy/modify your existing
        <filename>codestriker.conf</filename> file, and <emphasis>most
        importantly, run
        <filename>checksetup.pl</filename></emphasis>.  There is no
        harm in running this script as many times as you like.
      </para>
    </sect1>

  </chapter>

  <chapter>
    <title>User's Guide</title>
    <sect1>
      <title>Introduction</title>
      <para>
        The goal of this chapter is to present how to create/manage
        Codestriker projects, how to create code review topics, and
        then how to review these topics.  Assuming Codestriker has
        been configured and is running, you can get started by going
        to the following URL:
        <filename>http://yourhost.yourdomain/codestriker/codestriker.pl</filename>.
        This
        should take you to the topic list screen, which is talked
        about in the following section.  From a fresh install, there
        will obviously be no code review topics in the list.  However
        there is a link on this page to "Administer Projects",
        which will allow you to create some new projects to
        match your development process.  Once you have defined all of
        your initial projects, you can create a new code review topic
        by clicking on "Create new topic".  These screens are covered
        in the following sections.
      </para>
    </sect1>
    <sect1 id="topic-list">
      <title>Topic List Screen</title>
      <para>
        The topic list screen is used for displaying a list of code
        review topics, which contain the topic's title, author,
        reviewers, cc, creation date, links to the bugs it fixes, and
        its state.  The email address for the author, reviewers and cc
        fields are shortened for brevity reasons.  The links from the
        bug ids will take you to the bug tracking system (currently,
        only Bugzilla is supported) for more information on that
        specific bug.  A topic can be in one of the following states:
	<variablelist>
	  <varlistentry>
	    <term>Open</term>
	    <listitem>
	      <para>
	        This is the initial state of the topic, and indicates
	        it is still open for reviewing.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Closed</term>
	    <listitem>
	      <para>
	        Closed indicates that the review is no longer
	        relevant, or invalid.  A reviewer might decide that a
	        review posted is fixing a problem in the wrong way,
	        and after adding a comment, closes the review off.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Committed</term>
	    <listitem>
	      <para>
	        Committed indicates that all the comments posted to
	        the review have been addressed, and that the source
	        code has been committed into the SCM system.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Obsoleted</term>
	    <listitem>
	      <para>
	        Obsoleted indicates that the topic has been superseeded
                by another topic.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
	    
	An example screen can be seen in <xref
        linkend="figure-topiclist">.
	<figure id="figure-topiclist" float="1">
	  <title>Topic List Screenshot</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="topiclist.eps" format="eps" scale="50">
	    </imageobject>
	    <imageobject>
	      <imagedata fileref="topiclist.png" format="png">
	    </imageobject>
	  </mediaobject>
	</figure>
      </para>
      <para>
        To view a specific topic, click on its title.  This will take
        you to the view topic page, which is covered in <xref
        linkend="view-topic">.  From the "topic list" screen, it is
        possible to change the state of many topics in one action, by
        selected the checkboxes next to the topics of interest, and
        pressing the "Update" button with the state dropdown selected
        to the desired state.  If topic deletion functionality has
        been enabled, topics can be deleted by clicking on the
        individual topic, and then deleting it.  Generally speaking,
        topics are only deleted if the wrong content was posted by
        mistake.  It is useful to maintain all historical topics in
        the Codestriker database, as they can be searched over in the
        future, which is covered in <xref linkend="topic-search">.
      </para>
    </sect1>
    <sect1 id="projects">
      <title>Creating a new Project</title>
      <para>
        When a new code review topic is created, it is necessary to
        specify what project the review is related to.  Projects can
        be used as a filtering mechanism when displaying lists of
        topics (see <xref linkend="topic-search">).  This can be a
        great benefit, in the situation where a single Codestriker
        deployment is serving a large number of developer groups.
        Typically, a member of a developer group only wants to see the
        list of open code review topics in their project.
      </para>
      <para>
        An example project list screen can be seen in <xref
        linkend="figure-project-list">.
	<figure id="figure-project-list" float="1">
	  <title>Project List Screenshot</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="projectlist.eps" format="eps" scale="50">
	    </imageobject>
	    <imageobject>
	      <imagedata fileref="projectlist.png" format="png">
	    </imageobject>
	  </mediaobject>
	</figure>
      </para>
      <para>
        This figure shows an example Codestriker deployment, which
        shows the list of projects defined, where each row contains
        the project's name and description.  To edit a project's name
        and/or description, click on the project's name.  This will
        take you to a screen for modifying the project's attributes.
      </para>
      <para>
        At the bottom of the "project list" page, is a link to "Create
        new project".  This will take you a screen, as shown in <xref
        linkend="figure-create-project">.
	<figure id="figure-create-project" float="1">
	  <title>Create Project Screenshot</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="createproject.eps" format="eps" scale="50">
	    </imageobject>
	    <imageobject>
	      <imagedata fileref="createproject.png" format="png">
	    </imageobject>
	  </mediaobject>
	</figure>
      </para>
      <para>
        To create the project, simple fill in the details for the
        project's name and description, and press the "Submit"
        button.  This will then display an updated project list.
      </para>
    </sect1>
    <sect1 id="create-topic">
      <title>Creating a new Topic</title>
      <para>
        The "Create topic" screen can be accessed from a number of
        other screens, and requires the submission of a number of
        details in order to create a topic.  A screenshot can be seen
        in <xref linkend="figure-create-topic">.  It is also possible
        to create a new topic which obsoletes a number of other topics
        via the "Obsolete Topics" button on the topic list screen (see
        <xref linkend="topic-list">).  This is normally done when a
        review has many comments, and a new review (which obsoletes
        the old review) needs to be created which has addressed these
        comments.  It is also possible to generate new topics from the
        command line.  Check out the
        <filename>SubmitCodeReview.pl</filename> script in the
        <filename>bin</filename> directory in the Codestriker
        distribution.
	<figure id="figure-create-topic" float="1">
	  <title>Create Topic Screenshot</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="createtopic.eps" format="eps" scale="50">
	    </imageobject>
	    <imageobject>
	      <imagedata fileref="createtopic.png" format="png">
	    </imageobject>
	  </mediaobject>
	</figure>
      </para>
      <para>
        The topic title is a mandatory field which contains a one-line
        summary of the topic.  This title is used when the topic is
        displayed in the "Topic list" screen (see <xref
        linkend="topic-list">).  The topic description contains a more
        detailed description of the review itself, and should be enough
        for a reviewer to understand the purpose of the review.  If
        Codestriker is linked to a bug tracking system, further down in
        the form, the "Bug IDs" field gives the opportunity to enter
        in multiple bug ids (either space or comma separated), which
        will also give the reviewer an opportunity to see what bugs
        this review fixes.
      </para>
      <para>
        The "Project" dropdown list should be selected onto the
        project this review belongs to.  The last three fields contain
        comma-separated email addresses.  The "Your email address"
        field contains the email address which will receive review
        comments.  This is typically, the author's email address.  The
        "Reviewers" field contains the list of reviewer email address
        which will be notified once the review is created.  The "Cc"
        field is typically used for notifying a group email list that
        a new review has been created.  These field values are stored
        into your browser's cookie, so that the next time a review is
        created, these fields will be pre-filled, as they don't
        typically change much between different reviews.
      </para>
      <para>
        The most complex part of this form are the values required for
        the "Topic text upload", "Start tag", "End tag", "Module" and
        "Repository" fields.  These fields dictate what the actual
        review text is.  The first step is to select what source
        control management system the review was made against, and
        updating the "Repository" field accordingly.  The following
        sub-sections detail the different review inputs that can be
        handled.  Once all the details have been entered, and the
        "Submit" button is pressed, a confirmation screen will come up
        indicating that the review has been created.  An email, with
        a URL to view the topic will be sent to the author, reviewers
        and any email addresses entered in the "Cc" field.
      </para>
      <sect2>
	<title>Creating CVS Diff Topics</title>
	<para>
	  For CVS projects, a common situation is you have a checkout
	  of your project's module, and you have fixed a bug which
	  needs to be reviewed.  To get this reviewed in Codestriker,
	  you need to generate the review text, by going to the
	  top-level directory of your checkout, and issuing a command
	  like:
	  <programlisting>
% cvs diff -uN > /tmp/review.txt
	  </programlisting>
	  This command creates a diff file, which consists of the code
          changes you have made since you checked out the project from
          CVS.  The <option>-u</option> option indicates to create a
          "unidiff" formatted file, which is what Codestriker can
          parse.  The <option>-N</option> option means to show added
          and removed files.  Depending on your development process,
          you may want to issue different cvs diff commands with
          different flags, or even using "cvs rdiff" instead.
          Codestriker can accept any input, as long as
          <option>-u</option> is specified, to ensure the diff is in
          unidiff format.  Note for reviews which include C/C++ code,
          you can also include the
          <option>--show-function-line</option> and/or
          <option>--show-c-function</option> options, which will
          indicate for each diff delta in the display, what function
          is being modified.
	</para>
	<para>
	  This filename can either be entered directly into the "Topic
	  text upload" field, or selected from a file dialog which is
	  created when the "Browse" button is pressed.  The "Start
	  tag", "End tag" and "Module" fields can be left blank.  Once
	  all the other fields have been entered, clicking the
	  "Submit" button will create the review, and show a
	  confirmation screen.
	</para>
	<para>
	  In some development processes, CVS tags are used to mark
	  units of work that have been applied to the repository.
	  Rather than generating the review text via a CVS command, as
	  specified in the previously, the review text can be
	  specified by entering in the "Start tag", "End tag" and
	  "Module" name into their respective fields.  Codestriker
	  will then fetch the review text from the nominated
	  repository automatically, by executing the appropriate CVS
	  command itself.
	</para>
	<para>
	  Alternatively, Codestriker can also accept CVS diffs of
	  already committed code from commands such as:
	  <programlisting>
% cvs rdiff -uN -r START_TAG -r END_TAG MODULE
	  </programlisting>
	  Where START_TAG, END_TAG and MODULE are substituted with
	  appropriate values.  Note this is no different to what
	  Codestriker does when values are entered into the "Start
	  tag", "End Tag" and "Module" fields when creating a topic.
	</para>
	<para>
	  If you want to review code in its full form as it exists in
	  the repository for a specific tag value, you only need to
	  specify this tag value in either the START_TAG
	  <emphasis>or</emphasis> END_TAG field, and an appropriate
	  value in the MODULE field.  Codestriker will fetch all of
	  the source files for this module and tag into the topic, and
	  treat all of the files as "new" (ie, no diffs).  This is no
	  different to executing the following command to generate a
	  diff:
	  <programlisting>
% cvs rdiff -uN -r 1.0 -r TAG MODULE
	  </programlisting>
	</para>
      </sect2>
      <sect2>
        <title>Creating CVS Diff Topics Automatically</title>
	<para>
	  Depending on your development process, it may be more
	  convenient for CVS to automatically create a Codestriker
	  topic <emphasis>automatically</emphasis> whenever a commit
	  occurs.  The benefit with this approach is developers don't
	  need to explicitly create code reviews.  A "code reviewer"
	  can then monitor all commits to the repository, and has the
	  opportunity to send comments to the authors if they spot any
	  issues that need addressing.
	</para>
	<para>
	  The standard <filename>commit_prep.pl</filename> and
	  <filename>log_accum.pl</filename> scripts from CVS have been
	  modified so that the email which is sent after each commit
	  which contains the diff of the commit, also includes the URL
	  of the associated Codestriker topic that was created.
	</para>
	<para>
	  The <filename>commit_prep.pl</filename> and
	  <filename>log_accum.pl</filename> files are located in the
	  Codestriker <filename>bin</filename> directory, and need to
	  be copied into your <filename>CVSROOT</filename> directory,
	  with a line like the following in your
	  <filename>commitinfo</filename> file (read the comment in
	  this file to set this correctly for your site):
	  <programlisting>
DEFAULT $CVSROOT/CVSROOT/commit_prep.pl -r
          </programlisting>
	  and a line like the following in your
	  <filename>loginfo</filename> file (read the comment in this
	  file to set this correctly for your site):
	  <programlisting>
DEFAULT $CVSROOT/CVSROOT/log_accum.pl %s
          </programlisting>
	   The <filename>log_accum.pl</filename> file needs to have
	   some configuration variables set at the start of the script
	   to reflect your site.  You will also need to make sure you
	   create a <filename>$CVSROOT/CVSROOT/commitlogs</filename>
	   directory with the appropriate user-writable permissions,
	   as commit information is written here as a result of these
	   scripts running.
	 </para>
	 <para>
	   Note the first line of the log message will be used as the
	   topic title.  The entire log message is used as the topic
	   description.  Any strings of the form "Bug nnn" in the log
	   message will be taken as a reference to a bug id, and will
	   be used in the topic's bugid field.
	 </para> 
      </sect2>
      <sect2>
        <title>Creating Diff Topics</title>
	<para>
	  In some deployments, there may not even be a source control
	  management system, and it might be the case that only diffs
	  are reviewed.  An example command to generate the review
	  text could be something like:
	  <programlisting>
% diff -urN ../old-version/ . > /tmp/review.txt
	  </programlisting>
          Like the CVS command shown above, the <option>-u</option>
          and <option>-N</option> options are specified to output a
          unidiff file, which contains new and old files.  The
          <option>-r</option> option indicates to recursively check
          the source and target directories specified (in this case
          <filename>../old-version</filename> and
          <filename>.</filename> to find differences.  There are
          likely to be other options that will be specified, run
          <command>man diff</command> for more options.  Note for
          reviews which include C/C++ code, you can also include the
          <option>--show-function-line</option> and/or
          <option>--show-c-function</option> options, which will
          indicate for each diff delta in the display, what function
          is being modified.
	</para>
	<para>
	  The "Start tag", "End tag" and "Module" fields have no
	  relevance in this situation.
	</para>
      </sect2>
      <sect2>
	<title>Creating Plain Text Topics</title>
	<para>
	  It is also possible to use Codestriker to simply review text
	  that is not in the form as a diff.  In this situation,
	  Codestriker will simply treat the text as a single new file.
	  Reviewers will still be able to view the text and make
	  comments on a per-line basis as before.  Simply put the
	  filename to be reviewed in the "Topic text upload" field.
	  The "Start tag", "End tag" and "Module" fields have no
	  relevance in this situation.
	</para>
      </sect2>
      <sect2>
	<title>Creating Subversion Diff Topics</title>
	<para>
	  Similar to CVS, Subversion diffs are created by again, going
	  to the top of your project directory, and issuing the
	  following command:
	  <programlisting>
% svn diff -N > /tmp/review.txt
	  </programlisting>
	  This file should then be selected for the "Topic text
	  upload" field.  The "Start tag", "End tag" and "Module"
	  fields have no relevance in this situation. Because of an 
          issue in Subversion, running the <command>svn diff</command>
	  command <emphasis>outside</emphasis> of the repository root
	  will not allow Codestriker to download and review the full
	  file (although the patch segments can still be reviewed). If
	  you commit your code first, then let Codestriker make the
	  diff, as explained in the next section, then you can avoid
	  this limitation. If you really don't want to commit your
	  code, you will need to modify the diff file to include the
	  paths on the Index: +++, and --- lines generated by
	  <command>svn diff</command>.
	</para>
	<para>
	  In some development processes, branches are used as the
          logical unit of work that should be reviewed. Rather than
          generating the review text via the <command>svn
          diff</command> command, as specified in the previous
          section, the review text can be created by setting the
          appropriate values into the "Start tag", "End tag" and
          "Module" fields.  Codestriker will then fetch the review
          text from the nominated repository automatically, by
          executing the following command:
	  <programlisting>
% svn diff --non-interactive -r START_TAG:END_TAG --old repository_url MODULE
	  </programlisting>
          In Subversion the tags can be a repository revision number
          or HEAD, The HEAD shortcut indicates the latest revision
          number in the repository.  If you would like to review a
          specific single check in, for example, check in 544, then
          you would use 543 for START_TAG and 544 for END_TAG.
	</para>
	<para>
	  If you would like to review a branch before merging then
          enter the start tag as the version number of the branch
          creation. The end tag should be HEAD, and the module path
          should be the path into the branch directory relative to the
          repository location. All topics created by Codestriker have
          a builtin workaround for the Subversion diff problem.
	</para>
      </sect2>
      <sect2>
        <title>Creating Perforce Diff Topics</title>
	<para>
	  Similar to CVS, Perforce diffs are created by going to the
	  top of your checkout (or client view in Perforce
	  terminology) and issuing a command like:
	  <programlisting>
% p4 diff -du > /tmp/review.txt
	  </programlisting>
	  This file should then be selected for the "Topic text
	  upload" field.  The "Start tag", "End tag" and "Module"
	  fields have no relevance in this situation.
	</para>
	<para>
	  Alternatively, for code which has already been committed
	  into the repository (or depot in Perforce terminology), a
	  command like the following can be used to generate the topic
	  text:
	  <programlisting>
% p4 describe -du 132 > /tmp/review.txt
	  </programlisting>
	  Here 132 is the change-number.  This should be substituted
	  with the change-number that you want to review.
	</para>
      </sect2>
      <sect2>
       <title>Creating ClearCase Diff Topics</title>
       <para>
          In its very basic form, a ClearCase diff file can be created
          for a single file using the following command:
	  <programlisting>
% cleartool diff -serial_format -predecessor filename > /tmp/review.txt
	  </programlisting>
	  This file can then be uploaded into Codestriker for
	  reviewing.  Of course, it is far more useful to be able to
	  review a group of files at once.  In ClearCase, to determine
	  which files are a part of a view, you can use the following
	  command from the top level of your checkout:
	  <programlisting>
% cleartool lsco -cview -short -recurse
	  </programlisting>
       </para>
       <para>
          Combine the two commands together to generate a single
          file with all modified files can be achieved doing something
          like:
	  <programlisting>
% cleartool lsco -cview -short -recurse | \
  xargs -n1 cleartool diff -serial_format -predecessor > /tmp/review.txt
	  </programlisting>
	  Note if you are on a Win32 platform, and you have cygwin
	  installed, you may need to add an intermediate sed command
	  so that cleartool doesn't complain:
	  <programlisting>
% cleartool lsco -cview -short -recurse | sed 's/\\/\//g' | \
  xargs -n1 cleartool diff -serial_format -predecessor > /tmp/review.txt
	  </programlisting>
       </para>
       <para>
         In all of the above commands, if a ClearCase repository has
         been specified in the Codestriker configuration, it is
         important that the above commands are run from the
         <emphasis>top-level directory</emphasis> of the view, so that
         the full vob pathname information is available within the
         diff files.  This allows Codestriker to retrieve the full
         contents of files from the vob, so that a reviewer can see
         the changes applied to an entire file, rather than a small
         segment.
       </para>
       <para>
	 Note the above commands can be modified if there is
         only interest in a specific sub-directory in your view, for
         example, the
         <command>cleartool lsco</command> can be amended with the
         sub-directory of interest as follows:
	  <programlisting>
% cleartool lsco -cview -short -recurse pathname/to/interested/dir | \
  xargs -n1 cleartool diff -serial_format -predecessor > /tmp/review.txt
	  </programlisting>
	</para>
      </sect2>
    </sect1>
    <sect1>
      <title>Reviewing Topics</title>
      <para>
        Reviewing a topic is achieved by going to the "View Topic"
        screen for a specific review topic.  This can be accessed from
        either the "Topic List" screen (<xref linkend="topic-list">),
        or from a URL in a new topic notification email, which is sent
        to the author and reviewers.
      </para>
      <sect2 id="view-topic">
	<title>Viewing a Topic</title>
	<para>
	  The "View Topic" screen is one of four tabs available for
          viewing aspects of a topic.  An example "Topic Text" tab
          display can be seen in <xref linkend="figure-viewtopic">.
	  <figure id="figure-viewtopic" float="1">
	   <title>View Topic Screenshot</title>
	   <mediaobject>
	     <imageobject>
	       <imagedata fileref="viewtopic.eps" format="eps" scale="50">
	     </imageobject>
	     <imageobject>
	       <imagedata fileref="viewtopic.png" format="png">
	     </imageobject>
	   </mediaobject>
	  </figure>
	</para>
	<para>
	  The top bar contains the following links to other
	  Codestriker pages:
	  <variablelist>
	    <varlistentry>
	      <term>List open topics</term>
	      <listitem>
	        <para>
		  Following this link will take you to the "Topic
		  List" page (see <xref linkend="topic-list">), and
		  will display all open topics in the system.
	        </para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>Create new topic</term>
	      <listitem>
	        <para>
		  Following this link will take you to the "Create
		  Topic" page (see <xref linkend="create-topic">).
	        </para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>Search</term>
	      <listitem>
	        <para>
		  Following this link will take you to the "Topic
		  Search" page (see <xref linkend="topic-search">).
	        </para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>Help</term>
	      <listitem>
	        <para>
		  Following this link will show this help text.
	        </para>
	      </listitem>
	    </varlistentry>

          </variablelist>	
	</para>
	<para>
	  The next part of the screen shows the four available tabs
	  for viewing different aspects of a topic.  The "Topic
	  Comments" tab is for viewing the comments that have been
	  submitted against the topic.  Clicking on this tab will take
	  you to the "Topic Comments" page (see <xref
	  linkend="view-comments">).  The "Topic Properties" tab takes
	  you to a page where you can view and edit the topic's
	  attributes, such as the title, author,
	  reviewer, the repository the code in the review has been
	  made against, the project the review is associated with, and
	  the topic description.  Clicking on this tab will take you
	  to the "Topic Properties" page (see <xref
	  linkend="topic-properties">).  Finally the "Topic
	  Information" tab contains topic metric data, both
	  user-defined and entered, and those that can be
	  automatically derived by Codestriker.  Clicking on this tab
	  will take you to the "Topic Information" page (see <xref
	  linkend="topic-information">).
        </para>
	<para>
	  Following the "Download topic text" link
	  will return in the browser the raw topic text
	  which was entered when the review was created.  This can be
	  useful if the raw diff needs to be retrieved, so it can be
	  used as a patch file.  There are some links which affect the
	  display, such as whether a mono-space font should be used to
	  render the code changes (requires more screen real-estate),
	  whether to preserve the code's line-breaking or not, and
	  what tab-width to use.
	</para>
	<para>
	  This is followed by the table of contents of the review,
	  which consists of the list of files which comprise the
	  topic, whether they are added, removed or modified
	  files, appropriately colour-coded.
	  If a file has been modified, the revision of the file that has been
	  modified is displayed.  If filename is clicked, the browser will move to
	  the anchor which corresponds to changes made to that file.
	</para>
	<para>
	  The rest of the "View Topic" page can be seen in <xref
	  linkend="figure-viewtopicdetail">.
	  <figure id="figure-viewtopicdetail" float="1">
	   <title>View Topic Detail Screenshot</title>
	   <mediaobject>
	     <imageobject>
	       <imagedata fileref="viewtopicdetail.eps" format="eps"
	                  scale="35">
	     </imageobject>
	     <imageobject>
	       <imagedata fileref="viewtopicdetail.png" format="png">
	     </imageobject>
	   </mediaobject>
	  </figure>
        </para>
	<para>
	  This shows the start of the code changes for the file
	  <filename>codestriker/codestriker.pl</filename>.  Clicking
	  on the filename will show revision history of this file, if
	  Codestriker has been configured to link with a system, like
	  ViewCVS.  The "Go To Contents" link will move the browser
	  back to the table of contents.
	</para>
	<para>
	  From this point, the screen in split into two sections,
	  where the left side represents the old version of the file,
	  and right side represents the new version.  In the figure,
	  the code in the block of red represents code which has been
	  removed in the proposed change.  Adjacent yellow blocks
	  represent code changes, as can be seen with the version
	  number change.  The green block represents new code which
	  has been added, in this instance, the new constants for
	  viewing modes.
	</para>
	<para>
	  Each file is broken up into a series of "deltas".  At the
	  head of each delta block, for both the old and new versions
	  of the file, there is an indication of what line number the
	  delta started at.  In this situation, clicking on the "Line
	  24" link on the left hand side, will open a new browser
	  window, which will contain the complete original contents of
	  <filename>codestriker/codestriker.pl</filename>, anchored at
	  line 24.  Clicking on the "Line 22" link on the right hand
	  side will contain the complete contents of
	  <filename>codestriker/codestriker.pl</filename> will
	  <emphasis>all</emphasis> of the proposed changes applied.
	  Clicking on "Parallel" will do a similar job, but will show
	  both the original and new version of the complete file
	  side-by-side.  See <xref linkend="view-file"> for more
	  details on what can be done with these complete file-based
	  views, which can assist enormously in the review process.
	</para>
	<para>
	  Every line of code in the display, is prefixed with a
	  hyperlinked number.  This number represents the line number
	  of the file.  If a comment needs to be made against a
	  specific linenumber, click on the linenumber, and a new
	  browser window will come up with the "Add Comment" page (see
	  <xref linkend="add-comment">).  This may take some time the
	  first time, as a new browser window needs to be created.
	  After the comment has been entered, the main browser window
	  is displayed, and the comment window is not closed, so that
	  for subsequent comments, the add comment window can be
	  displayed quickly.
	</para>
      </sect2>
      <sect2 id="add-comment">
	<title>Adding a Comment</title>
	<para>
	  A comment against a line is made by clicking on the line
	  number of interest.  This will display another browser
	  window, an example can be seen in <xref
	  linkend="figure-add-comment">.
	  <figure id="figure-add-comment" float="1">
	   <title>Add Comment Screenshot</title>
	   <mediaobject>
	     <imageobject>
	       <imagedata fileref="edittopic.eps" format="eps" scale="50">
	     </imageobject>
	     <imageobject>
	       <imagedata fileref="edittopic.png" format="png">
	     </imageobject>
	   </mediaobject>
	  </figure>
	  As can be seen in the figure, a summary of the topic title
          is displayed, followed by a text box where the comment can
          be entered.  Any formatting will be preserved, so that you
          can enter new code fragments, if required.  Any comment
          metrics defined in the Codestriker configuration will appear
          here as a series of dropdown boxes.  In this example, there
          is only the comment metric "Status" defined.  As before,
          your email address is remembered in the browser's cookie, to
          prevent you from having to enter it each time you make a
          comment.  When the "Submit" button is pressed, an email will
          be generated and sent to the author of the review, to the
          email address in the "Your email address" field as a
          reference, to the email address in the "Cc" field, just in
          case there is a requirement to send the email elsewhere, and
          to any other email addresses that have made a comment on
          this line, so that it is possible to get a form of
          discussion happening.
          </para>
          <para>
          Any comments already made (if any) against this specific
	  line will then be displayed.  The screenshot shows one
	  comment has already been made against this code line.  The
	  code line the comment is being made against is then
	  displayed.  The "increase" link can increase the amount of
	  context code to display, while "decrease" will decrease the
	  amount of context code.  The code line in question will be
	  highlighted in red.
	</para>
	<para>
	  Once the comment has been submitted, the main "View Topic"
	  window will be displayed so that the review can quickly
	  continue.  If a new comment needs to be added, the comment
	  browser window will be bought back quickly into focus.
	</para>
      </sect2>
      <sect2 id="view-file">
	<title>Viewing Complete old/new Files</title>
	<para>
	  As mention in <xref linkend="view-topic">, it is possible to
	  view the entire contents of a file in a review in its
	  original form, or in its proposed form, or side-by-side
	  depending on whether the "Line" or "Parallel" link was
	  selected.  The review has to be linked to a SCM repository,
	  so that it can fetch parts of the file which aren't a part
	  of the review text.
	</para>
	<para>
	  When a "Line" link is clicked, a new browser window will
	  come up with the contents of the file.  Like the "Add
	  Comment" window, this will be slow the first time, but in
	  subsequent times will be fast since the browser window is
	  not closed.  An example of this window can be seen in <xref
	  linkend="figure-viewfile">.
	  <figure id="figure-viewfile" float="1">
	   <title>View File Screenshot</title>
	   <mediaobject>
	     <imageobject>
	       <imagedata fileref="fileview.eps" format="eps" scale="35">
	     </imageobject>
	     <imageobject>
	       <imagedata fileref="fileview.png" format="png">
	     </imageobject>
	   </mediaobject>
	  </figure>
	</para>
	<para>
	  This view matches the new contents of
	  <filename>codestriker/codestriker.pl</filename>, from the
	  "View Topic" screen seen in <xref linkend="view-topic">.
	  Each corresponding delta will have consecutive hyperlinked
	  line numbers.  Those lines which do not have a hyperlinked
	  line number are outside the deltas in the review, but are a
	  part of the file.  Clicking on a hyperlinked line will bring
	  the "Add Comment" window into display, in the same way it
	  would as if the line number was clicked from the "View
	  Topic" screen.
	</para>
	<para>
	  Seeing the entire contents of a file, either pre or post
	  change is often essential to complete a review properly.
	  Sometimes, it is necessary to see both versions of the file
	  side-by-side.  An example can be seen in <xref
	  linkend="figure-parallelfileview">.
	  <figure id="figure-parallelfileview" float="1">
	   <title>Parallel View File Screenshot</title>
	   <mediaobject>
	     <imageobject>
	       <imagedata fileref="parallelfileview.eps" format="eps"
	                  scale="35">
	     </imageobject>
	     <imageobject>
	       <imagedata fileref="parallelfileview.png" format="png">
	     </imageobject>
	   </mediaobject>
	  </figure>
	  The same rules apply for adding comments - any hyperlinked
	  line number can be clicked in order to add a comment.
	</para>
      </sect2>
    </sect1>
    <sect1 id="view-comments">
      <title>Viewing Comments</title>
      <para>
        From the "View Topic" page (see <xref linkend="view-topic">),
        the "Topic Comments" tab can be clicked to 
        view the comments associated
        with a topic.  This can be clicked at any stage to see what
        comments have been submitted against a review.  It is often
        necessary for the author once a review has been completed, to
        work their way through the comments from the browser, although
        they can do this with their email client as well (assuming
        <varname>$allow_comment_email</varname> is true in
        <filename>codestriker.conf</filename>), since each comment
        will generate an email message.  An example screenshot of the
        "Topic Comments" page can be seen in <xref
        linkend="figure-viewcomments">.
        <figure id="figure-viewcomments" float="1">
	   <title>Topic Comments Screenshot</title>
	   <mediaobject>
	     <imageobject>
	       <imagedata fileref="viewcomments.eps" format="eps" scale="50">
	     </imageobject>
	     <imageobject>
	       <imagedata fileref="viewcomments.png" format="png">
	     </imageobject>
	   </mediaobject>
	</figure>
      </para>
      <para>
        A separate heading is shown in the display, for each comment
        thread, which represents a series of comments made against a
        specific code line.  For each thread, all of the comments made
        are shown, including author and date information.  For each
        comment thread, the current values of the comment metrics
        associated with the thread will be displayed.  In this
        example, there is only a single comment metric clled "Status".
        The metric values associated with the thread can be updated by
        changing the value of the metric dropdowns, and clicking the
        "Update" button at the bottom of the page.
      </para>
      <para>
	For each comment thread, there are three links to other
	Codestriker screens.  The first link will bring up a "View
	File" page (see <xref linkend="view-file">) centered on the
	line number of the comment, "Parallel" will do the same, by
	using the parallel view, and the "Add comment" link will bring
	up the "Add Comment" page (see <xref linkend="add-comment">)
	for that line number.
      </para>
      <para>
        In this particular example, there are two comment blocks, for
        file <filename>codestriker/codestriker.pl</filename>, on lines
        27 and 60.
      </para>
      <para>
        At the top of this page are a number of filtering options,
        which control what comments are displayed.  Comments can be
        filtered by the author of the comment and/or specific comment
        metric values.  In addition, for each comment block, it is also
        possible to display the context of the topic text the comment
        block is made against (as is done for the "Add Comment" page,
        see
        <xref linkend="add-comment">).  These controls provide the
        capability for generating code review reports, which can then
        be used at code inspection meetings.
      </para>
    </sect1>
    <sect1 id="topic-properties">
      <title>Topic Properties</title>
      <para>
        From the "View Topic" page (see <xref linkend="view-topic">),
        the "Topic Properties" tab can be clicked to view and edit
        topic properties.  An example screenshot of this page can
         be seen in <xref linkend="figure-topic-properties">.
        <figure id="figure-topic-properties" float="1">
	   <title>Topic Properties Screenshot</title>
	   <mediaobject>
	     <imageobject>
	       <imagedata fileref="topicproperties.eps" format="eps" scale="50">
	     </imageobject>
	     <imageobject>
	       <imagedata fileref="topicproperties.png" format="png">
	     </imageobject>
	   </mediaobject>
	</figure>
      </para>
      <para>
        This page provides the opportunity to modify topic properties,
	such as the title, author, reviewers, cc, repository, project,
	description and the state of the topic.  If Bugzilla
        integration is enabled, the list of associated bugids will
	be displayed here as well.  Any changes in the author,
        reviewers and/or cc fields can generate new topic
	notification emails to alert the new parties involved in
	the review.
      </para>
    </sect1>
    <sect1 id="topic-information">
      <title>Topic Information</title>
      <para>
        From the "View Topic" page (see <xref linkend="view-topic">),
        the "Topic Information" tab can be clicked to view and edit
        topic information.  An example screenshot of this page
	    can be seen in <xref linkend="figure-topic-information">.
        <figure id="figure-topic-information" float="1">
	   <title>Topic Properties Screenshot</title>
	   <mediaobject>
	     <imageobject>
	       <imagedata fileref="topicinformation.eps" format="eps" scale="50">
	     </imageobject>
	     <imageobject>
	       <imagedata fileref="topicinformation.png" format="png">
	     </imageobject>
	   </mediaobject>
	</figure>
      </para>
      <para>
            This page is divided into four sections.  The "Comment
            Metrics" section provides an aggregate count for the
            number of comment threads with specific comment metric
            values.  The "Total" subsection displays the number of
            comment threads in the topic, followed by the total number
            of comments submitted.  This is followed by the "Topic
            Metrics" and "User Metrics" sections for this topic.  If
            there are additional metrics defined here via the
            Codestriker configuration file, the user will be able to
            update their values here.  The last part of the page is
            the "Activity Log", which provides an audit trail of all
            the important events that occurred in the topic's
            lifetime, such as creation and state changes.
      </para>
      <para>
         The Codestriker time metric is calculated by keeping
	 timestamps of every refresh from the http server for the
	 given topic. Now, just because you are not refreshing the
	 topic does not mean that you are not looking at the topic.
	 Codestriker will assume that you are looking at the topic for
	 4 minutes after the last refresh. If you click on a topic,
	 and close the browser, it is logged as 4 minutes. The
	 situation is unavoidable unless you put a camera on the
	 computer and keep track of how long people are sitting at
	 their computer, awake, and looking at the browser window. If
	 this is not acceptable, users of Codestriker have the option
	 to ask the reviewers to directly log the time spent in the
	 review. The direct logging can be enabled via
	 <varname>$metrics_config</varname> variable in the
	 <filename>codestriker.conf</filename> file. The Codestriker time
	 metric is "free" metric, being that it does not require any
	 extra interactions with the user to operate. The trade off is
	 that the accuracy of the data may not be as good as the
	 direct logging done by a disciplined team. However, if your
	 team is not very disciplined and can't be trusted to put in
	 100% accurate data, the Codestriker time metric will be
	 better because it will not be biased by the reviewer's
	 logging discipline.
      </para>
      <para>
        The code that deals with all of the this is in
	<filename>lib/Codestriker/Model/Metrics.pm</filename>, in
        the <filename>calculate_topic_view_time</filename> method.
      </para>
    </sect1>
    <sect1 id="topic-search">
      <title>Topic Search</title>
      <para>
        If Codestriker is used to review all new code before it is
        committed into a SCM, it builds up a very important
        development history.  Since all this information is stored in
        a relational database, the information is searchable.  The
        "Topic Search" screen provides an interface for locating
        topics, depending on a search criteria.  The "Topic Search"
        screen can be seen in <xref linkend="topic-search">.
        <figure id="figure-search" float="1">
	   <title>Topic Search Screenshot</title>
	   <mediaobject>
	     <imageobject>
	       <imagedata fileref="search.eps" format="eps" scale="50">
	     </imageobject>
	     <imageobject>
	       <imagedata fileref="search.png" format="png">
	     </imageobject>
	   </mediaobject>
	</figure>
      </para>
      <para>
        By default, pressing "Submit" without typing anything extra
        will return all open topics in the system.  This is because
        the "State" field is set to match any topic in state "Open",
        and the "Project" field is set to "Any", which will match any
        project, and there are no other constraints in the other
        fields.  The search can be narrowed by entering in matching
        text in the "Author", "Reviewer", "Cc" and "Bug ID" fields.
      </para>
      <para>
        The "Contains text" field in allows for searching in the
        following areas, depending on which checkboxes have been
        enabled (multiple checkboxes are ORed together):
	  <variablelist>
	    <varlistentry>
	      <term>title</term>
	      <listitem>
	        <para>
		  This will try to match the entered text with a
		  topic's title.
	        </para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>description</term>
	      <listitem>
	        <para>
		  This will try to match the entered text with a
		  topic's description.
	        </para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>comment</term>
	      <listitem>
	        <para>
		  This will try to match the entered text with a
		  comment associated with a topic.
	        </para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>body</term>
	      <listitem>
	        <para>
		  This will try to match the entered text with the
		  actual code associated with a topic.
	        </para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>filename</term>
	      <listitem>
	        <para>
		  This will try to match the entered text with a
		  filename that was a part of a topic.
	        </para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
      </para>
      <para>
        In all cases, text entered will match the corresponding
        database text fields as a substring match.  That is, entering
        "paul" in the "Author" field will match the author
        "paul@zot.com" or "joe_paul@zoo.com".  It is also possible to
        use wildcards in the entered text, such as "joe*paul@zoo.com".
	Once the "Submit" button is pressed, the results are displayed
        in the "Topic List" page (see <xref linkend="topic-list">).
      </para>
    </sect1>
    <sect1 id="metrics-report">
      <title>Metrics Report</title>
      <para>
        From the "Topic list" screen  (see <xref
        linkend="topic-list">), clicking on "Metrics Report" will take
	      you to this page.  An example screenshot can be seen in
	      <xref linkend="figure-metrics-report">.
        <figure id="figure-metrics-report" float="1">
	   <title>Metrics Report Screenshot</title>
	   <mediaobject>
	     <imageobject>
	       <imagedata fileref="metricsreport.eps" format="eps" scale="50">
	     </imageobject>
	     <imageobject>
	       <imagedata fileref="metricsreport.png" format="png">
	     </imageobject>
	   </mediaobject>
	</figure>
      </para>
      <para>
        As it can be seen, this page presents aggregated views for
	user metrics over the past 16 weeks, and topic metrics over 
        last year, aggregated by month.  For a real software team,
        this page will provide a wealth of detail as to how effective
        code reviews are.   There is a link at the
        bottom of the page for retrieving this information as a
        CSV file, which can then be imported into other tools.
      </para>
    </sect1>

  </chapter>

  <chapter>
    <title>Hacking</title>
    <sect1>
      <title>Codestriker Layout</title>
      <para>
        This chapter is for developers which wish to contribute to
	Codestriker, and want a quick birds-eye view as to how the
	code is structured.  The Codestriker modules are broken into
	the following sub-modules, which are located in
	<filename>lib/Codestriker</filename>:
	<variablelist>
	  <varlistentry>
	    <term>Action</term>
	    <listitem>
	      <para>
	        Every action or gesture that can be performed on the
		Codestriker UI has an associated module for handling
		that action.  The name of the module indicates what
		action it is handling.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>BugDB</term>
	    <listitem>
	      <para>
	        Support for updating bug tracking systems when topics
		are created or their state is changed against specific
		bug reports.  Currently, only Bugzilla is supported,
		but the API can support other bug-tracking systems.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>DB</term>
	    <listitem>
	      <para>
	        A thin wrapper over the DBI interface, to
		create/remove database connections.  Each database
	    also has an associated module, to cater for subtle
	    differences between database systems.  Currently, there is
	    support for MySQL, PostgreSQL, ODBC (SQL Server) and Oracle.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>FileParser</term>
	    <listitem>
	      <para>
	        These modules are responsible for parsing the input
		text when topics are created.  Currently, CVS
		unidiffs, PATCH unidiffs and Subversion diff files are
		supported.  The API for these parsers is simply to
		accept input text, and to return an array of delta
		objects, which describe source code changes made to a
		specific file on specific lines.  These delta objects
		are then used for rendering a topic, so that they are
		agnostic to which source control system they
		originated from.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Http</term>
	    <listitem>
	      <para>
	        This contains initial HTTP request processing, and
		support for generating an HTTP response, including the
		handling of cookies and compressed streams.  This
		sub-module also contains the all-important Render.pm
		module, which is the work-horse for generating the
		complex HTML from the topic deltas.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Model</term>
	    <listitem>
	      <para>
	        This contains the persistent objects of the system,
		and the associated database operations on them.  These
		objects include Topics, Comments, Files and Deltas.
		The Action classes eventually call these model objects
		when the persistent state of the system needs to be
		queried or modified.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Repository</term>
	    <listitem>
	      <para>
	        A number of objects implement the Repository API,
		which is used throughout the system.  Repositories
		currently supported include a local CVS repository, a
		remote CVS repository whose data is accessed by HTTP
		or the pserver protocol, and Subversion.  Future
		repositories can be easily added to this framework.
		The methods in the repository API include a way of
		retrieving the entire contents of a specified file and
		revision (which is used in the ViewFile action
		module), and the generation of a revision file log
		URL.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>TopicListener</term>
	    <listitem>
	      <para>
	        This package contains a number of objects which are
	    notified whenever a topic is changed, via a listener
	    interface.  Functionality such as email notification,
	    Bugzilla integration, topic history recording are
	    implemented here as topic listeners.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>

      <para>
	In addition to the above modules, the following directories
	are of interest:
	<variablelist>
	  <varlistentry>
	    <term>bin</term>
	    <listitem>
	      <para>
	        This contains the all-important
		<filename>checksetup.pl</filename> script, which is
		used for initialising the system, and for performing
		upgrades.  This isn't the most pretty script in the
		world, partly for all of the old data-migration it has
		to do from old versions to the current version.  This
		directory also contains
		<filename>SubmitCodeReview.pl</filename> which is a
		way of generating code reviews from the command line.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>cgi-bin</term>
	    <listitem>
	      <para>
	        This contains the codestriker.pl CGI script.  It reads
		the "action" parameter from the URL, and delegates the
		handling of the request to the appropriate action
		object.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>html</term>
	    <listitem>
	      <para>
	        This contains the <filename>codestriker.css</filename>
	        file.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>templates</term>
	    <listitem>
	      <para>
	        Almost all of the HTML generated by Codestriker (apart
	        from the actual code rendering) can be customised by
	        the templates within this directory.  Each Action
	        object typically has an associated template, where the
	        view can be easily customized.  There is also a header
	        and footer template, which is included in every page,
	        for site customization.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>doc</term>
	    <listitem>
	      <para>
	        This directory contains the source for the Codestriker
	        guide written in docbook, contained in the
	        <filename>codestriker.sgml</filename>, with the
	        <filename>Makefile</filename> for building the various
	        forms of the documentation.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
    </sect1>
    <sect1>
      <title>Database Schema</title>
      <para>
        The <filename>bin/checksetup.pl</filename> script contains the
        <command>CREATE TABLE</command> statements that are used when
        the Codestriker database is initialised, in the
        <varname>$table</varname> hash.  The following tables are
        defined:
	<variablelist>
	  <varlistentry>
	    <term>project</term>
	    <listitem>
	      <para>
	        A Codestriker database can consist of a number of
	        projects, which have a name, id, description and
	        creation date.  Each code review topic, is linked to a
	        specific project.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>topic</term>
	    <listitem>
	      <para>
	        A topic represents a code review that has been
	        submitted to Codestriker.  It contains attributes like
	        the author, title, description, creation date,
	        repository, and is linked to a member project.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>participant</term>
	    <listitem>
	      <para>
	        A participant is associated with a topic, and contains
	        an email address, and the type of participant they
	        are, such as the author, reviewer or observer
	        (somebody was is CC'ed for the review).
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>commentdata</term>
	    <listitem>
	      <para>
	         A comment is made against a specific review, and
	         consists of the author and the comment text itself.
	         It is linked with a specific commentstate object.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>commentstate</term>
	    <listitem>
	      <para>
	        A commentstate row represents a comment block - a list
		of comments made against a specific file and line
		number.  The comment block has the notion of state,
		whether it is marked "submitted", "complete" or
		"invalid".
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>topicbug</term>
	    <listitem>
	      <para>
	        This table records a many-to-many relationship between
	        topics and bug ids.  A topic may fix more than one bug
	        id, and likewise, a bug id can be fixed by many
	        topics.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>topicfile</term>
	    <listitem>
	      <para>
	        A topic consists on many file objects, which contain a
	        filename, revision number and an indicator as to
	        whether it is a text or binary file.  A file consists
	        of one or more delta objects.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>delta</term>
	    <listitem>
	      <para>
	        A delta is associated with a specific file object, and
	        represents a single diff chunk or change.  It
	        represents for file X, at line number Y, the following
	        change is a part of the review.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>topichistory</term>
	    <listitem>
	      <para>
                Records a trail as to who modified what topic
	        properties and when that occurred.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>commentstatehistory</term>
	    <listitem>
	      <para>
                Records a trail for the modification of
                comment blocks.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>topicviewhistory</term>
	    <listitem>
	      <para>
                Records who has viewed a topic and when.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>topicmetric</term>
	    <listitem>
	      <para>
                Records the value of a metric against a specific topic.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>topicusermetric</term>
	    <listitem>
	      <para>
                Records the value of a metric against a specific topic
                for a specific user.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
    </sect1>
    <sect1>
      <title>Code Style Guide</title>
      <para>
        <itemizedlist>
          <listitem>
	    <para>
	      All comments must be complete sentences. Start with
	      a capital letter, and end with a fullstop.
            </para>
          </listitem>
          <listitem>
	    <para>
	      Function calls should have no extra spaces around the
	      <function>()</function>, so <function>function( x
	      )</function>, should be written
	      <function>function(x)</function>.
	    </para>
	  </listitem>
          <listitem>
	    <para>
	      Functions calls with more than one parameter should have
	      spaces after the argument, so
	      <function>function(x,y,z)</function>, should be
	      <function>function(x, y, z)</function>.
	    </para>
	  </listitem>
          <listitem>
	    <para>
	      Limit line length where possible to 80 characters.
	    </para>
	  </listitem>
          <listitem>
	    <para>
	      All SQL statements should use uppercase for SQL
	      keywords, and lowercase for everything else.
	    </para>
	  </listitem>
        </itemizedlist>             
      </para>
    </sect1>
  </chapter>

  <chapter>
    <title>Troubleshooting</title>
    <para>
      If you have any problems, be sure to check first if it isn't a
      well-known Perl problem.  The Bugzilla trouble-shooting page at
      <ulink
      url="http://www.bugzilla.org/docs216/html/troubleshooting.html">http://www.bugzilla.org/docs216/html/troubleshooting.html</ulink>
      documents them well.  If the problem doesn't match, send a
      message (see
      <xref linkend="contact">), along with any relevant information
      (including relevant contents of your apache error log file), and
      I'll be happy to help you out.
    </para>
    <para>
      If you see an error message like:
      <programlisting>
[Tue Jan  6 08:41:49 2004] [error] Bizarre copy of HASH in assign at
/usr/lib/perl5/5.6.0/Carp/Heavy.pm line 79      
      </programlisting>
      This is apparently due to a bug in Perl 5.6.0.  If you upgrade
      to Perl 5.6.1, the problem should go away.
    </para>
  </chapter>

  <chapter>
    <title>Future Plans</title>
    <para>
      <itemizedlist>
        <listitem><para>Web-based configuration</para></listitem>
        <listitem><para>Per-user preferences for email</para></listitem>
        <listitem><para>Ability to review formatted design documents</para></listitem>
	<listitem><para>User authentication</para></listitem>
      </itemizedlist>             
    </para>
  </chapter>

  <chapter id="contact">
    <title>Contact Details</title>
    <para>
      Please mail me any other suggestions you have to
      <email>codestriker-user@lists.sourceforge.net</email> or to me
      personally at <email>sits@users.sourceforge.net</email>.  To
      subscribe to the Codestriker mailing list, go to the following
      URL: <ulink
      url="http://lists.sourceforge.net/lists/listinfo/codestriker-user">http://lists.sourceforge.net/lists/listinfo/codestriker-user</ulink>.
      Contributions are most welcome!
    </para>
  </chapter>
      
</book>
